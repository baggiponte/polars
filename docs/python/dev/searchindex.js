Search.setIndex({"docnames": ["index", "reference/api", "reference/api/polars.Array", "reference/api/polars.Binary", "reference/api/polars.Boolean", "reference/api/polars.Categorical", "reference/api/polars.Config.activate_decimals", "reference/api/polars.Config.load", "reference/api/polars.Config.load_from_file", "reference/api/polars.Config.restore_defaults", "reference/api/polars.Config.save", "reference/api/polars.Config.save_to_file", "reference/api/polars.Config.set_ascii_tables", "reference/api/polars.Config.set_fmt_float", "reference/api/polars.Config.set_fmt_str_lengths", "reference/api/polars.Config.set_fmt_table_cell_list_len", "reference/api/polars.Config.set_streaming_chunk_size", "reference/api/polars.Config.set_tbl_cell_alignment", "reference/api/polars.Config.set_tbl_cols", "reference/api/polars.Config.set_tbl_column_data_type_inline", "reference/api/polars.Config.set_tbl_dataframe_shape_below", "reference/api/polars.Config.set_tbl_formatting", "reference/api/polars.Config.set_tbl_hide_column_data_types", "reference/api/polars.Config.set_tbl_hide_column_names", "reference/api/polars.Config.set_tbl_hide_dataframe_shape", "reference/api/polars.Config.set_tbl_hide_dtype_separator", "reference/api/polars.Config.set_tbl_rows", "reference/api/polars.Config.set_tbl_width_chars", "reference/api/polars.Config.set_verbose", "reference/api/polars.Config.state", "reference/api/polars.DataFrame.write_avro", "reference/api/polars.DataFrame.write_csv", "reference/api/polars.DataFrame.write_database", "reference/api/polars.DataFrame.write_delta", "reference/api/polars.DataFrame.write_excel", "reference/api/polars.DataFrame.write_ipc", "reference/api/polars.DataFrame.write_ipc_stream", "reference/api/polars.DataFrame.write_json", "reference/api/polars.DataFrame.write_ndjson", "reference/api/polars.DataFrame.write_parquet", "reference/api/polars.DataType", "reference/api/polars.Date", "reference/api/polars.Datetime", "reference/api/polars.Decimal", "reference/api/polars.Duration", "reference/api/polars.Float32", "reference/api/polars.Float64", "reference/api/polars.Int16", "reference/api/polars.Int32", "reference/api/polars.Int64", "reference/api/polars.Int8", "reference/api/polars.LazyFrame.sink_csv", "reference/api/polars.LazyFrame.sink_ipc", "reference/api/polars.LazyFrame.sink_parquet", "reference/api/polars.List", "reference/api/polars.Null", "reference/api/polars.Object", "reference/api/polars.SQLContext.execute", "reference/api/polars.SQLContext.register", "reference/api/polars.SQLContext.register_globals", "reference/api/polars.SQLContext.register_many", "reference/api/polars.SQLContext.tables", "reference/api/polars.SQLContext.unregister", "reference/api/polars.StringCache", "reference/api/polars.Struct", "reference/api/polars.Time", "reference/api/polars.UInt16", "reference/api/polars.UInt32", "reference/api/polars.UInt64", "reference/api/polars.UInt8", "reference/api/polars.Unknown", "reference/api/polars.Utf8", "reference/api/polars.align_frames", "reference/api/polars.api.register_dataframe_namespace", "reference/api/polars.api.register_expr_namespace", "reference/api/polars.api.register_lazyframe_namespace", "reference/api/polars.api.register_series_namespace", "reference/api/polars.build_info", "reference/api/polars.collect_all", "reference/api/polars.collect_all_async", "reference/api/polars.concat", "reference/api/polars.disable_string_cache", "reference/api/polars.enable_string_cache", "reference/api/polars.exceptions.ArrowError", "reference/api/polars.exceptions.ColumnNotFoundError", "reference/api/polars.exceptions.ComputeError", "reference/api/polars.exceptions.DuplicateError", "reference/api/polars.exceptions.InvalidOperationError", "reference/api/polars.exceptions.NoDataError", "reference/api/polars.exceptions.NoRowsReturnedError", "reference/api/polars.exceptions.PolarsPanicError", "reference/api/polars.exceptions.RowsError", "reference/api/polars.exceptions.SchemaError", "reference/api/polars.exceptions.SchemaFieldNotFoundError", "reference/api/polars.exceptions.ShapeError", "reference/api/polars.exceptions.StructFieldNotFoundError", "reference/api/polars.exceptions.TooManyRowsReturnedError", "reference/api/polars.from_arrow", "reference/api/polars.from_dataframe", "reference/api/polars.from_dict", "reference/api/polars.from_dicts", "reference/api/polars.from_numpy", "reference/api/polars.from_pandas", "reference/api/polars.from_records", "reference/api/polars.from_repr", "reference/api/polars.get_index_type", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "reference/api/polars.read_avro", "reference/api/polars.read_csv", "reference/api/polars.read_csv_batched", "reference/api/polars.read_database", "reference/api/polars.read_database_uri", "reference/api/polars.read_delta", "reference/api/polars.read_excel", "reference/api/polars.read_ipc", "reference/api/polars.read_ipc_schema", "reference/api/polars.read_ipc_stream", "reference/api/polars.read_json", "reference/api/polars.read_ndjson", "reference/api/polars.read_ods", "reference/api/polars.read_parquet", "reference/api/polars.read_parquet_schema", "reference/api/polars.scan_csv", "reference/api/polars.scan_delta", "reference/api/polars.scan_iceberg", "reference/api/polars.scan_ipc", "reference/api/polars.scan_ndjson", "reference/api/polars.scan_parquet", "reference/api/polars.scan_pyarrow_dataset", "reference/api/polars.set_random_seed", "reference/api/polars.show_versions", "reference/api/polars.testing.assert_frame_equal", "reference/api/polars.testing.assert_frame_not_equal", "reference/api/polars.testing.assert_series_equal", "reference/api/polars.testing.assert_series_not_equal", "reference/api/polars.testing.parametric.column", "reference/api/polars.testing.parametric.columns", "reference/api/polars.testing.parametric.create_list_strategy", "reference/api/polars.testing.parametric.dataframes", "reference/api/polars.testing.parametric.load_profile", "reference/api/polars.testing.parametric.series", "reference/api/polars.testing.parametric.set_profile", "reference/api/polars.threadpool_size", "reference/api/polars.using_string_cache", "reference/config", "reference/dataframe/aggregation", "reference/dataframe/api/polars.DataFrame.__dataframe__", "reference/dataframe/api/polars.DataFrame.apply", "reference/dataframe/api/polars.DataFrame.approx_n_unique", "reference/dataframe/api/polars.DataFrame.approx_unique", "reference/dataframe/api/polars.DataFrame.bottom_k", "reference/dataframe/api/polars.DataFrame.cast", "reference/dataframe/api/polars.DataFrame.clear", "reference/dataframe/api/polars.DataFrame.clone", "reference/dataframe/api/polars.DataFrame.columns", "reference/dataframe/api/polars.DataFrame.corr", "reference/dataframe/api/polars.DataFrame.describe", "reference/dataframe/api/polars.DataFrame.drop", "reference/dataframe/api/polars.DataFrame.drop_in_place", "reference/dataframe/api/polars.DataFrame.drop_nulls", "reference/dataframe/api/polars.DataFrame.dtypes", "reference/dataframe/api/polars.DataFrame.estimated_size", "reference/dataframe/api/polars.DataFrame.explode", "reference/dataframe/api/polars.DataFrame.extend", "reference/dataframe/api/polars.DataFrame.fill_nan", "reference/dataframe/api/polars.DataFrame.fill_null", "reference/dataframe/api/polars.DataFrame.filter", "reference/dataframe/api/polars.DataFrame.find_idx_by_name", "reference/dataframe/api/polars.DataFrame.flags", "reference/dataframe/api/polars.DataFrame.fold", "reference/dataframe/api/polars.DataFrame.frame_equal", "reference/dataframe/api/polars.DataFrame.get_column", "reference/dataframe/api/polars.DataFrame.get_columns", "reference/dataframe/api/polars.DataFrame.glimpse", "reference/dataframe/api/polars.DataFrame.group_by", "reference/dataframe/api/polars.DataFrame.group_by_dynamic", "reference/dataframe/api/polars.DataFrame.group_by_rolling", "reference/dataframe/api/polars.DataFrame.groupby", "reference/dataframe/api/polars.DataFrame.groupby_dynamic", "reference/dataframe/api/polars.DataFrame.groupby_rolling", "reference/dataframe/api/polars.DataFrame.hash_rows", "reference/dataframe/api/polars.DataFrame.head", "reference/dataframe/api/polars.DataFrame.height", "reference/dataframe/api/polars.DataFrame.hstack", "reference/dataframe/api/polars.DataFrame.insert_at_idx", "reference/dataframe/api/polars.DataFrame.interpolate", "reference/dataframe/api/polars.DataFrame.is_duplicated", "reference/dataframe/api/polars.DataFrame.is_empty", "reference/dataframe/api/polars.DataFrame.is_unique", "reference/dataframe/api/polars.DataFrame.item", "reference/dataframe/api/polars.DataFrame.iter_rows", "reference/dataframe/api/polars.DataFrame.iter_slices", "reference/dataframe/api/polars.DataFrame.join", "reference/dataframe/api/polars.DataFrame.join_asof", "reference/dataframe/api/polars.DataFrame.lazy", "reference/dataframe/api/polars.DataFrame.limit", "reference/dataframe/api/polars.DataFrame.map_rows", "reference/dataframe/api/polars.DataFrame.max", "reference/dataframe/api/polars.DataFrame.mean", "reference/dataframe/api/polars.DataFrame.median", "reference/dataframe/api/polars.DataFrame.melt", "reference/dataframe/api/polars.DataFrame.merge_sorted", "reference/dataframe/api/polars.DataFrame.min", "reference/dataframe/api/polars.DataFrame.n_chunks", "reference/dataframe/api/polars.DataFrame.n_unique", "reference/dataframe/api/polars.DataFrame.null_count", "reference/dataframe/api/polars.DataFrame.partition_by", "reference/dataframe/api/polars.DataFrame.pipe", "reference/dataframe/api/polars.DataFrame.pivot", "reference/dataframe/api/polars.DataFrame.product", "reference/dataframe/api/polars.DataFrame.quantile", "reference/dataframe/api/polars.DataFrame.rechunk", "reference/dataframe/api/polars.DataFrame.rename", "reference/dataframe/api/polars.DataFrame.replace", "reference/dataframe/api/polars.DataFrame.replace_at_idx", "reference/dataframe/api/polars.DataFrame.reverse", "reference/dataframe/api/polars.DataFrame.rolling", "reference/dataframe/api/polars.DataFrame.row", "reference/dataframe/api/polars.DataFrame.rows", "reference/dataframe/api/polars.DataFrame.rows_by_key", "reference/dataframe/api/polars.DataFrame.sample", "reference/dataframe/api/polars.DataFrame.schema", "reference/dataframe/api/polars.DataFrame.select", "reference/dataframe/api/polars.DataFrame.select_seq", "reference/dataframe/api/polars.DataFrame.set_sorted", "reference/dataframe/api/polars.DataFrame.shape", "reference/dataframe/api/polars.DataFrame.shift", "reference/dataframe/api/polars.DataFrame.shift_and_fill", "reference/dataframe/api/polars.DataFrame.shrink_to_fit", "reference/dataframe/api/polars.DataFrame.slice", "reference/dataframe/api/polars.DataFrame.sort", "reference/dataframe/api/polars.DataFrame.std", "reference/dataframe/api/polars.DataFrame.sum", "reference/dataframe/api/polars.DataFrame.tail", "reference/dataframe/api/polars.DataFrame.take_every", "reference/dataframe/api/polars.DataFrame.to_arrow", "reference/dataframe/api/polars.DataFrame.to_dict", "reference/dataframe/api/polars.DataFrame.to_dicts", "reference/dataframe/api/polars.DataFrame.to_dummies", "reference/dataframe/api/polars.DataFrame.to_init_repr", "reference/dataframe/api/polars.DataFrame.to_numpy", "reference/dataframe/api/polars.DataFrame.to_pandas", "reference/dataframe/api/polars.DataFrame.to_series", "reference/dataframe/api/polars.DataFrame.to_struct", "reference/dataframe/api/polars.DataFrame.top_k", "reference/dataframe/api/polars.DataFrame.transpose", "reference/dataframe/api/polars.DataFrame.unique", "reference/dataframe/api/polars.DataFrame.unnest", "reference/dataframe/api/polars.DataFrame.unstack", "reference/dataframe/api/polars.DataFrame.update", "reference/dataframe/api/polars.DataFrame.upsample", "reference/dataframe/api/polars.DataFrame.var", "reference/dataframe/api/polars.DataFrame.vstack", "reference/dataframe/api/polars.DataFrame.width", "reference/dataframe/api/polars.DataFrame.with_columns", "reference/dataframe/api/polars.DataFrame.with_columns_seq", "reference/dataframe/api/polars.DataFrame.with_row_count", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.__iter__", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.agg", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.all", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.apply", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.count", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.first", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.head", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.last", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.map_groups", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.max", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.mean", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.median", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.min", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.n_unique", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.quantile", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.sum", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.tail", "reference/dataframe/attributes", "reference/dataframe/computation", "reference/dataframe/descriptive", "reference/dataframe/export", "reference/dataframe/group_by", "reference/dataframe/index", "reference/dataframe/miscellaneous", "reference/dataframe/modify_select", "reference/datatypes", "reference/exceptions", "reference/expressions/aggregation", "reference/expressions/api/polars.Expr.abs", "reference/expressions/api/polars.Expr.add", "reference/expressions/api/polars.Expr.agg_groups", "reference/expressions/api/polars.Expr.alias", "reference/expressions/api/polars.Expr.all", "reference/expressions/api/polars.Expr.and_", "reference/expressions/api/polars.Expr.any", "reference/expressions/api/polars.Expr.append", "reference/expressions/api/polars.Expr.apply", "reference/expressions/api/polars.Expr.approx_n_unique", "reference/expressions/api/polars.Expr.arccos", "reference/expressions/api/polars.Expr.arccosh", "reference/expressions/api/polars.Expr.arcsin", "reference/expressions/api/polars.Expr.arcsinh", "reference/expressions/api/polars.Expr.arctan", "reference/expressions/api/polars.Expr.arctanh", "reference/expressions/api/polars.Expr.arg_max", "reference/expressions/api/polars.Expr.arg_min", "reference/expressions/api/polars.Expr.arg_sort", "reference/expressions/api/polars.Expr.arg_true", "reference/expressions/api/polars.Expr.arg_unique", "reference/expressions/api/polars.Expr.arr.max", "reference/expressions/api/polars.Expr.arr.min", "reference/expressions/api/polars.Expr.arr.sum", "reference/expressions/api/polars.Expr.arr.unique", "reference/expressions/api/polars.Expr.backward_fill", "reference/expressions/api/polars.Expr.bin.contains", "reference/expressions/api/polars.Expr.bin.decode", "reference/expressions/api/polars.Expr.bin.encode", "reference/expressions/api/polars.Expr.bin.ends_with", "reference/expressions/api/polars.Expr.bin.starts_with", "reference/expressions/api/polars.Expr.bottom_k", "reference/expressions/api/polars.Expr.cache", "reference/expressions/api/polars.Expr.cast", "reference/expressions/api/polars.Expr.cat.get_categories", "reference/expressions/api/polars.Expr.cat.set_ordering", "reference/expressions/api/polars.Expr.cbrt", "reference/expressions/api/polars.Expr.ceil", "reference/expressions/api/polars.Expr.clip", "reference/expressions/api/polars.Expr.clip_max", "reference/expressions/api/polars.Expr.clip_min", "reference/expressions/api/polars.Expr.cos", "reference/expressions/api/polars.Expr.cosh", "reference/expressions/api/polars.Expr.cot", "reference/expressions/api/polars.Expr.count", "reference/expressions/api/polars.Expr.cumcount", "reference/expressions/api/polars.Expr.cummax", "reference/expressions/api/polars.Expr.cummin", "reference/expressions/api/polars.Expr.cumprod", "reference/expressions/api/polars.Expr.cumsum", "reference/expressions/api/polars.Expr.cumulative_eval", "reference/expressions/api/polars.Expr.cut", "reference/expressions/api/polars.Expr.degrees", "reference/expressions/api/polars.Expr.diff", "reference/expressions/api/polars.Expr.dot", "reference/expressions/api/polars.Expr.drop_nans", "reference/expressions/api/polars.Expr.drop_nulls", "reference/expressions/api/polars.Expr.dt.base_utc_offset", "reference/expressions/api/polars.Expr.dt.cast_time_unit", "reference/expressions/api/polars.Expr.dt.combine", "reference/expressions/api/polars.Expr.dt.convert_time_zone", "reference/expressions/api/polars.Expr.dt.date", "reference/expressions/api/polars.Expr.dt.datetime", "reference/expressions/api/polars.Expr.dt.day", "reference/expressions/api/polars.Expr.dt.days", "reference/expressions/api/polars.Expr.dt.dst_offset", "reference/expressions/api/polars.Expr.dt.epoch", "reference/expressions/api/polars.Expr.dt.hour", "reference/expressions/api/polars.Expr.dt.hours", "reference/expressions/api/polars.Expr.dt.is_leap_year", "reference/expressions/api/polars.Expr.dt.iso_year", "reference/expressions/api/polars.Expr.dt.microsecond", "reference/expressions/api/polars.Expr.dt.microseconds", "reference/expressions/api/polars.Expr.dt.millisecond", "reference/expressions/api/polars.Expr.dt.milliseconds", "reference/expressions/api/polars.Expr.dt.minute", "reference/expressions/api/polars.Expr.dt.minutes", "reference/expressions/api/polars.Expr.dt.month", "reference/expressions/api/polars.Expr.dt.month_end", "reference/expressions/api/polars.Expr.dt.month_start", "reference/expressions/api/polars.Expr.dt.nanosecond", "reference/expressions/api/polars.Expr.dt.nanoseconds", "reference/expressions/api/polars.Expr.dt.offset_by", "reference/expressions/api/polars.Expr.dt.ordinal_day", "reference/expressions/api/polars.Expr.dt.quarter", "reference/expressions/api/polars.Expr.dt.replace_time_zone", "reference/expressions/api/polars.Expr.dt.round", "reference/expressions/api/polars.Expr.dt.second", "reference/expressions/api/polars.Expr.dt.seconds", "reference/expressions/api/polars.Expr.dt.strftime", "reference/expressions/api/polars.Expr.dt.time", "reference/expressions/api/polars.Expr.dt.timestamp", "reference/expressions/api/polars.Expr.dt.to_string", "reference/expressions/api/polars.Expr.dt.truncate", "reference/expressions/api/polars.Expr.dt.week", "reference/expressions/api/polars.Expr.dt.weekday", "reference/expressions/api/polars.Expr.dt.with_time_unit", "reference/expressions/api/polars.Expr.dt.year", "reference/expressions/api/polars.Expr.entropy", "reference/expressions/api/polars.Expr.eq", "reference/expressions/api/polars.Expr.eq_missing", "reference/expressions/api/polars.Expr.ewm_mean", "reference/expressions/api/polars.Expr.ewm_std", "reference/expressions/api/polars.Expr.ewm_var", "reference/expressions/api/polars.Expr.exclude", "reference/expressions/api/polars.Expr.exp", "reference/expressions/api/polars.Expr.explode", "reference/expressions/api/polars.Expr.extend_constant", "reference/expressions/api/polars.Expr.fill_nan", "reference/expressions/api/polars.Expr.fill_null", "reference/expressions/api/polars.Expr.filter", "reference/expressions/api/polars.Expr.first", "reference/expressions/api/polars.Expr.flatten", "reference/expressions/api/polars.Expr.floor", "reference/expressions/api/polars.Expr.floordiv", "reference/expressions/api/polars.Expr.forward_fill", "reference/expressions/api/polars.Expr.from_json", "reference/expressions/api/polars.Expr.ge", "reference/expressions/api/polars.Expr.get", "reference/expressions/api/polars.Expr.gt", "reference/expressions/api/polars.Expr.hash", "reference/expressions/api/polars.Expr.head", "reference/expressions/api/polars.Expr.implode", "reference/expressions/api/polars.Expr.inspect", "reference/expressions/api/polars.Expr.interpolate", "reference/expressions/api/polars.Expr.is_between", "reference/expressions/api/polars.Expr.is_duplicated", "reference/expressions/api/polars.Expr.is_finite", "reference/expressions/api/polars.Expr.is_first", "reference/expressions/api/polars.Expr.is_first_distinct", "reference/expressions/api/polars.Expr.is_in", "reference/expressions/api/polars.Expr.is_infinite", "reference/expressions/api/polars.Expr.is_last", "reference/expressions/api/polars.Expr.is_last_distinct", "reference/expressions/api/polars.Expr.is_nan", "reference/expressions/api/polars.Expr.is_not", "reference/expressions/api/polars.Expr.is_not_nan", "reference/expressions/api/polars.Expr.is_not_null", "reference/expressions/api/polars.Expr.is_null", "reference/expressions/api/polars.Expr.is_unique", "reference/expressions/api/polars.Expr.keep_name", "reference/expressions/api/polars.Expr.kurtosis", "reference/expressions/api/polars.Expr.last", "reference/expressions/api/polars.Expr.le", "reference/expressions/api/polars.Expr.len", "reference/expressions/api/polars.Expr.limit", "reference/expressions/api/polars.Expr.list.all", "reference/expressions/api/polars.Expr.list.any", "reference/expressions/api/polars.Expr.list.arg_max", "reference/expressions/api/polars.Expr.list.arg_min", "reference/expressions/api/polars.Expr.list.concat", "reference/expressions/api/polars.Expr.list.contains", "reference/expressions/api/polars.Expr.list.count_match", "reference/expressions/api/polars.Expr.list.count_matches", "reference/expressions/api/polars.Expr.list.diff", "reference/expressions/api/polars.Expr.list.difference", "reference/expressions/api/polars.Expr.list.drop_nulls", "reference/expressions/api/polars.Expr.list.eval", "reference/expressions/api/polars.Expr.list.explode", "reference/expressions/api/polars.Expr.list.first", "reference/expressions/api/polars.Expr.list.get", "reference/expressions/api/polars.Expr.list.head", "reference/expressions/api/polars.Expr.list.intersection", "reference/expressions/api/polars.Expr.list.join", "reference/expressions/api/polars.Expr.list.last", "reference/expressions/api/polars.Expr.list.len", "reference/expressions/api/polars.Expr.list.lengths", "reference/expressions/api/polars.Expr.list.max", "reference/expressions/api/polars.Expr.list.mean", "reference/expressions/api/polars.Expr.list.min", "reference/expressions/api/polars.Expr.list.reverse", "reference/expressions/api/polars.Expr.list.sample", "reference/expressions/api/polars.Expr.list.set_difference", "reference/expressions/api/polars.Expr.list.set_intersection", "reference/expressions/api/polars.Expr.list.set_symmetric_difference", "reference/expressions/api/polars.Expr.list.set_union", "reference/expressions/api/polars.Expr.list.shift", "reference/expressions/api/polars.Expr.list.slice", "reference/expressions/api/polars.Expr.list.sort", "reference/expressions/api/polars.Expr.list.sum", "reference/expressions/api/polars.Expr.list.symmetric_difference", "reference/expressions/api/polars.Expr.list.tail", "reference/expressions/api/polars.Expr.list.take", "reference/expressions/api/polars.Expr.list.to_struct", "reference/expressions/api/polars.Expr.list.union", "reference/expressions/api/polars.Expr.list.unique", "reference/expressions/api/polars.Expr.log", "reference/expressions/api/polars.Expr.log10", "reference/expressions/api/polars.Expr.log1p", "reference/expressions/api/polars.Expr.lower_bound", "reference/expressions/api/polars.Expr.lt", "reference/expressions/api/polars.Expr.map", "reference/expressions/api/polars.Expr.map_alias", "reference/expressions/api/polars.Expr.map_batches", "reference/expressions/api/polars.Expr.map_dict", "reference/expressions/api/polars.Expr.map_elements", "reference/expressions/api/polars.Expr.max", "reference/expressions/api/polars.Expr.mean", "reference/expressions/api/polars.Expr.median", "reference/expressions/api/polars.Expr.meta.eq", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs", "reference/expressions/api/polars.Expr.meta.is_regex_projection", "reference/expressions/api/polars.Expr.meta.ne", "reference/expressions/api/polars.Expr.meta.output_name", "reference/expressions/api/polars.Expr.meta.pop", "reference/expressions/api/polars.Expr.meta.root_names", "reference/expressions/api/polars.Expr.meta.tree_format", "reference/expressions/api/polars.Expr.meta.undo_aliases", "reference/expressions/api/polars.Expr.meta.write_json", "reference/expressions/api/polars.Expr.min", "reference/expressions/api/polars.Expr.mod", "reference/expressions/api/polars.Expr.mode", "reference/expressions/api/polars.Expr.mul", "reference/expressions/api/polars.Expr.n_unique", "reference/expressions/api/polars.Expr.name.keep", "reference/expressions/api/polars.Expr.name.map", "reference/expressions/api/polars.Expr.name.prefix", "reference/expressions/api/polars.Expr.name.suffix", "reference/expressions/api/polars.Expr.name.to_lowercase", "reference/expressions/api/polars.Expr.name.to_uppercase", "reference/expressions/api/polars.Expr.nan_max", "reference/expressions/api/polars.Expr.nan_min", "reference/expressions/api/polars.Expr.ne", "reference/expressions/api/polars.Expr.ne_missing", "reference/expressions/api/polars.Expr.not_", "reference/expressions/api/polars.Expr.null_count", "reference/expressions/api/polars.Expr.or_", "reference/expressions/api/polars.Expr.over", "reference/expressions/api/polars.Expr.pct_change", "reference/expressions/api/polars.Expr.peak_max", "reference/expressions/api/polars.Expr.peak_min", "reference/expressions/api/polars.Expr.pipe", "reference/expressions/api/polars.Expr.pow", "reference/expressions/api/polars.Expr.prefix", "reference/expressions/api/polars.Expr.product", "reference/expressions/api/polars.Expr.qcut", "reference/expressions/api/polars.Expr.quantile", "reference/expressions/api/polars.Expr.radians", "reference/expressions/api/polars.Expr.rank", "reference/expressions/api/polars.Expr.rechunk", "reference/expressions/api/polars.Expr.reinterpret", "reference/expressions/api/polars.Expr.repeat_by", "reference/expressions/api/polars.Expr.reshape", "reference/expressions/api/polars.Expr.reverse", "reference/expressions/api/polars.Expr.rle", "reference/expressions/api/polars.Expr.rle_id", "reference/expressions/api/polars.Expr.rolling", "reference/expressions/api/polars.Expr.rolling_apply", "reference/expressions/api/polars.Expr.rolling_map", "reference/expressions/api/polars.Expr.rolling_max", "reference/expressions/api/polars.Expr.rolling_mean", "reference/expressions/api/polars.Expr.rolling_median", "reference/expressions/api/polars.Expr.rolling_min", "reference/expressions/api/polars.Expr.rolling_quantile", "reference/expressions/api/polars.Expr.rolling_skew", "reference/expressions/api/polars.Expr.rolling_std", "reference/expressions/api/polars.Expr.rolling_sum", "reference/expressions/api/polars.Expr.rolling_var", "reference/expressions/api/polars.Expr.round", "reference/expressions/api/polars.Expr.sample", "reference/expressions/api/polars.Expr.search_sorted", "reference/expressions/api/polars.Expr.set_sorted", "reference/expressions/api/polars.Expr.shift", "reference/expressions/api/polars.Expr.shift_and_fill", "reference/expressions/api/polars.Expr.shrink_dtype", "reference/expressions/api/polars.Expr.shuffle", "reference/expressions/api/polars.Expr.sign", "reference/expressions/api/polars.Expr.sin", "reference/expressions/api/polars.Expr.sinh", "reference/expressions/api/polars.Expr.skew", "reference/expressions/api/polars.Expr.slice", "reference/expressions/api/polars.Expr.sort", "reference/expressions/api/polars.Expr.sort_by", "reference/expressions/api/polars.Expr.sqrt", "reference/expressions/api/polars.Expr.std", "reference/expressions/api/polars.Expr.str.concat", "reference/expressions/api/polars.Expr.str.contains", "reference/expressions/api/polars.Expr.str.count_match", "reference/expressions/api/polars.Expr.str.count_matches", "reference/expressions/api/polars.Expr.str.decode", "reference/expressions/api/polars.Expr.str.encode", "reference/expressions/api/polars.Expr.str.ends_with", "reference/expressions/api/polars.Expr.str.explode", "reference/expressions/api/polars.Expr.str.extract", "reference/expressions/api/polars.Expr.str.extract_all", "reference/expressions/api/polars.Expr.str.extract_groups", "reference/expressions/api/polars.Expr.str.json_extract", "reference/expressions/api/polars.Expr.str.json_path_match", "reference/expressions/api/polars.Expr.str.len_bytes", "reference/expressions/api/polars.Expr.str.len_chars", "reference/expressions/api/polars.Expr.str.lengths", "reference/expressions/api/polars.Expr.str.ljust", "reference/expressions/api/polars.Expr.str.lstrip", "reference/expressions/api/polars.Expr.str.n_chars", "reference/expressions/api/polars.Expr.str.pad_end", "reference/expressions/api/polars.Expr.str.pad_start", "reference/expressions/api/polars.Expr.str.parse_int", "reference/expressions/api/polars.Expr.str.replace", "reference/expressions/api/polars.Expr.str.replace_all", "reference/expressions/api/polars.Expr.str.rjust", "reference/expressions/api/polars.Expr.str.rstrip", "reference/expressions/api/polars.Expr.str.slice", "reference/expressions/api/polars.Expr.str.split", "reference/expressions/api/polars.Expr.str.split_exact", "reference/expressions/api/polars.Expr.str.splitn", "reference/expressions/api/polars.Expr.str.starts_with", "reference/expressions/api/polars.Expr.str.strip", "reference/expressions/api/polars.Expr.str.strip_chars", "reference/expressions/api/polars.Expr.str.strip_chars_end", "reference/expressions/api/polars.Expr.str.strip_chars_start", "reference/expressions/api/polars.Expr.str.strip_prefix", "reference/expressions/api/polars.Expr.str.strip_suffix", "reference/expressions/api/polars.Expr.str.strptime", "reference/expressions/api/polars.Expr.str.to_date", "reference/expressions/api/polars.Expr.str.to_datetime", "reference/expressions/api/polars.Expr.str.to_decimal", "reference/expressions/api/polars.Expr.str.to_lowercase", "reference/expressions/api/polars.Expr.str.to_time", "reference/expressions/api/polars.Expr.str.to_titlecase", "reference/expressions/api/polars.Expr.str.to_uppercase", "reference/expressions/api/polars.Expr.str.zfill", "reference/expressions/api/polars.Expr.struct.field", "reference/expressions/api/polars.Expr.struct.rename_fields", "reference/expressions/api/polars.Expr.sub", "reference/expressions/api/polars.Expr.suffix", "reference/expressions/api/polars.Expr.sum", "reference/expressions/api/polars.Expr.tail", "reference/expressions/api/polars.Expr.take", "reference/expressions/api/polars.Expr.take_every", "reference/expressions/api/polars.Expr.tan", "reference/expressions/api/polars.Expr.tanh", "reference/expressions/api/polars.Expr.to_physical", "reference/expressions/api/polars.Expr.top_k", "reference/expressions/api/polars.Expr.truediv", "reference/expressions/api/polars.Expr.unique", "reference/expressions/api/polars.Expr.unique_counts", "reference/expressions/api/polars.Expr.upper_bound", "reference/expressions/api/polars.Expr.value_counts", "reference/expressions/api/polars.Expr.var", "reference/expressions/api/polars.Expr.where", "reference/expressions/api/polars.Expr.xor", "reference/expressions/api/polars.all", "reference/expressions/api/polars.all_horizontal", "reference/expressions/api/polars.any", "reference/expressions/api/polars.any_horizontal", "reference/expressions/api/polars.apply", "reference/expressions/api/polars.approx_n_unique", "reference/expressions/api/polars.arange", "reference/expressions/api/polars.arctan2", "reference/expressions/api/polars.arctan2d", "reference/expressions/api/polars.arg_sort_by", "reference/expressions/api/polars.arg_where", "reference/expressions/api/polars.avg", "reference/expressions/api/polars.coalesce", "reference/expressions/api/polars.concat_list", "reference/expressions/api/polars.concat_str", "reference/expressions/api/polars.corr", "reference/expressions/api/polars.count", "reference/expressions/api/polars.cov", "reference/expressions/api/polars.cumfold", "reference/expressions/api/polars.cumreduce", "reference/expressions/api/polars.cumsum", "reference/expressions/api/polars.cumsum_horizontal", "reference/expressions/api/polars.date", "reference/expressions/api/polars.date_range", "reference/expressions/api/polars.date_ranges", "reference/expressions/api/polars.datetime", "reference/expressions/api/polars.datetime_range", "reference/expressions/api/polars.datetime_ranges", "reference/expressions/api/polars.duration", "reference/expressions/api/polars.element", "reference/expressions/api/polars.exclude", "reference/expressions/api/polars.first", "reference/expressions/api/polars.fold", "reference/expressions/api/polars.format", "reference/expressions/api/polars.from_epoch", "reference/expressions/api/polars.groups", "reference/expressions/api/polars.head", "reference/expressions/api/polars.implode", "reference/expressions/api/polars.int_range", "reference/expressions/api/polars.int_ranges", "reference/expressions/api/polars.last", "reference/expressions/api/polars.lit", "reference/expressions/api/polars.map", "reference/expressions/api/polars.map_batches", "reference/expressions/api/polars.map_groups", "reference/expressions/api/polars.max", "reference/expressions/api/polars.max_horizontal", "reference/expressions/api/polars.mean", "reference/expressions/api/polars.median", "reference/expressions/api/polars.min", "reference/expressions/api/polars.min_horizontal", "reference/expressions/api/polars.n_unique", "reference/expressions/api/polars.ones", "reference/expressions/api/polars.quantile", "reference/expressions/api/polars.reduce", "reference/expressions/api/polars.repeat", "reference/expressions/api/polars.rolling_corr", "reference/expressions/api/polars.rolling_cov", "reference/expressions/api/polars.select", "reference/expressions/api/polars.sql_expr", "reference/expressions/api/polars.std", "reference/expressions/api/polars.struct", "reference/expressions/api/polars.sum", "reference/expressions/api/polars.sum_horizontal", "reference/expressions/api/polars.tail", "reference/expressions/api/polars.time", "reference/expressions/api/polars.time_range", "reference/expressions/api/polars.time_ranges", "reference/expressions/api/polars.var", "reference/expressions/api/polars.when", "reference/expressions/api/polars.zeros", "reference/expressions/array", "reference/expressions/binary", "reference/expressions/boolean", "reference/expressions/categories", "reference/expressions/col", "reference/expressions/columns", "reference/expressions/computation", "reference/expressions/functions", "reference/expressions/index", "reference/expressions/list", "reference/expressions/meta", "reference/expressions/miscellaneous", "reference/expressions/modify_select", "reference/expressions/name", "reference/expressions/operators", "reference/expressions/string", "reference/expressions/struct", "reference/expressions/temporal", "reference/expressions/window", "reference/functions", "reference/index", "reference/io", "reference/lazyframe/aggregation", "reference/lazyframe/api/polars.LazyFrame.approx_n_unique", "reference/lazyframe/api/polars.LazyFrame.approx_unique", "reference/lazyframe/api/polars.LazyFrame.bottom_k", "reference/lazyframe/api/polars.LazyFrame.cache", "reference/lazyframe/api/polars.LazyFrame.cast", "reference/lazyframe/api/polars.LazyFrame.clear", "reference/lazyframe/api/polars.LazyFrame.clone", "reference/lazyframe/api/polars.LazyFrame.collect", "reference/lazyframe/api/polars.LazyFrame.collect_async", "reference/lazyframe/api/polars.LazyFrame.columns", "reference/lazyframe/api/polars.LazyFrame.deserialize", "reference/lazyframe/api/polars.LazyFrame.drop", "reference/lazyframe/api/polars.LazyFrame.drop_nulls", "reference/lazyframe/api/polars.LazyFrame.dtypes", "reference/lazyframe/api/polars.LazyFrame.explain", "reference/lazyframe/api/polars.LazyFrame.explode", "reference/lazyframe/api/polars.LazyFrame.fetch", "reference/lazyframe/api/polars.LazyFrame.fill_nan", "reference/lazyframe/api/polars.LazyFrame.fill_null", "reference/lazyframe/api/polars.LazyFrame.filter", "reference/lazyframe/api/polars.LazyFrame.first", "reference/lazyframe/api/polars.LazyFrame.from_json", "reference/lazyframe/api/polars.LazyFrame.group_by", "reference/lazyframe/api/polars.LazyFrame.group_by_dynamic", "reference/lazyframe/api/polars.LazyFrame.group_by_rolling", "reference/lazyframe/api/polars.LazyFrame.groupby", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling", "reference/lazyframe/api/polars.LazyFrame.head", "reference/lazyframe/api/polars.LazyFrame.inspect", "reference/lazyframe/api/polars.LazyFrame.interpolate", "reference/lazyframe/api/polars.LazyFrame.join", "reference/lazyframe/api/polars.LazyFrame.join_asof", "reference/lazyframe/api/polars.LazyFrame.last", "reference/lazyframe/api/polars.LazyFrame.lazy", "reference/lazyframe/api/polars.LazyFrame.limit", "reference/lazyframe/api/polars.LazyFrame.map", "reference/lazyframe/api/polars.LazyFrame.map_batches", "reference/lazyframe/api/polars.LazyFrame.max", "reference/lazyframe/api/polars.LazyFrame.mean", "reference/lazyframe/api/polars.LazyFrame.median", "reference/lazyframe/api/polars.LazyFrame.melt", "reference/lazyframe/api/polars.LazyFrame.merge_sorted", "reference/lazyframe/api/polars.LazyFrame.min", "reference/lazyframe/api/polars.LazyFrame.null_count", "reference/lazyframe/api/polars.LazyFrame.pipe", "reference/lazyframe/api/polars.LazyFrame.profile", "reference/lazyframe/api/polars.LazyFrame.quantile", "reference/lazyframe/api/polars.LazyFrame.read_json", "reference/lazyframe/api/polars.LazyFrame.rename", "reference/lazyframe/api/polars.LazyFrame.reverse", "reference/lazyframe/api/polars.LazyFrame.rolling", "reference/lazyframe/api/polars.LazyFrame.schema", "reference/lazyframe/api/polars.LazyFrame.select", "reference/lazyframe/api/polars.LazyFrame.select_seq", "reference/lazyframe/api/polars.LazyFrame.serialize", "reference/lazyframe/api/polars.LazyFrame.set_sorted", "reference/lazyframe/api/polars.LazyFrame.shift", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill", "reference/lazyframe/api/polars.LazyFrame.show_graph", "reference/lazyframe/api/polars.LazyFrame.slice", "reference/lazyframe/api/polars.LazyFrame.sort", "reference/lazyframe/api/polars.LazyFrame.std", "reference/lazyframe/api/polars.LazyFrame.sum", "reference/lazyframe/api/polars.LazyFrame.tail", "reference/lazyframe/api/polars.LazyFrame.take_every", "reference/lazyframe/api/polars.LazyFrame.top_k", "reference/lazyframe/api/polars.LazyFrame.unique", "reference/lazyframe/api/polars.LazyFrame.unnest", "reference/lazyframe/api/polars.LazyFrame.update", "reference/lazyframe/api/polars.LazyFrame.var", "reference/lazyframe/api/polars.LazyFrame.width", "reference/lazyframe/api/polars.LazyFrame.with_columns", "reference/lazyframe/api/polars.LazyFrame.with_columns_seq", "reference/lazyframe/api/polars.LazyFrame.with_context", "reference/lazyframe/api/polars.LazyFrame.with_row_count", "reference/lazyframe/api/polars.LazyFrame.write_json", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.agg", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.all", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.apply", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.count", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.first", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.head", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.last", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.map_groups", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.max", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.mean", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.median", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.min", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.n_unique", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.quantile", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.sum", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.tail", "reference/lazyframe/attributes", "reference/lazyframe/descriptive", "reference/lazyframe/group_by", "reference/lazyframe/index", "reference/lazyframe/miscellaneous", "reference/lazyframe/modify_select", "reference/selectors", "reference/series/aggregation", "reference/series/api/polars.Series.abs", "reference/series/api/polars.Series.alias", "reference/series/api/polars.Series.all", "reference/series/api/polars.Series.any", "reference/series/api/polars.Series.append", "reference/series/api/polars.Series.apply", "reference/series/api/polars.Series.arccos", "reference/series/api/polars.Series.arccosh", "reference/series/api/polars.Series.arcsin", "reference/series/api/polars.Series.arcsinh", "reference/series/api/polars.Series.arctan", "reference/series/api/polars.Series.arctanh", "reference/series/api/polars.Series.arg_max", "reference/series/api/polars.Series.arg_min", "reference/series/api/polars.Series.arg_sort", "reference/series/api/polars.Series.arg_true", "reference/series/api/polars.Series.arg_unique", "reference/series/api/polars.Series.arr.max", "reference/series/api/polars.Series.arr.min", "reference/series/api/polars.Series.arr.sum", "reference/series/api/polars.Series.arr.unique", "reference/series/api/polars.Series.bin.contains", "reference/series/api/polars.Series.bin.decode", "reference/series/api/polars.Series.bin.encode", "reference/series/api/polars.Series.bin.ends_with", "reference/series/api/polars.Series.bin.starts_with", "reference/series/api/polars.Series.bottom_k", "reference/series/api/polars.Series.cast", "reference/series/api/polars.Series.cat", "reference/series/api/polars.Series.cat.get_categories", "reference/series/api/polars.Series.cat.is_local", "reference/series/api/polars.Series.cat.set_ordering", "reference/series/api/polars.Series.cat.to_local", "reference/series/api/polars.Series.cat.uses_lexical_ordering", "reference/series/api/polars.Series.cbrt", "reference/series/api/polars.Series.ceil", "reference/series/api/polars.Series.chunk_lengths", "reference/series/api/polars.Series.clear", "reference/series/api/polars.Series.clip", "reference/series/api/polars.Series.clip_max", "reference/series/api/polars.Series.clip_min", "reference/series/api/polars.Series.clone", "reference/series/api/polars.Series.cos", "reference/series/api/polars.Series.cosh", "reference/series/api/polars.Series.cot", "reference/series/api/polars.Series.cummax", "reference/series/api/polars.Series.cummin", "reference/series/api/polars.Series.cumprod", "reference/series/api/polars.Series.cumsum", "reference/series/api/polars.Series.cumulative_eval", "reference/series/api/polars.Series.cut", "reference/series/api/polars.Series.describe", "reference/series/api/polars.Series.diff", "reference/series/api/polars.Series.dot", "reference/series/api/polars.Series.drop_nans", "reference/series/api/polars.Series.drop_nulls", "reference/series/api/polars.Series.dt", "reference/series/api/polars.Series.dt.base_utc_offset", "reference/series/api/polars.Series.dt.cast_time_unit", "reference/series/api/polars.Series.dt.combine", "reference/series/api/polars.Series.dt.convert_time_zone", "reference/series/api/polars.Series.dt.date", "reference/series/api/polars.Series.dt.datetime", "reference/series/api/polars.Series.dt.day", "reference/series/api/polars.Series.dt.days", "reference/series/api/polars.Series.dt.dst_offset", "reference/series/api/polars.Series.dt.epoch", "reference/series/api/polars.Series.dt.hour", "reference/series/api/polars.Series.dt.hours", "reference/series/api/polars.Series.dt.is_leap_year", "reference/series/api/polars.Series.dt.iso_year", "reference/series/api/polars.Series.dt.max", "reference/series/api/polars.Series.dt.mean", "reference/series/api/polars.Series.dt.median", "reference/series/api/polars.Series.dt.microsecond", "reference/series/api/polars.Series.dt.microseconds", "reference/series/api/polars.Series.dt.millisecond", "reference/series/api/polars.Series.dt.milliseconds", "reference/series/api/polars.Series.dt.min", "reference/series/api/polars.Series.dt.minute", "reference/series/api/polars.Series.dt.minutes", "reference/series/api/polars.Series.dt.month", "reference/series/api/polars.Series.dt.month_end", "reference/series/api/polars.Series.dt.month_start", "reference/series/api/polars.Series.dt.nanosecond", "reference/series/api/polars.Series.dt.nanoseconds", "reference/series/api/polars.Series.dt.offset_by", "reference/series/api/polars.Series.dt.ordinal_day", "reference/series/api/polars.Series.dt.quarter", "reference/series/api/polars.Series.dt.replace_time_zone", "reference/series/api/polars.Series.dt.round", "reference/series/api/polars.Series.dt.second", "reference/series/api/polars.Series.dt.seconds", "reference/series/api/polars.Series.dt.strftime", "reference/series/api/polars.Series.dt.time", "reference/series/api/polars.Series.dt.timestamp", "reference/series/api/polars.Series.dt.to_string", "reference/series/api/polars.Series.dt.truncate", "reference/series/api/polars.Series.dt.week", "reference/series/api/polars.Series.dt.weekday", "reference/series/api/polars.Series.dt.with_time_unit", "reference/series/api/polars.Series.dt.year", "reference/series/api/polars.Series.dtype", "reference/series/api/polars.Series.entropy", "reference/series/api/polars.Series.estimated_size", "reference/series/api/polars.Series.ewm_mean", "reference/series/api/polars.Series.ewm_std", "reference/series/api/polars.Series.ewm_var", "reference/series/api/polars.Series.exp", "reference/series/api/polars.Series.explode", "reference/series/api/polars.Series.extend", "reference/series/api/polars.Series.extend_constant", "reference/series/api/polars.Series.fill_nan", "reference/series/api/polars.Series.fill_null", "reference/series/api/polars.Series.filter", "reference/series/api/polars.Series.flags", "reference/series/api/polars.Series.floor", "reference/series/api/polars.Series.get_chunks", "reference/series/api/polars.Series.has_validity", "reference/series/api/polars.Series.hash", "reference/series/api/polars.Series.head", "reference/series/api/polars.Series.hist", "reference/series/api/polars.Series.implode", "reference/series/api/polars.Series.inner_dtype", "reference/series/api/polars.Series.interpolate", "reference/series/api/polars.Series.is_between", "reference/series/api/polars.Series.is_boolean", "reference/series/api/polars.Series.is_duplicated", "reference/series/api/polars.Series.is_empty", "reference/series/api/polars.Series.is_finite", "reference/series/api/polars.Series.is_first", "reference/series/api/polars.Series.is_first_distinct", "reference/series/api/polars.Series.is_float", "reference/series/api/polars.Series.is_in", "reference/series/api/polars.Series.is_infinite", "reference/series/api/polars.Series.is_integer", "reference/series/api/polars.Series.is_last", "reference/series/api/polars.Series.is_last_distinct", "reference/series/api/polars.Series.is_nan", "reference/series/api/polars.Series.is_not_nan", "reference/series/api/polars.Series.is_not_null", "reference/series/api/polars.Series.is_null", "reference/series/api/polars.Series.is_numeric", "reference/series/api/polars.Series.is_sorted", "reference/series/api/polars.Series.is_temporal", "reference/series/api/polars.Series.is_unique", "reference/series/api/polars.Series.is_utf8", "reference/series/api/polars.Series.item", "reference/series/api/polars.Series.kurtosis", "reference/series/api/polars.Series.len", "reference/series/api/polars.Series.limit", "reference/series/api/polars.Series.list", "reference/series/api/polars.Series.list.all", "reference/series/api/polars.Series.list.any", "reference/series/api/polars.Series.list.arg_max", "reference/series/api/polars.Series.list.arg_min", "reference/series/api/polars.Series.list.concat", "reference/series/api/polars.Series.list.contains", "reference/series/api/polars.Series.list.count_match", "reference/series/api/polars.Series.list.count_matches", "reference/series/api/polars.Series.list.diff", "reference/series/api/polars.Series.list.difference", "reference/series/api/polars.Series.list.drop_nulls", "reference/series/api/polars.Series.list.eval", "reference/series/api/polars.Series.list.explode", "reference/series/api/polars.Series.list.first", "reference/series/api/polars.Series.list.get", "reference/series/api/polars.Series.list.head", "reference/series/api/polars.Series.list.intersection", "reference/series/api/polars.Series.list.join", "reference/series/api/polars.Series.list.last", "reference/series/api/polars.Series.list.len", "reference/series/api/polars.Series.list.lengths", "reference/series/api/polars.Series.list.max", "reference/series/api/polars.Series.list.mean", "reference/series/api/polars.Series.list.min", "reference/series/api/polars.Series.list.reverse", "reference/series/api/polars.Series.list.sample", "reference/series/api/polars.Series.list.set_difference", "reference/series/api/polars.Series.list.set_intersection", "reference/series/api/polars.Series.list.set_symmetric_difference", "reference/series/api/polars.Series.list.set_union", "reference/series/api/polars.Series.list.shift", "reference/series/api/polars.Series.list.slice", "reference/series/api/polars.Series.list.sort", "reference/series/api/polars.Series.list.sum", "reference/series/api/polars.Series.list.symmetric_difference", "reference/series/api/polars.Series.list.tail", "reference/series/api/polars.Series.list.take", "reference/series/api/polars.Series.list.to_struct", "reference/series/api/polars.Series.list.union", "reference/series/api/polars.Series.list.unique", "reference/series/api/polars.Series.log", "reference/series/api/polars.Series.log10", "reference/series/api/polars.Series.log1p", "reference/series/api/polars.Series.lower_bound", "reference/series/api/polars.Series.map_dict", "reference/series/api/polars.Series.map_elements", "reference/series/api/polars.Series.max", "reference/series/api/polars.Series.mean", "reference/series/api/polars.Series.median", "reference/series/api/polars.Series.min", "reference/series/api/polars.Series.mode", "reference/series/api/polars.Series.n_chunks", "reference/series/api/polars.Series.n_unique", "reference/series/api/polars.Series.name", "reference/series/api/polars.Series.nan_max", "reference/series/api/polars.Series.nan_min", "reference/series/api/polars.Series.new_from_index", "reference/series/api/polars.Series.not_", "reference/series/api/polars.Series.null_count", "reference/series/api/polars.Series.pct_change", "reference/series/api/polars.Series.peak_max", "reference/series/api/polars.Series.peak_min", "reference/series/api/polars.Series.product", "reference/series/api/polars.Series.qcut", "reference/series/api/polars.Series.quantile", "reference/series/api/polars.Series.rank", "reference/series/api/polars.Series.rechunk", "reference/series/api/polars.Series.reinterpret", "reference/series/api/polars.Series.rename", "reference/series/api/polars.Series.reshape", "reference/series/api/polars.Series.reverse", "reference/series/api/polars.Series.rle", "reference/series/api/polars.Series.rle_id", "reference/series/api/polars.Series.rolling_apply", "reference/series/api/polars.Series.rolling_map", "reference/series/api/polars.Series.rolling_max", "reference/series/api/polars.Series.rolling_mean", "reference/series/api/polars.Series.rolling_median", "reference/series/api/polars.Series.rolling_min", "reference/series/api/polars.Series.rolling_quantile", "reference/series/api/polars.Series.rolling_skew", "reference/series/api/polars.Series.rolling_std", "reference/series/api/polars.Series.rolling_sum", "reference/series/api/polars.Series.rolling_var", "reference/series/api/polars.Series.round", "reference/series/api/polars.Series.sample", "reference/series/api/polars.Series.search_sorted", "reference/series/api/polars.Series.series_equal", "reference/series/api/polars.Series.set", "reference/series/api/polars.Series.set_at_idx", "reference/series/api/polars.Series.set_sorted", "reference/series/api/polars.Series.shape", "reference/series/api/polars.Series.shift", "reference/series/api/polars.Series.shift_and_fill", "reference/series/api/polars.Series.shrink_dtype", "reference/series/api/polars.Series.shrink_to_fit", "reference/series/api/polars.Series.shuffle", "reference/series/api/polars.Series.sign", "reference/series/api/polars.Series.sin", "reference/series/api/polars.Series.sinh", "reference/series/api/polars.Series.skew", "reference/series/api/polars.Series.slice", "reference/series/api/polars.Series.sort", "reference/series/api/polars.Series.sqrt", "reference/series/api/polars.Series.std", "reference/series/api/polars.Series.str", "reference/series/api/polars.Series.str.concat", "reference/series/api/polars.Series.str.contains", "reference/series/api/polars.Series.str.count_match", "reference/series/api/polars.Series.str.count_matches", "reference/series/api/polars.Series.str.decode", "reference/series/api/polars.Series.str.encode", "reference/series/api/polars.Series.str.ends_with", "reference/series/api/polars.Series.str.explode", "reference/series/api/polars.Series.str.extract", "reference/series/api/polars.Series.str.extract_all", "reference/series/api/polars.Series.str.extract_groups", "reference/series/api/polars.Series.str.json_extract", "reference/series/api/polars.Series.str.json_path_match", "reference/series/api/polars.Series.str.len_bytes", "reference/series/api/polars.Series.str.len_chars", "reference/series/api/polars.Series.str.lengths", "reference/series/api/polars.Series.str.ljust", "reference/series/api/polars.Series.str.lstrip", "reference/series/api/polars.Series.str.n_chars", "reference/series/api/polars.Series.str.pad_end", "reference/series/api/polars.Series.str.pad_start", "reference/series/api/polars.Series.str.parse_int", "reference/series/api/polars.Series.str.replace", "reference/series/api/polars.Series.str.replace_all", "reference/series/api/polars.Series.str.rjust", "reference/series/api/polars.Series.str.rstrip", "reference/series/api/polars.Series.str.slice", "reference/series/api/polars.Series.str.split", "reference/series/api/polars.Series.str.split_exact", "reference/series/api/polars.Series.str.splitn", "reference/series/api/polars.Series.str.starts_with", "reference/series/api/polars.Series.str.strip", "reference/series/api/polars.Series.str.strip_chars", "reference/series/api/polars.Series.str.strip_chars_end", "reference/series/api/polars.Series.str.strip_chars_start", "reference/series/api/polars.Series.str.strip_prefix", "reference/series/api/polars.Series.str.strip_suffix", "reference/series/api/polars.Series.str.strptime", "reference/series/api/polars.Series.str.to_date", "reference/series/api/polars.Series.str.to_datetime", "reference/series/api/polars.Series.str.to_decimal", "reference/series/api/polars.Series.str.to_lowercase", "reference/series/api/polars.Series.str.to_time", "reference/series/api/polars.Series.str.to_titlecase", "reference/series/api/polars.Series.str.to_uppercase", "reference/series/api/polars.Series.str.zfill", "reference/series/api/polars.Series.struct.field", "reference/series/api/polars.Series.struct.fields", "reference/series/api/polars.Series.struct.rename_fields", "reference/series/api/polars.Series.struct.schema", "reference/series/api/polars.Series.struct.unnest", "reference/series/api/polars.Series.sum", "reference/series/api/polars.Series.tail", "reference/series/api/polars.Series.take", "reference/series/api/polars.Series.take_every", "reference/series/api/polars.Series.tan", "reference/series/api/polars.Series.tanh", "reference/series/api/polars.Series.to_arrow", "reference/series/api/polars.Series.to_dummies", "reference/series/api/polars.Series.to_frame", "reference/series/api/polars.Series.to_init_repr", "reference/series/api/polars.Series.to_list", "reference/series/api/polars.Series.to_numpy", "reference/series/api/polars.Series.to_pandas", "reference/series/api/polars.Series.to_physical", "reference/series/api/polars.Series.top_k", "reference/series/api/polars.Series.unique", "reference/series/api/polars.Series.unique_counts", "reference/series/api/polars.Series.upper_bound", "reference/series/api/polars.Series.value_counts", "reference/series/api/polars.Series.var", "reference/series/api/polars.Series.view", "reference/series/api/polars.Series.zip_with", "reference/series/array", "reference/series/attributes", "reference/series/binary", "reference/series/boolean", "reference/series/categories", "reference/series/computation", "reference/series/descriptive", "reference/series/export", "reference/series/index", "reference/series/list", "reference/series/miscellaneous", "reference/series/modify_select", "reference/series/string", "reference/series/struct", "reference/series/temporal", "reference/sql", "reference/testing", "reference/utils"], "filenames": ["index.rst", "reference/api.rst", "reference/api/polars.Array.rst", "reference/api/polars.Binary.rst", "reference/api/polars.Boolean.rst", "reference/api/polars.Categorical.rst", "reference/api/polars.Config.activate_decimals.rst", "reference/api/polars.Config.load.rst", "reference/api/polars.Config.load_from_file.rst", "reference/api/polars.Config.restore_defaults.rst", "reference/api/polars.Config.save.rst", "reference/api/polars.Config.save_to_file.rst", "reference/api/polars.Config.set_ascii_tables.rst", "reference/api/polars.Config.set_fmt_float.rst", "reference/api/polars.Config.set_fmt_str_lengths.rst", "reference/api/polars.Config.set_fmt_table_cell_list_len.rst", "reference/api/polars.Config.set_streaming_chunk_size.rst", "reference/api/polars.Config.set_tbl_cell_alignment.rst", "reference/api/polars.Config.set_tbl_cols.rst", "reference/api/polars.Config.set_tbl_column_data_type_inline.rst", "reference/api/polars.Config.set_tbl_dataframe_shape_below.rst", "reference/api/polars.Config.set_tbl_formatting.rst", "reference/api/polars.Config.set_tbl_hide_column_data_types.rst", "reference/api/polars.Config.set_tbl_hide_column_names.rst", "reference/api/polars.Config.set_tbl_hide_dataframe_shape.rst", "reference/api/polars.Config.set_tbl_hide_dtype_separator.rst", "reference/api/polars.Config.set_tbl_rows.rst", "reference/api/polars.Config.set_tbl_width_chars.rst", "reference/api/polars.Config.set_verbose.rst", "reference/api/polars.Config.state.rst", "reference/api/polars.DataFrame.write_avro.rst", "reference/api/polars.DataFrame.write_csv.rst", "reference/api/polars.DataFrame.write_database.rst", "reference/api/polars.DataFrame.write_delta.rst", "reference/api/polars.DataFrame.write_excel.rst", "reference/api/polars.DataFrame.write_ipc.rst", "reference/api/polars.DataFrame.write_ipc_stream.rst", "reference/api/polars.DataFrame.write_json.rst", "reference/api/polars.DataFrame.write_ndjson.rst", "reference/api/polars.DataFrame.write_parquet.rst", "reference/api/polars.DataType.rst", "reference/api/polars.Date.rst", "reference/api/polars.Datetime.rst", "reference/api/polars.Decimal.rst", "reference/api/polars.Duration.rst", "reference/api/polars.Float32.rst", "reference/api/polars.Float64.rst", "reference/api/polars.Int16.rst", "reference/api/polars.Int32.rst", "reference/api/polars.Int64.rst", "reference/api/polars.Int8.rst", "reference/api/polars.LazyFrame.sink_csv.rst", "reference/api/polars.LazyFrame.sink_ipc.rst", "reference/api/polars.LazyFrame.sink_parquet.rst", "reference/api/polars.List.rst", "reference/api/polars.Null.rst", "reference/api/polars.Object.rst", "reference/api/polars.SQLContext.execute.rst", "reference/api/polars.SQLContext.register.rst", "reference/api/polars.SQLContext.register_globals.rst", "reference/api/polars.SQLContext.register_many.rst", "reference/api/polars.SQLContext.tables.rst", "reference/api/polars.SQLContext.unregister.rst", "reference/api/polars.StringCache.rst", "reference/api/polars.Struct.rst", "reference/api/polars.Time.rst", "reference/api/polars.UInt16.rst", "reference/api/polars.UInt32.rst", "reference/api/polars.UInt64.rst", "reference/api/polars.UInt8.rst", "reference/api/polars.Unknown.rst", "reference/api/polars.Utf8.rst", "reference/api/polars.align_frames.rst", "reference/api/polars.api.register_dataframe_namespace.rst", "reference/api/polars.api.register_expr_namespace.rst", "reference/api/polars.api.register_lazyframe_namespace.rst", "reference/api/polars.api.register_series_namespace.rst", "reference/api/polars.build_info.rst", "reference/api/polars.collect_all.rst", "reference/api/polars.collect_all_async.rst", "reference/api/polars.concat.rst", "reference/api/polars.disable_string_cache.rst", "reference/api/polars.enable_string_cache.rst", "reference/api/polars.exceptions.ArrowError.rst", "reference/api/polars.exceptions.ColumnNotFoundError.rst", "reference/api/polars.exceptions.ComputeError.rst", "reference/api/polars.exceptions.DuplicateError.rst", "reference/api/polars.exceptions.InvalidOperationError.rst", "reference/api/polars.exceptions.NoDataError.rst", "reference/api/polars.exceptions.NoRowsReturnedError.rst", "reference/api/polars.exceptions.PolarsPanicError.rst", "reference/api/polars.exceptions.RowsError.rst", "reference/api/polars.exceptions.SchemaError.rst", "reference/api/polars.exceptions.SchemaFieldNotFoundError.rst", "reference/api/polars.exceptions.ShapeError.rst", "reference/api/polars.exceptions.StructFieldNotFoundError.rst", "reference/api/polars.exceptions.TooManyRowsReturnedError.rst", "reference/api/polars.from_arrow.rst", "reference/api/polars.from_dataframe.rst", "reference/api/polars.from_dict.rst", "reference/api/polars.from_dicts.rst", "reference/api/polars.from_numpy.rst", "reference/api/polars.from_pandas.rst", "reference/api/polars.from_records.rst", "reference/api/polars.from_repr.rst", "reference/api/polars.get_index_type.rst", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches.rst", "reference/api/polars.read_avro.rst", "reference/api/polars.read_csv.rst", "reference/api/polars.read_csv_batched.rst", "reference/api/polars.read_database.rst", "reference/api/polars.read_database_uri.rst", "reference/api/polars.read_delta.rst", "reference/api/polars.read_excel.rst", "reference/api/polars.read_ipc.rst", "reference/api/polars.read_ipc_schema.rst", "reference/api/polars.read_ipc_stream.rst", "reference/api/polars.read_json.rst", "reference/api/polars.read_ndjson.rst", "reference/api/polars.read_ods.rst", "reference/api/polars.read_parquet.rst", "reference/api/polars.read_parquet_schema.rst", "reference/api/polars.scan_csv.rst", "reference/api/polars.scan_delta.rst", "reference/api/polars.scan_iceberg.rst", "reference/api/polars.scan_ipc.rst", "reference/api/polars.scan_ndjson.rst", "reference/api/polars.scan_parquet.rst", "reference/api/polars.scan_pyarrow_dataset.rst", "reference/api/polars.set_random_seed.rst", "reference/api/polars.show_versions.rst", "reference/api/polars.testing.assert_frame_equal.rst", "reference/api/polars.testing.assert_frame_not_equal.rst", "reference/api/polars.testing.assert_series_equal.rst", "reference/api/polars.testing.assert_series_not_equal.rst", "reference/api/polars.testing.parametric.column.rst", "reference/api/polars.testing.parametric.columns.rst", "reference/api/polars.testing.parametric.create_list_strategy.rst", "reference/api/polars.testing.parametric.dataframes.rst", "reference/api/polars.testing.parametric.load_profile.rst", "reference/api/polars.testing.parametric.series.rst", "reference/api/polars.testing.parametric.set_profile.rst", "reference/api/polars.threadpool_size.rst", "reference/api/polars.using_string_cache.rst", "reference/config.rst", "reference/dataframe/aggregation.rst", "reference/dataframe/api/polars.DataFrame.__dataframe__.rst", "reference/dataframe/api/polars.DataFrame.apply.rst", "reference/dataframe/api/polars.DataFrame.approx_n_unique.rst", "reference/dataframe/api/polars.DataFrame.approx_unique.rst", "reference/dataframe/api/polars.DataFrame.bottom_k.rst", "reference/dataframe/api/polars.DataFrame.cast.rst", "reference/dataframe/api/polars.DataFrame.clear.rst", "reference/dataframe/api/polars.DataFrame.clone.rst", "reference/dataframe/api/polars.DataFrame.columns.rst", "reference/dataframe/api/polars.DataFrame.corr.rst", "reference/dataframe/api/polars.DataFrame.describe.rst", "reference/dataframe/api/polars.DataFrame.drop.rst", "reference/dataframe/api/polars.DataFrame.drop_in_place.rst", "reference/dataframe/api/polars.DataFrame.drop_nulls.rst", "reference/dataframe/api/polars.DataFrame.dtypes.rst", "reference/dataframe/api/polars.DataFrame.estimated_size.rst", "reference/dataframe/api/polars.DataFrame.explode.rst", "reference/dataframe/api/polars.DataFrame.extend.rst", "reference/dataframe/api/polars.DataFrame.fill_nan.rst", "reference/dataframe/api/polars.DataFrame.fill_null.rst", "reference/dataframe/api/polars.DataFrame.filter.rst", "reference/dataframe/api/polars.DataFrame.find_idx_by_name.rst", "reference/dataframe/api/polars.DataFrame.flags.rst", "reference/dataframe/api/polars.DataFrame.fold.rst", "reference/dataframe/api/polars.DataFrame.frame_equal.rst", "reference/dataframe/api/polars.DataFrame.get_column.rst", "reference/dataframe/api/polars.DataFrame.get_columns.rst", "reference/dataframe/api/polars.DataFrame.glimpse.rst", "reference/dataframe/api/polars.DataFrame.group_by.rst", "reference/dataframe/api/polars.DataFrame.group_by_dynamic.rst", "reference/dataframe/api/polars.DataFrame.group_by_rolling.rst", "reference/dataframe/api/polars.DataFrame.groupby.rst", "reference/dataframe/api/polars.DataFrame.groupby_dynamic.rst", "reference/dataframe/api/polars.DataFrame.groupby_rolling.rst", "reference/dataframe/api/polars.DataFrame.hash_rows.rst", "reference/dataframe/api/polars.DataFrame.head.rst", "reference/dataframe/api/polars.DataFrame.height.rst", "reference/dataframe/api/polars.DataFrame.hstack.rst", "reference/dataframe/api/polars.DataFrame.insert_at_idx.rst", "reference/dataframe/api/polars.DataFrame.interpolate.rst", "reference/dataframe/api/polars.DataFrame.is_duplicated.rst", "reference/dataframe/api/polars.DataFrame.is_empty.rst", "reference/dataframe/api/polars.DataFrame.is_unique.rst", "reference/dataframe/api/polars.DataFrame.item.rst", "reference/dataframe/api/polars.DataFrame.iter_rows.rst", "reference/dataframe/api/polars.DataFrame.iter_slices.rst", "reference/dataframe/api/polars.DataFrame.join.rst", "reference/dataframe/api/polars.DataFrame.join_asof.rst", "reference/dataframe/api/polars.DataFrame.lazy.rst", "reference/dataframe/api/polars.DataFrame.limit.rst", "reference/dataframe/api/polars.DataFrame.map_rows.rst", "reference/dataframe/api/polars.DataFrame.max.rst", "reference/dataframe/api/polars.DataFrame.mean.rst", "reference/dataframe/api/polars.DataFrame.median.rst", "reference/dataframe/api/polars.DataFrame.melt.rst", "reference/dataframe/api/polars.DataFrame.merge_sorted.rst", "reference/dataframe/api/polars.DataFrame.min.rst", "reference/dataframe/api/polars.DataFrame.n_chunks.rst", "reference/dataframe/api/polars.DataFrame.n_unique.rst", "reference/dataframe/api/polars.DataFrame.null_count.rst", "reference/dataframe/api/polars.DataFrame.partition_by.rst", "reference/dataframe/api/polars.DataFrame.pipe.rst", "reference/dataframe/api/polars.DataFrame.pivot.rst", "reference/dataframe/api/polars.DataFrame.product.rst", "reference/dataframe/api/polars.DataFrame.quantile.rst", "reference/dataframe/api/polars.DataFrame.rechunk.rst", "reference/dataframe/api/polars.DataFrame.rename.rst", "reference/dataframe/api/polars.DataFrame.replace.rst", "reference/dataframe/api/polars.DataFrame.replace_at_idx.rst", "reference/dataframe/api/polars.DataFrame.reverse.rst", "reference/dataframe/api/polars.DataFrame.rolling.rst", "reference/dataframe/api/polars.DataFrame.row.rst", "reference/dataframe/api/polars.DataFrame.rows.rst", "reference/dataframe/api/polars.DataFrame.rows_by_key.rst", "reference/dataframe/api/polars.DataFrame.sample.rst", "reference/dataframe/api/polars.DataFrame.schema.rst", "reference/dataframe/api/polars.DataFrame.select.rst", "reference/dataframe/api/polars.DataFrame.select_seq.rst", "reference/dataframe/api/polars.DataFrame.set_sorted.rst", "reference/dataframe/api/polars.DataFrame.shape.rst", "reference/dataframe/api/polars.DataFrame.shift.rst", "reference/dataframe/api/polars.DataFrame.shift_and_fill.rst", "reference/dataframe/api/polars.DataFrame.shrink_to_fit.rst", "reference/dataframe/api/polars.DataFrame.slice.rst", "reference/dataframe/api/polars.DataFrame.sort.rst", "reference/dataframe/api/polars.DataFrame.std.rst", "reference/dataframe/api/polars.DataFrame.sum.rst", "reference/dataframe/api/polars.DataFrame.tail.rst", "reference/dataframe/api/polars.DataFrame.take_every.rst", "reference/dataframe/api/polars.DataFrame.to_arrow.rst", "reference/dataframe/api/polars.DataFrame.to_dict.rst", "reference/dataframe/api/polars.DataFrame.to_dicts.rst", "reference/dataframe/api/polars.DataFrame.to_dummies.rst", "reference/dataframe/api/polars.DataFrame.to_init_repr.rst", "reference/dataframe/api/polars.DataFrame.to_numpy.rst", "reference/dataframe/api/polars.DataFrame.to_pandas.rst", "reference/dataframe/api/polars.DataFrame.to_series.rst", "reference/dataframe/api/polars.DataFrame.to_struct.rst", "reference/dataframe/api/polars.DataFrame.top_k.rst", "reference/dataframe/api/polars.DataFrame.transpose.rst", "reference/dataframe/api/polars.DataFrame.unique.rst", "reference/dataframe/api/polars.DataFrame.unnest.rst", "reference/dataframe/api/polars.DataFrame.unstack.rst", "reference/dataframe/api/polars.DataFrame.update.rst", "reference/dataframe/api/polars.DataFrame.upsample.rst", "reference/dataframe/api/polars.DataFrame.var.rst", "reference/dataframe/api/polars.DataFrame.vstack.rst", "reference/dataframe/api/polars.DataFrame.width.rst", "reference/dataframe/api/polars.DataFrame.with_columns.rst", "reference/dataframe/api/polars.DataFrame.with_columns_seq.rst", "reference/dataframe/api/polars.DataFrame.with_row_count.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.__iter__.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.agg.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.all.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.apply.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.count.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.first.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.head.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.last.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.map_groups.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.max.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.mean.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.median.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.min.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.n_unique.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.quantile.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.sum.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.tail.rst", "reference/dataframe/attributes.rst", "reference/dataframe/computation.rst", "reference/dataframe/descriptive.rst", "reference/dataframe/export.rst", "reference/dataframe/group_by.rst", "reference/dataframe/index.rst", "reference/dataframe/miscellaneous.rst", "reference/dataframe/modify_select.rst", "reference/datatypes.rst", "reference/exceptions.rst", "reference/expressions/aggregation.rst", "reference/expressions/api/polars.Expr.abs.rst", "reference/expressions/api/polars.Expr.add.rst", "reference/expressions/api/polars.Expr.agg_groups.rst", "reference/expressions/api/polars.Expr.alias.rst", "reference/expressions/api/polars.Expr.all.rst", "reference/expressions/api/polars.Expr.and_.rst", "reference/expressions/api/polars.Expr.any.rst", "reference/expressions/api/polars.Expr.append.rst", "reference/expressions/api/polars.Expr.apply.rst", "reference/expressions/api/polars.Expr.approx_n_unique.rst", "reference/expressions/api/polars.Expr.arccos.rst", "reference/expressions/api/polars.Expr.arccosh.rst", "reference/expressions/api/polars.Expr.arcsin.rst", "reference/expressions/api/polars.Expr.arcsinh.rst", "reference/expressions/api/polars.Expr.arctan.rst", "reference/expressions/api/polars.Expr.arctanh.rst", "reference/expressions/api/polars.Expr.arg_max.rst", "reference/expressions/api/polars.Expr.arg_min.rst", "reference/expressions/api/polars.Expr.arg_sort.rst", "reference/expressions/api/polars.Expr.arg_true.rst", "reference/expressions/api/polars.Expr.arg_unique.rst", "reference/expressions/api/polars.Expr.arr.max.rst", "reference/expressions/api/polars.Expr.arr.min.rst", "reference/expressions/api/polars.Expr.arr.sum.rst", "reference/expressions/api/polars.Expr.arr.unique.rst", "reference/expressions/api/polars.Expr.backward_fill.rst", "reference/expressions/api/polars.Expr.bin.contains.rst", "reference/expressions/api/polars.Expr.bin.decode.rst", "reference/expressions/api/polars.Expr.bin.encode.rst", "reference/expressions/api/polars.Expr.bin.ends_with.rst", "reference/expressions/api/polars.Expr.bin.starts_with.rst", "reference/expressions/api/polars.Expr.bottom_k.rst", "reference/expressions/api/polars.Expr.cache.rst", "reference/expressions/api/polars.Expr.cast.rst", "reference/expressions/api/polars.Expr.cat.get_categories.rst", "reference/expressions/api/polars.Expr.cat.set_ordering.rst", "reference/expressions/api/polars.Expr.cbrt.rst", "reference/expressions/api/polars.Expr.ceil.rst", "reference/expressions/api/polars.Expr.clip.rst", "reference/expressions/api/polars.Expr.clip_max.rst", "reference/expressions/api/polars.Expr.clip_min.rst", "reference/expressions/api/polars.Expr.cos.rst", "reference/expressions/api/polars.Expr.cosh.rst", "reference/expressions/api/polars.Expr.cot.rst", "reference/expressions/api/polars.Expr.count.rst", "reference/expressions/api/polars.Expr.cumcount.rst", "reference/expressions/api/polars.Expr.cummax.rst", "reference/expressions/api/polars.Expr.cummin.rst", "reference/expressions/api/polars.Expr.cumprod.rst", "reference/expressions/api/polars.Expr.cumsum.rst", "reference/expressions/api/polars.Expr.cumulative_eval.rst", "reference/expressions/api/polars.Expr.cut.rst", "reference/expressions/api/polars.Expr.degrees.rst", "reference/expressions/api/polars.Expr.diff.rst", "reference/expressions/api/polars.Expr.dot.rst", "reference/expressions/api/polars.Expr.drop_nans.rst", "reference/expressions/api/polars.Expr.drop_nulls.rst", "reference/expressions/api/polars.Expr.dt.base_utc_offset.rst", "reference/expressions/api/polars.Expr.dt.cast_time_unit.rst", "reference/expressions/api/polars.Expr.dt.combine.rst", "reference/expressions/api/polars.Expr.dt.convert_time_zone.rst", "reference/expressions/api/polars.Expr.dt.date.rst", "reference/expressions/api/polars.Expr.dt.datetime.rst", "reference/expressions/api/polars.Expr.dt.day.rst", "reference/expressions/api/polars.Expr.dt.days.rst", "reference/expressions/api/polars.Expr.dt.dst_offset.rst", "reference/expressions/api/polars.Expr.dt.epoch.rst", "reference/expressions/api/polars.Expr.dt.hour.rst", "reference/expressions/api/polars.Expr.dt.hours.rst", "reference/expressions/api/polars.Expr.dt.is_leap_year.rst", "reference/expressions/api/polars.Expr.dt.iso_year.rst", "reference/expressions/api/polars.Expr.dt.microsecond.rst", "reference/expressions/api/polars.Expr.dt.microseconds.rst", "reference/expressions/api/polars.Expr.dt.millisecond.rst", "reference/expressions/api/polars.Expr.dt.milliseconds.rst", "reference/expressions/api/polars.Expr.dt.minute.rst", "reference/expressions/api/polars.Expr.dt.minutes.rst", "reference/expressions/api/polars.Expr.dt.month.rst", "reference/expressions/api/polars.Expr.dt.month_end.rst", "reference/expressions/api/polars.Expr.dt.month_start.rst", "reference/expressions/api/polars.Expr.dt.nanosecond.rst", "reference/expressions/api/polars.Expr.dt.nanoseconds.rst", "reference/expressions/api/polars.Expr.dt.offset_by.rst", "reference/expressions/api/polars.Expr.dt.ordinal_day.rst", "reference/expressions/api/polars.Expr.dt.quarter.rst", "reference/expressions/api/polars.Expr.dt.replace_time_zone.rst", "reference/expressions/api/polars.Expr.dt.round.rst", "reference/expressions/api/polars.Expr.dt.second.rst", "reference/expressions/api/polars.Expr.dt.seconds.rst", "reference/expressions/api/polars.Expr.dt.strftime.rst", "reference/expressions/api/polars.Expr.dt.time.rst", "reference/expressions/api/polars.Expr.dt.timestamp.rst", "reference/expressions/api/polars.Expr.dt.to_string.rst", "reference/expressions/api/polars.Expr.dt.truncate.rst", "reference/expressions/api/polars.Expr.dt.week.rst", "reference/expressions/api/polars.Expr.dt.weekday.rst", "reference/expressions/api/polars.Expr.dt.with_time_unit.rst", "reference/expressions/api/polars.Expr.dt.year.rst", "reference/expressions/api/polars.Expr.entropy.rst", "reference/expressions/api/polars.Expr.eq.rst", "reference/expressions/api/polars.Expr.eq_missing.rst", "reference/expressions/api/polars.Expr.ewm_mean.rst", "reference/expressions/api/polars.Expr.ewm_std.rst", "reference/expressions/api/polars.Expr.ewm_var.rst", "reference/expressions/api/polars.Expr.exclude.rst", "reference/expressions/api/polars.Expr.exp.rst", "reference/expressions/api/polars.Expr.explode.rst", "reference/expressions/api/polars.Expr.extend_constant.rst", "reference/expressions/api/polars.Expr.fill_nan.rst", "reference/expressions/api/polars.Expr.fill_null.rst", "reference/expressions/api/polars.Expr.filter.rst", "reference/expressions/api/polars.Expr.first.rst", "reference/expressions/api/polars.Expr.flatten.rst", "reference/expressions/api/polars.Expr.floor.rst", "reference/expressions/api/polars.Expr.floordiv.rst", "reference/expressions/api/polars.Expr.forward_fill.rst", "reference/expressions/api/polars.Expr.from_json.rst", "reference/expressions/api/polars.Expr.ge.rst", "reference/expressions/api/polars.Expr.get.rst", "reference/expressions/api/polars.Expr.gt.rst", "reference/expressions/api/polars.Expr.hash.rst", "reference/expressions/api/polars.Expr.head.rst", "reference/expressions/api/polars.Expr.implode.rst", "reference/expressions/api/polars.Expr.inspect.rst", "reference/expressions/api/polars.Expr.interpolate.rst", "reference/expressions/api/polars.Expr.is_between.rst", "reference/expressions/api/polars.Expr.is_duplicated.rst", "reference/expressions/api/polars.Expr.is_finite.rst", "reference/expressions/api/polars.Expr.is_first.rst", "reference/expressions/api/polars.Expr.is_first_distinct.rst", "reference/expressions/api/polars.Expr.is_in.rst", "reference/expressions/api/polars.Expr.is_infinite.rst", "reference/expressions/api/polars.Expr.is_last.rst", "reference/expressions/api/polars.Expr.is_last_distinct.rst", "reference/expressions/api/polars.Expr.is_nan.rst", "reference/expressions/api/polars.Expr.is_not.rst", "reference/expressions/api/polars.Expr.is_not_nan.rst", "reference/expressions/api/polars.Expr.is_not_null.rst", "reference/expressions/api/polars.Expr.is_null.rst", "reference/expressions/api/polars.Expr.is_unique.rst", "reference/expressions/api/polars.Expr.keep_name.rst", "reference/expressions/api/polars.Expr.kurtosis.rst", "reference/expressions/api/polars.Expr.last.rst", "reference/expressions/api/polars.Expr.le.rst", "reference/expressions/api/polars.Expr.len.rst", "reference/expressions/api/polars.Expr.limit.rst", "reference/expressions/api/polars.Expr.list.all.rst", "reference/expressions/api/polars.Expr.list.any.rst", "reference/expressions/api/polars.Expr.list.arg_max.rst", "reference/expressions/api/polars.Expr.list.arg_min.rst", "reference/expressions/api/polars.Expr.list.concat.rst", "reference/expressions/api/polars.Expr.list.contains.rst", "reference/expressions/api/polars.Expr.list.count_match.rst", "reference/expressions/api/polars.Expr.list.count_matches.rst", "reference/expressions/api/polars.Expr.list.diff.rst", "reference/expressions/api/polars.Expr.list.difference.rst", "reference/expressions/api/polars.Expr.list.drop_nulls.rst", "reference/expressions/api/polars.Expr.list.eval.rst", "reference/expressions/api/polars.Expr.list.explode.rst", "reference/expressions/api/polars.Expr.list.first.rst", "reference/expressions/api/polars.Expr.list.get.rst", "reference/expressions/api/polars.Expr.list.head.rst", "reference/expressions/api/polars.Expr.list.intersection.rst", "reference/expressions/api/polars.Expr.list.join.rst", "reference/expressions/api/polars.Expr.list.last.rst", "reference/expressions/api/polars.Expr.list.len.rst", "reference/expressions/api/polars.Expr.list.lengths.rst", "reference/expressions/api/polars.Expr.list.max.rst", "reference/expressions/api/polars.Expr.list.mean.rst", "reference/expressions/api/polars.Expr.list.min.rst", "reference/expressions/api/polars.Expr.list.reverse.rst", "reference/expressions/api/polars.Expr.list.sample.rst", "reference/expressions/api/polars.Expr.list.set_difference.rst", "reference/expressions/api/polars.Expr.list.set_intersection.rst", "reference/expressions/api/polars.Expr.list.set_symmetric_difference.rst", "reference/expressions/api/polars.Expr.list.set_union.rst", "reference/expressions/api/polars.Expr.list.shift.rst", "reference/expressions/api/polars.Expr.list.slice.rst", "reference/expressions/api/polars.Expr.list.sort.rst", "reference/expressions/api/polars.Expr.list.sum.rst", "reference/expressions/api/polars.Expr.list.symmetric_difference.rst", "reference/expressions/api/polars.Expr.list.tail.rst", "reference/expressions/api/polars.Expr.list.take.rst", "reference/expressions/api/polars.Expr.list.to_struct.rst", "reference/expressions/api/polars.Expr.list.union.rst", "reference/expressions/api/polars.Expr.list.unique.rst", "reference/expressions/api/polars.Expr.log.rst", "reference/expressions/api/polars.Expr.log10.rst", "reference/expressions/api/polars.Expr.log1p.rst", "reference/expressions/api/polars.Expr.lower_bound.rst", "reference/expressions/api/polars.Expr.lt.rst", "reference/expressions/api/polars.Expr.map.rst", "reference/expressions/api/polars.Expr.map_alias.rst", "reference/expressions/api/polars.Expr.map_batches.rst", "reference/expressions/api/polars.Expr.map_dict.rst", "reference/expressions/api/polars.Expr.map_elements.rst", "reference/expressions/api/polars.Expr.max.rst", "reference/expressions/api/polars.Expr.mean.rst", "reference/expressions/api/polars.Expr.median.rst", "reference/expressions/api/polars.Expr.meta.eq.rst", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs.rst", "reference/expressions/api/polars.Expr.meta.is_regex_projection.rst", "reference/expressions/api/polars.Expr.meta.ne.rst", "reference/expressions/api/polars.Expr.meta.output_name.rst", "reference/expressions/api/polars.Expr.meta.pop.rst", "reference/expressions/api/polars.Expr.meta.root_names.rst", "reference/expressions/api/polars.Expr.meta.tree_format.rst", "reference/expressions/api/polars.Expr.meta.undo_aliases.rst", "reference/expressions/api/polars.Expr.meta.write_json.rst", "reference/expressions/api/polars.Expr.min.rst", "reference/expressions/api/polars.Expr.mod.rst", "reference/expressions/api/polars.Expr.mode.rst", "reference/expressions/api/polars.Expr.mul.rst", "reference/expressions/api/polars.Expr.n_unique.rst", "reference/expressions/api/polars.Expr.name.keep.rst", "reference/expressions/api/polars.Expr.name.map.rst", "reference/expressions/api/polars.Expr.name.prefix.rst", "reference/expressions/api/polars.Expr.name.suffix.rst", "reference/expressions/api/polars.Expr.name.to_lowercase.rst", "reference/expressions/api/polars.Expr.name.to_uppercase.rst", "reference/expressions/api/polars.Expr.nan_max.rst", "reference/expressions/api/polars.Expr.nan_min.rst", "reference/expressions/api/polars.Expr.ne.rst", "reference/expressions/api/polars.Expr.ne_missing.rst", "reference/expressions/api/polars.Expr.not_.rst", "reference/expressions/api/polars.Expr.null_count.rst", "reference/expressions/api/polars.Expr.or_.rst", "reference/expressions/api/polars.Expr.over.rst", "reference/expressions/api/polars.Expr.pct_change.rst", "reference/expressions/api/polars.Expr.peak_max.rst", "reference/expressions/api/polars.Expr.peak_min.rst", "reference/expressions/api/polars.Expr.pipe.rst", "reference/expressions/api/polars.Expr.pow.rst", "reference/expressions/api/polars.Expr.prefix.rst", "reference/expressions/api/polars.Expr.product.rst", "reference/expressions/api/polars.Expr.qcut.rst", "reference/expressions/api/polars.Expr.quantile.rst", "reference/expressions/api/polars.Expr.radians.rst", "reference/expressions/api/polars.Expr.rank.rst", "reference/expressions/api/polars.Expr.rechunk.rst", "reference/expressions/api/polars.Expr.reinterpret.rst", "reference/expressions/api/polars.Expr.repeat_by.rst", "reference/expressions/api/polars.Expr.reshape.rst", "reference/expressions/api/polars.Expr.reverse.rst", "reference/expressions/api/polars.Expr.rle.rst", "reference/expressions/api/polars.Expr.rle_id.rst", "reference/expressions/api/polars.Expr.rolling.rst", "reference/expressions/api/polars.Expr.rolling_apply.rst", "reference/expressions/api/polars.Expr.rolling_map.rst", "reference/expressions/api/polars.Expr.rolling_max.rst", "reference/expressions/api/polars.Expr.rolling_mean.rst", "reference/expressions/api/polars.Expr.rolling_median.rst", "reference/expressions/api/polars.Expr.rolling_min.rst", "reference/expressions/api/polars.Expr.rolling_quantile.rst", "reference/expressions/api/polars.Expr.rolling_skew.rst", "reference/expressions/api/polars.Expr.rolling_std.rst", "reference/expressions/api/polars.Expr.rolling_sum.rst", "reference/expressions/api/polars.Expr.rolling_var.rst", "reference/expressions/api/polars.Expr.round.rst", "reference/expressions/api/polars.Expr.sample.rst", "reference/expressions/api/polars.Expr.search_sorted.rst", "reference/expressions/api/polars.Expr.set_sorted.rst", "reference/expressions/api/polars.Expr.shift.rst", "reference/expressions/api/polars.Expr.shift_and_fill.rst", "reference/expressions/api/polars.Expr.shrink_dtype.rst", "reference/expressions/api/polars.Expr.shuffle.rst", "reference/expressions/api/polars.Expr.sign.rst", "reference/expressions/api/polars.Expr.sin.rst", "reference/expressions/api/polars.Expr.sinh.rst", "reference/expressions/api/polars.Expr.skew.rst", "reference/expressions/api/polars.Expr.slice.rst", "reference/expressions/api/polars.Expr.sort.rst", "reference/expressions/api/polars.Expr.sort_by.rst", "reference/expressions/api/polars.Expr.sqrt.rst", "reference/expressions/api/polars.Expr.std.rst", "reference/expressions/api/polars.Expr.str.concat.rst", "reference/expressions/api/polars.Expr.str.contains.rst", "reference/expressions/api/polars.Expr.str.count_match.rst", "reference/expressions/api/polars.Expr.str.count_matches.rst", "reference/expressions/api/polars.Expr.str.decode.rst", "reference/expressions/api/polars.Expr.str.encode.rst", "reference/expressions/api/polars.Expr.str.ends_with.rst", "reference/expressions/api/polars.Expr.str.explode.rst", "reference/expressions/api/polars.Expr.str.extract.rst", "reference/expressions/api/polars.Expr.str.extract_all.rst", "reference/expressions/api/polars.Expr.str.extract_groups.rst", "reference/expressions/api/polars.Expr.str.json_extract.rst", "reference/expressions/api/polars.Expr.str.json_path_match.rst", "reference/expressions/api/polars.Expr.str.len_bytes.rst", "reference/expressions/api/polars.Expr.str.len_chars.rst", "reference/expressions/api/polars.Expr.str.lengths.rst", "reference/expressions/api/polars.Expr.str.ljust.rst", "reference/expressions/api/polars.Expr.str.lstrip.rst", "reference/expressions/api/polars.Expr.str.n_chars.rst", "reference/expressions/api/polars.Expr.str.pad_end.rst", "reference/expressions/api/polars.Expr.str.pad_start.rst", "reference/expressions/api/polars.Expr.str.parse_int.rst", "reference/expressions/api/polars.Expr.str.replace.rst", "reference/expressions/api/polars.Expr.str.replace_all.rst", "reference/expressions/api/polars.Expr.str.rjust.rst", "reference/expressions/api/polars.Expr.str.rstrip.rst", "reference/expressions/api/polars.Expr.str.slice.rst", "reference/expressions/api/polars.Expr.str.split.rst", "reference/expressions/api/polars.Expr.str.split_exact.rst", "reference/expressions/api/polars.Expr.str.splitn.rst", "reference/expressions/api/polars.Expr.str.starts_with.rst", "reference/expressions/api/polars.Expr.str.strip.rst", "reference/expressions/api/polars.Expr.str.strip_chars.rst", "reference/expressions/api/polars.Expr.str.strip_chars_end.rst", "reference/expressions/api/polars.Expr.str.strip_chars_start.rst", "reference/expressions/api/polars.Expr.str.strip_prefix.rst", "reference/expressions/api/polars.Expr.str.strip_suffix.rst", "reference/expressions/api/polars.Expr.str.strptime.rst", "reference/expressions/api/polars.Expr.str.to_date.rst", "reference/expressions/api/polars.Expr.str.to_datetime.rst", "reference/expressions/api/polars.Expr.str.to_decimal.rst", "reference/expressions/api/polars.Expr.str.to_lowercase.rst", "reference/expressions/api/polars.Expr.str.to_time.rst", "reference/expressions/api/polars.Expr.str.to_titlecase.rst", "reference/expressions/api/polars.Expr.str.to_uppercase.rst", "reference/expressions/api/polars.Expr.str.zfill.rst", "reference/expressions/api/polars.Expr.struct.field.rst", "reference/expressions/api/polars.Expr.struct.rename_fields.rst", "reference/expressions/api/polars.Expr.sub.rst", "reference/expressions/api/polars.Expr.suffix.rst", "reference/expressions/api/polars.Expr.sum.rst", "reference/expressions/api/polars.Expr.tail.rst", "reference/expressions/api/polars.Expr.take.rst", "reference/expressions/api/polars.Expr.take_every.rst", "reference/expressions/api/polars.Expr.tan.rst", "reference/expressions/api/polars.Expr.tanh.rst", "reference/expressions/api/polars.Expr.to_physical.rst", "reference/expressions/api/polars.Expr.top_k.rst", "reference/expressions/api/polars.Expr.truediv.rst", "reference/expressions/api/polars.Expr.unique.rst", "reference/expressions/api/polars.Expr.unique_counts.rst", "reference/expressions/api/polars.Expr.upper_bound.rst", "reference/expressions/api/polars.Expr.value_counts.rst", "reference/expressions/api/polars.Expr.var.rst", "reference/expressions/api/polars.Expr.where.rst", "reference/expressions/api/polars.Expr.xor.rst", "reference/expressions/api/polars.all.rst", "reference/expressions/api/polars.all_horizontal.rst", "reference/expressions/api/polars.any.rst", "reference/expressions/api/polars.any_horizontal.rst", "reference/expressions/api/polars.apply.rst", "reference/expressions/api/polars.approx_n_unique.rst", "reference/expressions/api/polars.arange.rst", "reference/expressions/api/polars.arctan2.rst", "reference/expressions/api/polars.arctan2d.rst", "reference/expressions/api/polars.arg_sort_by.rst", "reference/expressions/api/polars.arg_where.rst", "reference/expressions/api/polars.avg.rst", "reference/expressions/api/polars.coalesce.rst", "reference/expressions/api/polars.concat_list.rst", "reference/expressions/api/polars.concat_str.rst", "reference/expressions/api/polars.corr.rst", "reference/expressions/api/polars.count.rst", "reference/expressions/api/polars.cov.rst", "reference/expressions/api/polars.cumfold.rst", "reference/expressions/api/polars.cumreduce.rst", "reference/expressions/api/polars.cumsum.rst", "reference/expressions/api/polars.cumsum_horizontal.rst", "reference/expressions/api/polars.date.rst", "reference/expressions/api/polars.date_range.rst", "reference/expressions/api/polars.date_ranges.rst", "reference/expressions/api/polars.datetime.rst", "reference/expressions/api/polars.datetime_range.rst", "reference/expressions/api/polars.datetime_ranges.rst", "reference/expressions/api/polars.duration.rst", "reference/expressions/api/polars.element.rst", "reference/expressions/api/polars.exclude.rst", "reference/expressions/api/polars.first.rst", "reference/expressions/api/polars.fold.rst", "reference/expressions/api/polars.format.rst", "reference/expressions/api/polars.from_epoch.rst", "reference/expressions/api/polars.groups.rst", "reference/expressions/api/polars.head.rst", "reference/expressions/api/polars.implode.rst", "reference/expressions/api/polars.int_range.rst", "reference/expressions/api/polars.int_ranges.rst", "reference/expressions/api/polars.last.rst", "reference/expressions/api/polars.lit.rst", "reference/expressions/api/polars.map.rst", "reference/expressions/api/polars.map_batches.rst", "reference/expressions/api/polars.map_groups.rst", "reference/expressions/api/polars.max.rst", "reference/expressions/api/polars.max_horizontal.rst", "reference/expressions/api/polars.mean.rst", "reference/expressions/api/polars.median.rst", "reference/expressions/api/polars.min.rst", "reference/expressions/api/polars.min_horizontal.rst", "reference/expressions/api/polars.n_unique.rst", "reference/expressions/api/polars.ones.rst", "reference/expressions/api/polars.quantile.rst", "reference/expressions/api/polars.reduce.rst", "reference/expressions/api/polars.repeat.rst", "reference/expressions/api/polars.rolling_corr.rst", "reference/expressions/api/polars.rolling_cov.rst", "reference/expressions/api/polars.select.rst", "reference/expressions/api/polars.sql_expr.rst", "reference/expressions/api/polars.std.rst", "reference/expressions/api/polars.struct.rst", "reference/expressions/api/polars.sum.rst", "reference/expressions/api/polars.sum_horizontal.rst", "reference/expressions/api/polars.tail.rst", "reference/expressions/api/polars.time.rst", "reference/expressions/api/polars.time_range.rst", "reference/expressions/api/polars.time_ranges.rst", "reference/expressions/api/polars.var.rst", "reference/expressions/api/polars.when.rst", "reference/expressions/api/polars.zeros.rst", "reference/expressions/array.rst", "reference/expressions/binary.rst", "reference/expressions/boolean.rst", "reference/expressions/categories.rst", "reference/expressions/col.rst", "reference/expressions/columns.rst", "reference/expressions/computation.rst", "reference/expressions/functions.rst", "reference/expressions/index.rst", "reference/expressions/list.rst", "reference/expressions/meta.rst", "reference/expressions/miscellaneous.rst", "reference/expressions/modify_select.rst", "reference/expressions/name.rst", "reference/expressions/operators.rst", "reference/expressions/string.rst", "reference/expressions/struct.rst", "reference/expressions/temporal.rst", "reference/expressions/window.rst", "reference/functions.rst", "reference/index.rst", "reference/io.rst", "reference/lazyframe/aggregation.rst", "reference/lazyframe/api/polars.LazyFrame.approx_n_unique.rst", "reference/lazyframe/api/polars.LazyFrame.approx_unique.rst", "reference/lazyframe/api/polars.LazyFrame.bottom_k.rst", "reference/lazyframe/api/polars.LazyFrame.cache.rst", "reference/lazyframe/api/polars.LazyFrame.cast.rst", "reference/lazyframe/api/polars.LazyFrame.clear.rst", "reference/lazyframe/api/polars.LazyFrame.clone.rst", "reference/lazyframe/api/polars.LazyFrame.collect.rst", "reference/lazyframe/api/polars.LazyFrame.collect_async.rst", "reference/lazyframe/api/polars.LazyFrame.columns.rst", "reference/lazyframe/api/polars.LazyFrame.deserialize.rst", "reference/lazyframe/api/polars.LazyFrame.drop.rst", "reference/lazyframe/api/polars.LazyFrame.drop_nulls.rst", "reference/lazyframe/api/polars.LazyFrame.dtypes.rst", "reference/lazyframe/api/polars.LazyFrame.explain.rst", "reference/lazyframe/api/polars.LazyFrame.explode.rst", "reference/lazyframe/api/polars.LazyFrame.fetch.rst", "reference/lazyframe/api/polars.LazyFrame.fill_nan.rst", "reference/lazyframe/api/polars.LazyFrame.fill_null.rst", "reference/lazyframe/api/polars.LazyFrame.filter.rst", "reference/lazyframe/api/polars.LazyFrame.first.rst", "reference/lazyframe/api/polars.LazyFrame.from_json.rst", "reference/lazyframe/api/polars.LazyFrame.group_by.rst", "reference/lazyframe/api/polars.LazyFrame.group_by_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.group_by_rolling.rst", "reference/lazyframe/api/polars.LazyFrame.groupby.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling.rst", "reference/lazyframe/api/polars.LazyFrame.head.rst", "reference/lazyframe/api/polars.LazyFrame.inspect.rst", "reference/lazyframe/api/polars.LazyFrame.interpolate.rst", "reference/lazyframe/api/polars.LazyFrame.join.rst", "reference/lazyframe/api/polars.LazyFrame.join_asof.rst", "reference/lazyframe/api/polars.LazyFrame.last.rst", "reference/lazyframe/api/polars.LazyFrame.lazy.rst", "reference/lazyframe/api/polars.LazyFrame.limit.rst", "reference/lazyframe/api/polars.LazyFrame.map.rst", "reference/lazyframe/api/polars.LazyFrame.map_batches.rst", "reference/lazyframe/api/polars.LazyFrame.max.rst", "reference/lazyframe/api/polars.LazyFrame.mean.rst", "reference/lazyframe/api/polars.LazyFrame.median.rst", "reference/lazyframe/api/polars.LazyFrame.melt.rst", "reference/lazyframe/api/polars.LazyFrame.merge_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.min.rst", "reference/lazyframe/api/polars.LazyFrame.null_count.rst", "reference/lazyframe/api/polars.LazyFrame.pipe.rst", "reference/lazyframe/api/polars.LazyFrame.profile.rst", "reference/lazyframe/api/polars.LazyFrame.quantile.rst", "reference/lazyframe/api/polars.LazyFrame.read_json.rst", "reference/lazyframe/api/polars.LazyFrame.rename.rst", "reference/lazyframe/api/polars.LazyFrame.reverse.rst", "reference/lazyframe/api/polars.LazyFrame.rolling.rst", "reference/lazyframe/api/polars.LazyFrame.schema.rst", "reference/lazyframe/api/polars.LazyFrame.select.rst", "reference/lazyframe/api/polars.LazyFrame.select_seq.rst", "reference/lazyframe/api/polars.LazyFrame.serialize.rst", "reference/lazyframe/api/polars.LazyFrame.set_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.shift.rst", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill.rst", "reference/lazyframe/api/polars.LazyFrame.show_graph.rst", "reference/lazyframe/api/polars.LazyFrame.slice.rst", "reference/lazyframe/api/polars.LazyFrame.sort.rst", "reference/lazyframe/api/polars.LazyFrame.std.rst", "reference/lazyframe/api/polars.LazyFrame.sum.rst", "reference/lazyframe/api/polars.LazyFrame.tail.rst", "reference/lazyframe/api/polars.LazyFrame.take_every.rst", "reference/lazyframe/api/polars.LazyFrame.top_k.rst", "reference/lazyframe/api/polars.LazyFrame.unique.rst", "reference/lazyframe/api/polars.LazyFrame.unnest.rst", "reference/lazyframe/api/polars.LazyFrame.update.rst", "reference/lazyframe/api/polars.LazyFrame.var.rst", "reference/lazyframe/api/polars.LazyFrame.width.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns_seq.rst", "reference/lazyframe/api/polars.LazyFrame.with_context.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_count.rst", "reference/lazyframe/api/polars.LazyFrame.write_json.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.agg.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.all.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.apply.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.count.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.first.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.head.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.last.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.map_groups.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.max.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.mean.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.median.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.min.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.n_unique.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.quantile.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.sum.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.tail.rst", "reference/lazyframe/attributes.rst", "reference/lazyframe/descriptive.rst", "reference/lazyframe/group_by.rst", "reference/lazyframe/index.rst", "reference/lazyframe/miscellaneous.rst", "reference/lazyframe/modify_select.rst", "reference/selectors.rst", "reference/series/aggregation.rst", "reference/series/api/polars.Series.abs.rst", "reference/series/api/polars.Series.alias.rst", "reference/series/api/polars.Series.all.rst", "reference/series/api/polars.Series.any.rst", "reference/series/api/polars.Series.append.rst", "reference/series/api/polars.Series.apply.rst", "reference/series/api/polars.Series.arccos.rst", "reference/series/api/polars.Series.arccosh.rst", "reference/series/api/polars.Series.arcsin.rst", "reference/series/api/polars.Series.arcsinh.rst", "reference/series/api/polars.Series.arctan.rst", "reference/series/api/polars.Series.arctanh.rst", "reference/series/api/polars.Series.arg_max.rst", "reference/series/api/polars.Series.arg_min.rst", "reference/series/api/polars.Series.arg_sort.rst", "reference/series/api/polars.Series.arg_true.rst", "reference/series/api/polars.Series.arg_unique.rst", "reference/series/api/polars.Series.arr.max.rst", "reference/series/api/polars.Series.arr.min.rst", "reference/series/api/polars.Series.arr.sum.rst", "reference/series/api/polars.Series.arr.unique.rst", "reference/series/api/polars.Series.bin.contains.rst", "reference/series/api/polars.Series.bin.decode.rst", "reference/series/api/polars.Series.bin.encode.rst", "reference/series/api/polars.Series.bin.ends_with.rst", "reference/series/api/polars.Series.bin.starts_with.rst", "reference/series/api/polars.Series.bottom_k.rst", "reference/series/api/polars.Series.cast.rst", "reference/series/api/polars.Series.cat.rst", "reference/series/api/polars.Series.cat.get_categories.rst", "reference/series/api/polars.Series.cat.is_local.rst", "reference/series/api/polars.Series.cat.set_ordering.rst", "reference/series/api/polars.Series.cat.to_local.rst", "reference/series/api/polars.Series.cat.uses_lexical_ordering.rst", "reference/series/api/polars.Series.cbrt.rst", "reference/series/api/polars.Series.ceil.rst", "reference/series/api/polars.Series.chunk_lengths.rst", "reference/series/api/polars.Series.clear.rst", "reference/series/api/polars.Series.clip.rst", "reference/series/api/polars.Series.clip_max.rst", "reference/series/api/polars.Series.clip_min.rst", "reference/series/api/polars.Series.clone.rst", "reference/series/api/polars.Series.cos.rst", "reference/series/api/polars.Series.cosh.rst", "reference/series/api/polars.Series.cot.rst", "reference/series/api/polars.Series.cummax.rst", "reference/series/api/polars.Series.cummin.rst", "reference/series/api/polars.Series.cumprod.rst", "reference/series/api/polars.Series.cumsum.rst", "reference/series/api/polars.Series.cumulative_eval.rst", "reference/series/api/polars.Series.cut.rst", "reference/series/api/polars.Series.describe.rst", "reference/series/api/polars.Series.diff.rst", "reference/series/api/polars.Series.dot.rst", "reference/series/api/polars.Series.drop_nans.rst", "reference/series/api/polars.Series.drop_nulls.rst", "reference/series/api/polars.Series.dt.rst", "reference/series/api/polars.Series.dt.base_utc_offset.rst", "reference/series/api/polars.Series.dt.cast_time_unit.rst", "reference/series/api/polars.Series.dt.combine.rst", "reference/series/api/polars.Series.dt.convert_time_zone.rst", "reference/series/api/polars.Series.dt.date.rst", "reference/series/api/polars.Series.dt.datetime.rst", "reference/series/api/polars.Series.dt.day.rst", "reference/series/api/polars.Series.dt.days.rst", "reference/series/api/polars.Series.dt.dst_offset.rst", "reference/series/api/polars.Series.dt.epoch.rst", "reference/series/api/polars.Series.dt.hour.rst", "reference/series/api/polars.Series.dt.hours.rst", "reference/series/api/polars.Series.dt.is_leap_year.rst", "reference/series/api/polars.Series.dt.iso_year.rst", "reference/series/api/polars.Series.dt.max.rst", "reference/series/api/polars.Series.dt.mean.rst", "reference/series/api/polars.Series.dt.median.rst", "reference/series/api/polars.Series.dt.microsecond.rst", "reference/series/api/polars.Series.dt.microseconds.rst", "reference/series/api/polars.Series.dt.millisecond.rst", "reference/series/api/polars.Series.dt.milliseconds.rst", "reference/series/api/polars.Series.dt.min.rst", "reference/series/api/polars.Series.dt.minute.rst", "reference/series/api/polars.Series.dt.minutes.rst", "reference/series/api/polars.Series.dt.month.rst", "reference/series/api/polars.Series.dt.month_end.rst", "reference/series/api/polars.Series.dt.month_start.rst", "reference/series/api/polars.Series.dt.nanosecond.rst", "reference/series/api/polars.Series.dt.nanoseconds.rst", "reference/series/api/polars.Series.dt.offset_by.rst", "reference/series/api/polars.Series.dt.ordinal_day.rst", "reference/series/api/polars.Series.dt.quarter.rst", "reference/series/api/polars.Series.dt.replace_time_zone.rst", "reference/series/api/polars.Series.dt.round.rst", "reference/series/api/polars.Series.dt.second.rst", "reference/series/api/polars.Series.dt.seconds.rst", "reference/series/api/polars.Series.dt.strftime.rst", "reference/series/api/polars.Series.dt.time.rst", "reference/series/api/polars.Series.dt.timestamp.rst", "reference/series/api/polars.Series.dt.to_string.rst", "reference/series/api/polars.Series.dt.truncate.rst", "reference/series/api/polars.Series.dt.week.rst", "reference/series/api/polars.Series.dt.weekday.rst", "reference/series/api/polars.Series.dt.with_time_unit.rst", "reference/series/api/polars.Series.dt.year.rst", "reference/series/api/polars.Series.dtype.rst", "reference/series/api/polars.Series.entropy.rst", "reference/series/api/polars.Series.estimated_size.rst", "reference/series/api/polars.Series.ewm_mean.rst", "reference/series/api/polars.Series.ewm_std.rst", "reference/series/api/polars.Series.ewm_var.rst", "reference/series/api/polars.Series.exp.rst", "reference/series/api/polars.Series.explode.rst", "reference/series/api/polars.Series.extend.rst", "reference/series/api/polars.Series.extend_constant.rst", "reference/series/api/polars.Series.fill_nan.rst", "reference/series/api/polars.Series.fill_null.rst", "reference/series/api/polars.Series.filter.rst", "reference/series/api/polars.Series.flags.rst", "reference/series/api/polars.Series.floor.rst", "reference/series/api/polars.Series.get_chunks.rst", "reference/series/api/polars.Series.has_validity.rst", "reference/series/api/polars.Series.hash.rst", "reference/series/api/polars.Series.head.rst", "reference/series/api/polars.Series.hist.rst", "reference/series/api/polars.Series.implode.rst", "reference/series/api/polars.Series.inner_dtype.rst", "reference/series/api/polars.Series.interpolate.rst", "reference/series/api/polars.Series.is_between.rst", "reference/series/api/polars.Series.is_boolean.rst", "reference/series/api/polars.Series.is_duplicated.rst", "reference/series/api/polars.Series.is_empty.rst", "reference/series/api/polars.Series.is_finite.rst", "reference/series/api/polars.Series.is_first.rst", "reference/series/api/polars.Series.is_first_distinct.rst", "reference/series/api/polars.Series.is_float.rst", "reference/series/api/polars.Series.is_in.rst", "reference/series/api/polars.Series.is_infinite.rst", "reference/series/api/polars.Series.is_integer.rst", "reference/series/api/polars.Series.is_last.rst", "reference/series/api/polars.Series.is_last_distinct.rst", "reference/series/api/polars.Series.is_nan.rst", "reference/series/api/polars.Series.is_not_nan.rst", "reference/series/api/polars.Series.is_not_null.rst", "reference/series/api/polars.Series.is_null.rst", "reference/series/api/polars.Series.is_numeric.rst", "reference/series/api/polars.Series.is_sorted.rst", "reference/series/api/polars.Series.is_temporal.rst", "reference/series/api/polars.Series.is_unique.rst", "reference/series/api/polars.Series.is_utf8.rst", "reference/series/api/polars.Series.item.rst", "reference/series/api/polars.Series.kurtosis.rst", "reference/series/api/polars.Series.len.rst", "reference/series/api/polars.Series.limit.rst", "reference/series/api/polars.Series.list.rst", "reference/series/api/polars.Series.list.all.rst", "reference/series/api/polars.Series.list.any.rst", "reference/series/api/polars.Series.list.arg_max.rst", "reference/series/api/polars.Series.list.arg_min.rst", "reference/series/api/polars.Series.list.concat.rst", "reference/series/api/polars.Series.list.contains.rst", "reference/series/api/polars.Series.list.count_match.rst", "reference/series/api/polars.Series.list.count_matches.rst", "reference/series/api/polars.Series.list.diff.rst", "reference/series/api/polars.Series.list.difference.rst", "reference/series/api/polars.Series.list.drop_nulls.rst", "reference/series/api/polars.Series.list.eval.rst", "reference/series/api/polars.Series.list.explode.rst", "reference/series/api/polars.Series.list.first.rst", "reference/series/api/polars.Series.list.get.rst", "reference/series/api/polars.Series.list.head.rst", "reference/series/api/polars.Series.list.intersection.rst", "reference/series/api/polars.Series.list.join.rst", "reference/series/api/polars.Series.list.last.rst", "reference/series/api/polars.Series.list.len.rst", "reference/series/api/polars.Series.list.lengths.rst", "reference/series/api/polars.Series.list.max.rst", "reference/series/api/polars.Series.list.mean.rst", "reference/series/api/polars.Series.list.min.rst", "reference/series/api/polars.Series.list.reverse.rst", "reference/series/api/polars.Series.list.sample.rst", "reference/series/api/polars.Series.list.set_difference.rst", "reference/series/api/polars.Series.list.set_intersection.rst", "reference/series/api/polars.Series.list.set_symmetric_difference.rst", "reference/series/api/polars.Series.list.set_union.rst", "reference/series/api/polars.Series.list.shift.rst", "reference/series/api/polars.Series.list.slice.rst", "reference/series/api/polars.Series.list.sort.rst", "reference/series/api/polars.Series.list.sum.rst", "reference/series/api/polars.Series.list.symmetric_difference.rst", "reference/series/api/polars.Series.list.tail.rst", "reference/series/api/polars.Series.list.take.rst", "reference/series/api/polars.Series.list.to_struct.rst", "reference/series/api/polars.Series.list.union.rst", "reference/series/api/polars.Series.list.unique.rst", "reference/series/api/polars.Series.log.rst", "reference/series/api/polars.Series.log10.rst", "reference/series/api/polars.Series.log1p.rst", "reference/series/api/polars.Series.lower_bound.rst", "reference/series/api/polars.Series.map_dict.rst", "reference/series/api/polars.Series.map_elements.rst", "reference/series/api/polars.Series.max.rst", "reference/series/api/polars.Series.mean.rst", "reference/series/api/polars.Series.median.rst", "reference/series/api/polars.Series.min.rst", "reference/series/api/polars.Series.mode.rst", "reference/series/api/polars.Series.n_chunks.rst", "reference/series/api/polars.Series.n_unique.rst", "reference/series/api/polars.Series.name.rst", "reference/series/api/polars.Series.nan_max.rst", "reference/series/api/polars.Series.nan_min.rst", "reference/series/api/polars.Series.new_from_index.rst", "reference/series/api/polars.Series.not_.rst", "reference/series/api/polars.Series.null_count.rst", "reference/series/api/polars.Series.pct_change.rst", "reference/series/api/polars.Series.peak_max.rst", "reference/series/api/polars.Series.peak_min.rst", "reference/series/api/polars.Series.product.rst", "reference/series/api/polars.Series.qcut.rst", "reference/series/api/polars.Series.quantile.rst", "reference/series/api/polars.Series.rank.rst", "reference/series/api/polars.Series.rechunk.rst", "reference/series/api/polars.Series.reinterpret.rst", "reference/series/api/polars.Series.rename.rst", "reference/series/api/polars.Series.reshape.rst", "reference/series/api/polars.Series.reverse.rst", "reference/series/api/polars.Series.rle.rst", "reference/series/api/polars.Series.rle_id.rst", "reference/series/api/polars.Series.rolling_apply.rst", "reference/series/api/polars.Series.rolling_map.rst", "reference/series/api/polars.Series.rolling_max.rst", "reference/series/api/polars.Series.rolling_mean.rst", "reference/series/api/polars.Series.rolling_median.rst", "reference/series/api/polars.Series.rolling_min.rst", "reference/series/api/polars.Series.rolling_quantile.rst", "reference/series/api/polars.Series.rolling_skew.rst", "reference/series/api/polars.Series.rolling_std.rst", "reference/series/api/polars.Series.rolling_sum.rst", "reference/series/api/polars.Series.rolling_var.rst", "reference/series/api/polars.Series.round.rst", "reference/series/api/polars.Series.sample.rst", "reference/series/api/polars.Series.search_sorted.rst", "reference/series/api/polars.Series.series_equal.rst", "reference/series/api/polars.Series.set.rst", "reference/series/api/polars.Series.set_at_idx.rst", "reference/series/api/polars.Series.set_sorted.rst", "reference/series/api/polars.Series.shape.rst", "reference/series/api/polars.Series.shift.rst", "reference/series/api/polars.Series.shift_and_fill.rst", "reference/series/api/polars.Series.shrink_dtype.rst", "reference/series/api/polars.Series.shrink_to_fit.rst", "reference/series/api/polars.Series.shuffle.rst", "reference/series/api/polars.Series.sign.rst", "reference/series/api/polars.Series.sin.rst", "reference/series/api/polars.Series.sinh.rst", "reference/series/api/polars.Series.skew.rst", "reference/series/api/polars.Series.slice.rst", "reference/series/api/polars.Series.sort.rst", "reference/series/api/polars.Series.sqrt.rst", "reference/series/api/polars.Series.std.rst", "reference/series/api/polars.Series.str.rst", "reference/series/api/polars.Series.str.concat.rst", "reference/series/api/polars.Series.str.contains.rst", "reference/series/api/polars.Series.str.count_match.rst", "reference/series/api/polars.Series.str.count_matches.rst", "reference/series/api/polars.Series.str.decode.rst", "reference/series/api/polars.Series.str.encode.rst", "reference/series/api/polars.Series.str.ends_with.rst", "reference/series/api/polars.Series.str.explode.rst", "reference/series/api/polars.Series.str.extract.rst", "reference/series/api/polars.Series.str.extract_all.rst", "reference/series/api/polars.Series.str.extract_groups.rst", "reference/series/api/polars.Series.str.json_extract.rst", "reference/series/api/polars.Series.str.json_path_match.rst", "reference/series/api/polars.Series.str.len_bytes.rst", "reference/series/api/polars.Series.str.len_chars.rst", "reference/series/api/polars.Series.str.lengths.rst", "reference/series/api/polars.Series.str.ljust.rst", "reference/series/api/polars.Series.str.lstrip.rst", "reference/series/api/polars.Series.str.n_chars.rst", "reference/series/api/polars.Series.str.pad_end.rst", "reference/series/api/polars.Series.str.pad_start.rst", "reference/series/api/polars.Series.str.parse_int.rst", "reference/series/api/polars.Series.str.replace.rst", "reference/series/api/polars.Series.str.replace_all.rst", "reference/series/api/polars.Series.str.rjust.rst", "reference/series/api/polars.Series.str.rstrip.rst", "reference/series/api/polars.Series.str.slice.rst", "reference/series/api/polars.Series.str.split.rst", "reference/series/api/polars.Series.str.split_exact.rst", "reference/series/api/polars.Series.str.splitn.rst", "reference/series/api/polars.Series.str.starts_with.rst", "reference/series/api/polars.Series.str.strip.rst", "reference/series/api/polars.Series.str.strip_chars.rst", "reference/series/api/polars.Series.str.strip_chars_end.rst", "reference/series/api/polars.Series.str.strip_chars_start.rst", "reference/series/api/polars.Series.str.strip_prefix.rst", "reference/series/api/polars.Series.str.strip_suffix.rst", "reference/series/api/polars.Series.str.strptime.rst", "reference/series/api/polars.Series.str.to_date.rst", "reference/series/api/polars.Series.str.to_datetime.rst", "reference/series/api/polars.Series.str.to_decimal.rst", "reference/series/api/polars.Series.str.to_lowercase.rst", "reference/series/api/polars.Series.str.to_time.rst", "reference/series/api/polars.Series.str.to_titlecase.rst", "reference/series/api/polars.Series.str.to_uppercase.rst", "reference/series/api/polars.Series.str.zfill.rst", "reference/series/api/polars.Series.struct.field.rst", "reference/series/api/polars.Series.struct.fields.rst", "reference/series/api/polars.Series.struct.rename_fields.rst", "reference/series/api/polars.Series.struct.schema.rst", "reference/series/api/polars.Series.struct.unnest.rst", "reference/series/api/polars.Series.sum.rst", "reference/series/api/polars.Series.tail.rst", "reference/series/api/polars.Series.take.rst", "reference/series/api/polars.Series.take_every.rst", "reference/series/api/polars.Series.tan.rst", "reference/series/api/polars.Series.tanh.rst", "reference/series/api/polars.Series.to_arrow.rst", "reference/series/api/polars.Series.to_dummies.rst", "reference/series/api/polars.Series.to_frame.rst", "reference/series/api/polars.Series.to_init_repr.rst", "reference/series/api/polars.Series.to_list.rst", "reference/series/api/polars.Series.to_numpy.rst", "reference/series/api/polars.Series.to_pandas.rst", "reference/series/api/polars.Series.to_physical.rst", "reference/series/api/polars.Series.top_k.rst", "reference/series/api/polars.Series.unique.rst", "reference/series/api/polars.Series.unique_counts.rst", "reference/series/api/polars.Series.upper_bound.rst", "reference/series/api/polars.Series.value_counts.rst", "reference/series/api/polars.Series.var.rst", "reference/series/api/polars.Series.view.rst", "reference/series/api/polars.Series.zip_with.rst", "reference/series/array.rst", "reference/series/attributes.rst", "reference/series/binary.rst", "reference/series/boolean.rst", "reference/series/categories.rst", "reference/series/computation.rst", "reference/series/descriptive.rst", "reference/series/export.rst", "reference/series/index.rst", "reference/series/list.rst", "reference/series/miscellaneous.rst", "reference/series/modify_select.rst", "reference/series/string.rst", "reference/series/struct.rst", "reference/series/temporal.rst", "reference/sql.rst", "reference/testing.rst", "reference/utils.rst"], "titles": ["Index", "Extending the API", "polars.Array", "polars.Binary", "polars.Boolean", "polars.Categorical", "polars.Config.activate_decimals", "polars.Config.load", "polars.Config.load_from_file", "polars.Config.restore_defaults", "polars.Config.save", "polars.Config.save_to_file", "polars.Config.set_ascii_tables", "polars.Config.set_fmt_float", "polars.Config.set_fmt_str_lengths", "polars.Config.set_fmt_table_cell_list_len", "polars.Config.set_streaming_chunk_size", "polars.Config.set_tbl_cell_alignment", "polars.Config.set_tbl_cols", "polars.Config.set_tbl_column_data_type_inline", "polars.Config.set_tbl_dataframe_shape_below", "polars.Config.set_tbl_formatting", "polars.Config.set_tbl_hide_column_data_types", "polars.Config.set_tbl_hide_column_names", "polars.Config.set_tbl_hide_dataframe_shape", "polars.Config.set_tbl_hide_dtype_separator", "polars.Config.set_tbl_rows", "polars.Config.set_tbl_width_chars", "polars.Config.set_verbose", "polars.Config.state", "polars.DataFrame.write_avro", "polars.DataFrame.write_csv", "polars.DataFrame.write_database", "polars.DataFrame.write_delta", "polars.DataFrame.write_excel", "polars.DataFrame.write_ipc", "polars.DataFrame.write_ipc_stream", "polars.DataFrame.write_json", "polars.DataFrame.write_ndjson", "polars.DataFrame.write_parquet", "polars.DataType", "polars.Date", "polars.Datetime", "polars.Decimal", "polars.Duration", "polars.Float32", "polars.Float64", "polars.Int16", "polars.Int32", "polars.Int64", "polars.Int8", "polars.LazyFrame.sink_csv", "polars.LazyFrame.sink_ipc", "polars.LazyFrame.sink_parquet", "polars.List", "polars.Null", "polars.Object", "polars.SQLContext.execute", "polars.SQLContext.register", "polars.SQLContext.register_globals", "polars.SQLContext.register_many", "polars.SQLContext.tables", "polars.SQLContext.unregister", "polars.StringCache", "polars.Struct", "polars.Time", "polars.UInt16", "polars.UInt32", "polars.UInt64", "polars.UInt8", "polars.Unknown", "polars.Utf8", "polars.align_frames", "polars.api.register_dataframe_namespace", "polars.api.register_expr_namespace", "polars.api.register_lazyframe_namespace", "polars.api.register_series_namespace", "polars.build_info", "polars.collect_all", "polars.collect_all_async", "polars.concat", "polars.disable_string_cache", "polars.enable_string_cache", "polars.exceptions.ArrowError", "polars.exceptions.ColumnNotFoundError", "polars.exceptions.ComputeError", "polars.exceptions.DuplicateError", "polars.exceptions.InvalidOperationError", "polars.exceptions.NoDataError", "polars.exceptions.NoRowsReturnedError", "polars.exceptions.PolarsPanicError", "polars.exceptions.RowsError", "polars.exceptions.SchemaError", "polars.exceptions.SchemaFieldNotFoundError", "polars.exceptions.ShapeError", "polars.exceptions.StructFieldNotFoundError", "polars.exceptions.TooManyRowsReturnedError", "polars.from_arrow", "polars.from_dataframe", "polars.from_dict", "polars.from_dicts", "polars.from_numpy", "polars.from_pandas", "polars.from_records", "polars.from_repr", "polars.get_index_type", "polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "polars.read_avro", "polars.read_csv", "polars.read_csv_batched", "polars.read_database", "polars.read_database_uri", "polars.read_delta", "polars.read_excel", "polars.read_ipc", "polars.read_ipc_schema", "polars.read_ipc_stream", "polars.read_json", "polars.read_ndjson", "polars.read_ods", "polars.read_parquet", "polars.read_parquet_schema", "polars.scan_csv", "polars.scan_delta", "polars.scan_iceberg", "polars.scan_ipc", "polars.scan_ndjson", "polars.scan_parquet", "polars.scan_pyarrow_dataset", "polars.set_random_seed", "polars.show_versions", "polars.testing.assert_frame_equal", "polars.testing.assert_frame_not_equal", "polars.testing.assert_series_equal", "polars.testing.assert_series_not_equal", "polars.testing.parametric.column", "polars.testing.parametric.columns", "polars.testing.parametric.create_list_strategy", "polars.testing.parametric.dataframes", "polars.testing.parametric.load_profile", "polars.testing.parametric.series", "polars.testing.parametric.set_profile", "polars.threadpool_size", "polars.using_string_cache", "Config", "Aggregation", "polars.DataFrame.__dataframe__", "polars.DataFrame.apply", "polars.DataFrame.approx_n_unique", "polars.DataFrame.approx_unique", "polars.DataFrame.bottom_k", "polars.DataFrame.cast", "polars.DataFrame.clear", "polars.DataFrame.clone", "polars.DataFrame.columns", "polars.DataFrame.corr", "polars.DataFrame.describe", "polars.DataFrame.drop", "polars.DataFrame.drop_in_place", "polars.DataFrame.drop_nulls", "polars.DataFrame.dtypes", "polars.DataFrame.estimated_size", "polars.DataFrame.explode", "polars.DataFrame.extend", "polars.DataFrame.fill_nan", "polars.DataFrame.fill_null", "polars.DataFrame.filter", "polars.DataFrame.find_idx_by_name", "polars.DataFrame.flags", "polars.DataFrame.fold", "polars.DataFrame.frame_equal", "polars.DataFrame.get_column", "polars.DataFrame.get_columns", "polars.DataFrame.glimpse", "polars.DataFrame.group_by", "polars.DataFrame.group_by_dynamic", "polars.DataFrame.group_by_rolling", "polars.DataFrame.groupby", "polars.DataFrame.groupby_dynamic", "polars.DataFrame.groupby_rolling", "polars.DataFrame.hash_rows", "polars.DataFrame.head", "polars.DataFrame.height", "polars.DataFrame.hstack", "polars.DataFrame.insert_at_idx", "polars.DataFrame.interpolate", "polars.DataFrame.is_duplicated", "polars.DataFrame.is_empty", "polars.DataFrame.is_unique", "polars.DataFrame.item", "polars.DataFrame.iter_rows", "polars.DataFrame.iter_slices", "polars.DataFrame.join", "polars.DataFrame.join_asof", "polars.DataFrame.lazy", "polars.DataFrame.limit", "polars.DataFrame.map_rows", "polars.DataFrame.max", "polars.DataFrame.mean", "polars.DataFrame.median", "polars.DataFrame.melt", "polars.DataFrame.merge_sorted", "polars.DataFrame.min", "polars.DataFrame.n_chunks", "polars.DataFrame.n_unique", "polars.DataFrame.null_count", "polars.DataFrame.partition_by", "polars.DataFrame.pipe", "polars.DataFrame.pivot", "polars.DataFrame.product", "polars.DataFrame.quantile", "polars.DataFrame.rechunk", "polars.DataFrame.rename", "polars.DataFrame.replace", "polars.DataFrame.replace_at_idx", "polars.DataFrame.reverse", "polars.DataFrame.rolling", "polars.DataFrame.row", "polars.DataFrame.rows", "polars.DataFrame.rows_by_key", "polars.DataFrame.sample", "polars.DataFrame.schema", "polars.DataFrame.select", "polars.DataFrame.select_seq", "polars.DataFrame.set_sorted", "polars.DataFrame.shape", "polars.DataFrame.shift", "polars.DataFrame.shift_and_fill", "polars.DataFrame.shrink_to_fit", "polars.DataFrame.slice", "polars.DataFrame.sort", "polars.DataFrame.std", "polars.DataFrame.sum", "polars.DataFrame.tail", "polars.DataFrame.take_every", "polars.DataFrame.to_arrow", "polars.DataFrame.to_dict", "polars.DataFrame.to_dicts", "polars.DataFrame.to_dummies", "polars.DataFrame.to_init_repr", "polars.DataFrame.to_numpy", "polars.DataFrame.to_pandas", "polars.DataFrame.to_series", "polars.DataFrame.to_struct", "polars.DataFrame.top_k", "polars.DataFrame.transpose", "polars.DataFrame.unique", "polars.DataFrame.unnest", "polars.DataFrame.unstack", "polars.DataFrame.update", "polars.DataFrame.upsample", "polars.DataFrame.var", "polars.DataFrame.vstack", "polars.DataFrame.width", "polars.DataFrame.with_columns", "polars.DataFrame.with_columns_seq", "polars.DataFrame.with_row_count", "polars.dataframe.group_by.GroupBy.__iter__", "polars.dataframe.group_by.GroupBy.agg", "polars.dataframe.group_by.GroupBy.all", "polars.dataframe.group_by.GroupBy.apply", "polars.dataframe.group_by.GroupBy.count", "polars.dataframe.group_by.GroupBy.first", "polars.dataframe.group_by.GroupBy.head", "polars.dataframe.group_by.GroupBy.last", "polars.dataframe.group_by.GroupBy.map_groups", "polars.dataframe.group_by.GroupBy.max", "polars.dataframe.group_by.GroupBy.mean", "polars.dataframe.group_by.GroupBy.median", "polars.dataframe.group_by.GroupBy.min", "polars.dataframe.group_by.GroupBy.n_unique", "polars.dataframe.group_by.GroupBy.quantile", "polars.dataframe.group_by.GroupBy.sum", "polars.dataframe.group_by.GroupBy.tail", "Attributes", "Computation", "Descriptive", "Export", "GroupBy", "DataFrame", "Miscellaneous", "Manipulation/selection", "Data types", "Exceptions", "Aggregation", "polars.Expr.abs", "polars.Expr.add", "polars.Expr.agg_groups", "polars.Expr.alias", "polars.Expr.all", "polars.Expr.and_", "polars.Expr.any", "polars.Expr.append", "polars.Expr.apply", "polars.Expr.approx_n_unique", "polars.Expr.arccos", "polars.Expr.arccosh", "polars.Expr.arcsin", "polars.Expr.arcsinh", "polars.Expr.arctan", "polars.Expr.arctanh", "polars.Expr.arg_max", "polars.Expr.arg_min", "polars.Expr.arg_sort", "polars.Expr.arg_true", "polars.Expr.arg_unique", "polars.Expr.arr.max", "polars.Expr.arr.min", "polars.Expr.arr.sum", "polars.Expr.arr.unique", "polars.Expr.backward_fill", "polars.Expr.bin.contains", "polars.Expr.bin.decode", "polars.Expr.bin.encode", "polars.Expr.bin.ends_with", "polars.Expr.bin.starts_with", "polars.Expr.bottom_k", "polars.Expr.cache", "polars.Expr.cast", "polars.Expr.cat.get_categories", "polars.Expr.cat.set_ordering", "polars.Expr.cbrt", "polars.Expr.ceil", "polars.Expr.clip", "polars.Expr.clip_max", "polars.Expr.clip_min", "polars.Expr.cos", "polars.Expr.cosh", "polars.Expr.cot", "polars.Expr.count", "polars.Expr.cumcount", "polars.Expr.cummax", "polars.Expr.cummin", "polars.Expr.cumprod", "polars.Expr.cumsum", "polars.Expr.cumulative_eval", "polars.Expr.cut", "polars.Expr.degrees", "polars.Expr.diff", "polars.Expr.dot", "polars.Expr.drop_nans", "polars.Expr.drop_nulls", "polars.Expr.dt.base_utc_offset", "polars.Expr.dt.cast_time_unit", "polars.Expr.dt.combine", "polars.Expr.dt.convert_time_zone", "polars.Expr.dt.date", "polars.Expr.dt.datetime", "polars.Expr.dt.day", "polars.Expr.dt.days", "polars.Expr.dt.dst_offset", "polars.Expr.dt.epoch", "polars.Expr.dt.hour", "polars.Expr.dt.hours", "polars.Expr.dt.is_leap_year", "polars.Expr.dt.iso_year", "polars.Expr.dt.microsecond", "polars.Expr.dt.microseconds", "polars.Expr.dt.millisecond", "polars.Expr.dt.milliseconds", "polars.Expr.dt.minute", "polars.Expr.dt.minutes", "polars.Expr.dt.month", "polars.Expr.dt.month_end", "polars.Expr.dt.month_start", "polars.Expr.dt.nanosecond", "polars.Expr.dt.nanoseconds", "polars.Expr.dt.offset_by", "polars.Expr.dt.ordinal_day", "polars.Expr.dt.quarter", "polars.Expr.dt.replace_time_zone", "polars.Expr.dt.round", "polars.Expr.dt.second", "polars.Expr.dt.seconds", "polars.Expr.dt.strftime", "polars.Expr.dt.time", "polars.Expr.dt.timestamp", "polars.Expr.dt.to_string", "polars.Expr.dt.truncate", "polars.Expr.dt.week", "polars.Expr.dt.weekday", "polars.Expr.dt.with_time_unit", "polars.Expr.dt.year", "polars.Expr.entropy", "polars.Expr.eq", "polars.Expr.eq_missing", "polars.Expr.ewm_mean", "polars.Expr.ewm_std", "polars.Expr.ewm_var", "polars.Expr.exclude", "polars.Expr.exp", "polars.Expr.explode", "polars.Expr.extend_constant", "polars.Expr.fill_nan", "polars.Expr.fill_null", "polars.Expr.filter", "polars.Expr.first", "polars.Expr.flatten", "polars.Expr.floor", "polars.Expr.floordiv", "polars.Expr.forward_fill", "polars.Expr.from_json", "polars.Expr.ge", "polars.Expr.get", "polars.Expr.gt", "polars.Expr.hash", "polars.Expr.head", "polars.Expr.implode", "polars.Expr.inspect", "polars.Expr.interpolate", "polars.Expr.is_between", "polars.Expr.is_duplicated", "polars.Expr.is_finite", "polars.Expr.is_first", "polars.Expr.is_first_distinct", "polars.Expr.is_in", "polars.Expr.is_infinite", "polars.Expr.is_last", "polars.Expr.is_last_distinct", "polars.Expr.is_nan", "polars.Expr.is_not", "polars.Expr.is_not_nan", "polars.Expr.is_not_null", "polars.Expr.is_null", "polars.Expr.is_unique", "polars.Expr.keep_name", "polars.Expr.kurtosis", "polars.Expr.last", "polars.Expr.le", "polars.Expr.len", "polars.Expr.limit", "polars.Expr.list.all", "polars.Expr.list.any", "polars.Expr.list.arg_max", "polars.Expr.list.arg_min", "polars.Expr.list.concat", "polars.Expr.list.contains", "polars.Expr.list.count_match", "polars.Expr.list.count_matches", "polars.Expr.list.diff", "polars.Expr.list.difference", "polars.Expr.list.drop_nulls", "polars.Expr.list.eval", "polars.Expr.list.explode", "polars.Expr.list.first", "polars.Expr.list.get", "polars.Expr.list.head", "polars.Expr.list.intersection", "polars.Expr.list.join", "polars.Expr.list.last", "polars.Expr.list.len", "polars.Expr.list.lengths", "polars.Expr.list.max", "polars.Expr.list.mean", "polars.Expr.list.min", "polars.Expr.list.reverse", "polars.Expr.list.sample", "polars.Expr.list.set_difference", "polars.Expr.list.set_intersection", "polars.Expr.list.set_symmetric_difference", "polars.Expr.list.set_union", "polars.Expr.list.shift", "polars.Expr.list.slice", "polars.Expr.list.sort", "polars.Expr.list.sum", "polars.Expr.list.symmetric_difference", "polars.Expr.list.tail", "polars.Expr.list.take", "polars.Expr.list.to_struct", "polars.Expr.list.union", "polars.Expr.list.unique", "polars.Expr.log", "polars.Expr.log10", "polars.Expr.log1p", "polars.Expr.lower_bound", "polars.Expr.lt", "polars.Expr.map", "polars.Expr.map_alias", "polars.Expr.map_batches", "polars.Expr.map_dict", "polars.Expr.map_elements", "polars.Expr.max", "polars.Expr.mean", "polars.Expr.median", "polars.Expr.meta.eq", "polars.Expr.meta.has_multiple_outputs", "polars.Expr.meta.is_regex_projection", "polars.Expr.meta.ne", "polars.Expr.meta.output_name", "polars.Expr.meta.pop", "polars.Expr.meta.root_names", "polars.Expr.meta.tree_format", "polars.Expr.meta.undo_aliases", "polars.Expr.meta.write_json", "polars.Expr.min", "polars.Expr.mod", "polars.Expr.mode", "polars.Expr.mul", "polars.Expr.n_unique", "polars.Expr.name.keep", "polars.Expr.name.map", "polars.Expr.name.prefix", "polars.Expr.name.suffix", "polars.Expr.name.to_lowercase", "polars.Expr.name.to_uppercase", "polars.Expr.nan_max", "polars.Expr.nan_min", "polars.Expr.ne", "polars.Expr.ne_missing", "polars.Expr.not_", "polars.Expr.null_count", "polars.Expr.or_", "polars.Expr.over", "polars.Expr.pct_change", "polars.Expr.peak_max", "polars.Expr.peak_min", "polars.Expr.pipe", "polars.Expr.pow", "polars.Expr.prefix", "polars.Expr.product", "polars.Expr.qcut", "polars.Expr.quantile", "polars.Expr.radians", "polars.Expr.rank", "polars.Expr.rechunk", "polars.Expr.reinterpret", "polars.Expr.repeat_by", "polars.Expr.reshape", "polars.Expr.reverse", "polars.Expr.rle", "polars.Expr.rle_id", "polars.Expr.rolling", "polars.Expr.rolling_apply", "polars.Expr.rolling_map", "polars.Expr.rolling_max", "polars.Expr.rolling_mean", "polars.Expr.rolling_median", "polars.Expr.rolling_min", "polars.Expr.rolling_quantile", "polars.Expr.rolling_skew", "polars.Expr.rolling_std", "polars.Expr.rolling_sum", "polars.Expr.rolling_var", "polars.Expr.round", "polars.Expr.sample", "polars.Expr.search_sorted", "polars.Expr.set_sorted", "polars.Expr.shift", "polars.Expr.shift_and_fill", "polars.Expr.shrink_dtype", "polars.Expr.shuffle", "polars.Expr.sign", "polars.Expr.sin", "polars.Expr.sinh", "polars.Expr.skew", "polars.Expr.slice", "polars.Expr.sort", "polars.Expr.sort_by", "polars.Expr.sqrt", "polars.Expr.std", "polars.Expr.str.concat", "polars.Expr.str.contains", "polars.Expr.str.count_match", "polars.Expr.str.count_matches", "polars.Expr.str.decode", "polars.Expr.str.encode", "polars.Expr.str.ends_with", "polars.Expr.str.explode", "polars.Expr.str.extract", "polars.Expr.str.extract_all", "polars.Expr.str.extract_groups", "polars.Expr.str.json_extract", "polars.Expr.str.json_path_match", "polars.Expr.str.len_bytes", "polars.Expr.str.len_chars", "polars.Expr.str.lengths", "polars.Expr.str.ljust", "polars.Expr.str.lstrip", "polars.Expr.str.n_chars", "polars.Expr.str.pad_end", "polars.Expr.str.pad_start", "polars.Expr.str.parse_int", "polars.Expr.str.replace", "polars.Expr.str.replace_all", "polars.Expr.str.rjust", "polars.Expr.str.rstrip", "polars.Expr.str.slice", "polars.Expr.str.split", "polars.Expr.str.split_exact", "polars.Expr.str.splitn", "polars.Expr.str.starts_with", "polars.Expr.str.strip", "polars.Expr.str.strip_chars", "polars.Expr.str.strip_chars_end", "polars.Expr.str.strip_chars_start", "polars.Expr.str.strip_prefix", "polars.Expr.str.strip_suffix", "polars.Expr.str.strptime", "polars.Expr.str.to_date", "polars.Expr.str.to_datetime", "polars.Expr.str.to_decimal", "polars.Expr.str.to_lowercase", "polars.Expr.str.to_time", "polars.Expr.str.to_titlecase", "polars.Expr.str.to_uppercase", "polars.Expr.str.zfill", "polars.Expr.struct.field", "polars.Expr.struct.rename_fields", "polars.Expr.sub", "polars.Expr.suffix", "polars.Expr.sum", "polars.Expr.tail", "polars.Expr.take", "polars.Expr.take_every", "polars.Expr.tan", "polars.Expr.tanh", "polars.Expr.to_physical", "polars.Expr.top_k", "polars.Expr.truediv", "polars.Expr.unique", "polars.Expr.unique_counts", "polars.Expr.upper_bound", "polars.Expr.value_counts", "polars.Expr.var", "polars.Expr.where", "polars.Expr.xor", "polars.all", "polars.all_horizontal", "polars.any", "polars.any_horizontal", "polars.apply", "polars.approx_n_unique", "polars.arange", "polars.arctan2", "polars.arctan2d", "polars.arg_sort_by", "polars.arg_where", "polars.avg", "polars.coalesce", "polars.concat_list", "polars.concat_str", "polars.corr", "polars.count", "polars.cov", "polars.cumfold", "polars.cumreduce", "polars.cumsum", "polars.cumsum_horizontal", "polars.date", "polars.date_range", "polars.date_ranges", "polars.datetime", "polars.datetime_range", "polars.datetime_ranges", "polars.duration", "polars.element", "polars.exclude", "polars.first", "polars.fold", "polars.format", "polars.from_epoch", "polars.groups", "polars.head", "polars.implode", "polars.int_range", "polars.int_ranges", "polars.last", "polars.lit", "polars.map", "polars.map_batches", "polars.map_groups", "polars.max", "polars.max_horizontal", "polars.mean", "polars.median", "polars.min", "polars.min_horizontal", "polars.n_unique", "polars.ones", "polars.quantile", "polars.reduce", "polars.repeat", "polars.rolling_corr", "polars.rolling_cov", "polars.select", "polars.sql_expr", "polars.std", "polars.struct", "polars.sum", "polars.sum_horizontal", "polars.tail", "polars.time", "polars.time_range", "polars.time_ranges", "polars.var", "polars.when", "polars.zeros", "Array", "Binary", "Boolean", "Categories", "polars.col", "Columns / names", "Computation", "Functions", "Expressions", "List", "Meta", "Miscellaneous", "Manipulation/selection", "Name", "Operators", "String", "Struct", "Temporal", "Window", "Functions", "API reference", "Input/output", "Aggregation", "polars.LazyFrame.approx_n_unique", "polars.LazyFrame.approx_unique", "polars.LazyFrame.bottom_k", "polars.LazyFrame.cache", "polars.LazyFrame.cast", "polars.LazyFrame.clear", "polars.LazyFrame.clone", "polars.LazyFrame.collect", "polars.LazyFrame.collect_async", "polars.LazyFrame.columns", "polars.LazyFrame.deserialize", "polars.LazyFrame.drop", "polars.LazyFrame.drop_nulls", "polars.LazyFrame.dtypes", "polars.LazyFrame.explain", "polars.LazyFrame.explode", "polars.LazyFrame.fetch", "polars.LazyFrame.fill_nan", "polars.LazyFrame.fill_null", "polars.LazyFrame.filter", "polars.LazyFrame.first", "polars.LazyFrame.from_json", "polars.LazyFrame.group_by", "polars.LazyFrame.group_by_dynamic", "polars.LazyFrame.group_by_rolling", "polars.LazyFrame.groupby", "polars.LazyFrame.groupby_dynamic", "polars.LazyFrame.groupby_rolling", "polars.LazyFrame.head", "polars.LazyFrame.inspect", "polars.LazyFrame.interpolate", "polars.LazyFrame.join", "polars.LazyFrame.join_asof", "polars.LazyFrame.last", "polars.LazyFrame.lazy", "polars.LazyFrame.limit", "polars.LazyFrame.map", "polars.LazyFrame.map_batches", "polars.LazyFrame.max", "polars.LazyFrame.mean", "polars.LazyFrame.median", "polars.LazyFrame.melt", "polars.LazyFrame.merge_sorted", "polars.LazyFrame.min", "polars.LazyFrame.null_count", "polars.LazyFrame.pipe", "polars.LazyFrame.profile", "polars.LazyFrame.quantile", "polars.LazyFrame.read_json", "polars.LazyFrame.rename", "polars.LazyFrame.reverse", "polars.LazyFrame.rolling", "polars.LazyFrame.schema", "polars.LazyFrame.select", "polars.LazyFrame.select_seq", "polars.LazyFrame.serialize", "polars.LazyFrame.set_sorted", "polars.LazyFrame.shift", "polars.LazyFrame.shift_and_fill", "polars.LazyFrame.show_graph", "polars.LazyFrame.slice", "polars.LazyFrame.sort", "polars.LazyFrame.std", "polars.LazyFrame.sum", "polars.LazyFrame.tail", "polars.LazyFrame.take_every", "polars.LazyFrame.top_k", "polars.LazyFrame.unique", "polars.LazyFrame.unnest", "polars.LazyFrame.update", "polars.LazyFrame.var", "polars.LazyFrame.width", "polars.LazyFrame.with_columns", "polars.LazyFrame.with_columns_seq", "polars.LazyFrame.with_context", "polars.LazyFrame.with_row_count", "polars.LazyFrame.write_json", "polars.lazyframe.group_by.LazyGroupBy.agg", "polars.lazyframe.group_by.LazyGroupBy.all", "polars.lazyframe.group_by.LazyGroupBy.apply", "polars.lazyframe.group_by.LazyGroupBy.count", "polars.lazyframe.group_by.LazyGroupBy.first", "polars.lazyframe.group_by.LazyGroupBy.head", "polars.lazyframe.group_by.LazyGroupBy.last", "polars.lazyframe.group_by.LazyGroupBy.map_groups", "polars.lazyframe.group_by.LazyGroupBy.max", "polars.lazyframe.group_by.LazyGroupBy.mean", "polars.lazyframe.group_by.LazyGroupBy.median", "polars.lazyframe.group_by.LazyGroupBy.min", "polars.lazyframe.group_by.LazyGroupBy.n_unique", "polars.lazyframe.group_by.LazyGroupBy.quantile", "polars.lazyframe.group_by.LazyGroupBy.sum", "polars.lazyframe.group_by.LazyGroupBy.tail", "Attributes", "Descriptive", "GroupBy", "LazyFrame", "Miscellaneous", "Manipulation/selection", "Selectors", "Aggregation", "polars.Series.abs", "polars.Series.alias", "polars.Series.all", "polars.Series.any", "polars.Series.append", "polars.Series.apply", "polars.Series.arccos", "polars.Series.arccosh", "polars.Series.arcsin", "polars.Series.arcsinh", "polars.Series.arctan", "polars.Series.arctanh", "polars.Series.arg_max", "polars.Series.arg_min", "polars.Series.arg_sort", "polars.Series.arg_true", "polars.Series.arg_unique", "polars.Series.arr.max", "polars.Series.arr.min", "polars.Series.arr.sum", "polars.Series.arr.unique", "polars.Series.bin.contains", "polars.Series.bin.decode", "polars.Series.bin.encode", "polars.Series.bin.ends_with", "polars.Series.bin.starts_with", "polars.Series.bottom_k", "polars.Series.cast", "polars.Series.cat", "polars.Series.cat.get_categories", "polars.Series.cat.is_local", "polars.Series.cat.set_ordering", "polars.Series.cat.to_local", "polars.Series.cat.uses_lexical_ordering", "polars.Series.cbrt", "polars.Series.ceil", "polars.Series.chunk_lengths", "polars.Series.clear", "polars.Series.clip", "polars.Series.clip_max", "polars.Series.clip_min", "polars.Series.clone", "polars.Series.cos", "polars.Series.cosh", "polars.Series.cot", "polars.Series.cummax", "polars.Series.cummin", "polars.Series.cumprod", "polars.Series.cumsum", "polars.Series.cumulative_eval", "polars.Series.cut", "polars.Series.describe", "polars.Series.diff", "polars.Series.dot", "polars.Series.drop_nans", "polars.Series.drop_nulls", "polars.Series.dt", "polars.Series.dt.base_utc_offset", "polars.Series.dt.cast_time_unit", "polars.Series.dt.combine", "polars.Series.dt.convert_time_zone", "polars.Series.dt.date", "polars.Series.dt.datetime", "polars.Series.dt.day", "polars.Series.dt.days", "polars.Series.dt.dst_offset", "polars.Series.dt.epoch", "polars.Series.dt.hour", "polars.Series.dt.hours", "polars.Series.dt.is_leap_year", "polars.Series.dt.iso_year", "polars.Series.dt.max", "polars.Series.dt.mean", "polars.Series.dt.median", "polars.Series.dt.microsecond", "polars.Series.dt.microseconds", "polars.Series.dt.millisecond", "polars.Series.dt.milliseconds", "polars.Series.dt.min", "polars.Series.dt.minute", "polars.Series.dt.minutes", "polars.Series.dt.month", "polars.Series.dt.month_end", "polars.Series.dt.month_start", "polars.Series.dt.nanosecond", "polars.Series.dt.nanoseconds", "polars.Series.dt.offset_by", "polars.Series.dt.ordinal_day", "polars.Series.dt.quarter", "polars.Series.dt.replace_time_zone", "polars.Series.dt.round", "polars.Series.dt.second", "polars.Series.dt.seconds", "polars.Series.dt.strftime", "polars.Series.dt.time", "polars.Series.dt.timestamp", "polars.Series.dt.to_string", "polars.Series.dt.truncate", "polars.Series.dt.week", "polars.Series.dt.weekday", "polars.Series.dt.with_time_unit", "polars.Series.dt.year", "polars.Series.dtype", "polars.Series.entropy", "polars.Series.estimated_size", "polars.Series.ewm_mean", "polars.Series.ewm_std", "polars.Series.ewm_var", "polars.Series.exp", "polars.Series.explode", "polars.Series.extend", "polars.Series.extend_constant", "polars.Series.fill_nan", "polars.Series.fill_null", "polars.Series.filter", "polars.Series.flags", "polars.Series.floor", "polars.Series.get_chunks", "polars.Series.has_validity", "polars.Series.hash", "polars.Series.head", "polars.Series.hist", "polars.Series.implode", "polars.Series.inner_dtype", "polars.Series.interpolate", "polars.Series.is_between", "polars.Series.is_boolean", "polars.Series.is_duplicated", "polars.Series.is_empty", "polars.Series.is_finite", "polars.Series.is_first", "polars.Series.is_first_distinct", "polars.Series.is_float", "polars.Series.is_in", "polars.Series.is_infinite", "polars.Series.is_integer", "polars.Series.is_last", "polars.Series.is_last_distinct", "polars.Series.is_nan", "polars.Series.is_not_nan", "polars.Series.is_not_null", "polars.Series.is_null", "polars.Series.is_numeric", "polars.Series.is_sorted", "polars.Series.is_temporal", "polars.Series.is_unique", "polars.Series.is_utf8", "polars.Series.item", "polars.Series.kurtosis", "polars.Series.len", "polars.Series.limit", "polars.Series.list", "polars.Series.list.all", "polars.Series.list.any", "polars.Series.list.arg_max", "polars.Series.list.arg_min", "polars.Series.list.concat", "polars.Series.list.contains", "polars.Series.list.count_match", "polars.Series.list.count_matches", "polars.Series.list.diff", "polars.Series.list.difference", "polars.Series.list.drop_nulls", "polars.Series.list.eval", "polars.Series.list.explode", "polars.Series.list.first", "polars.Series.list.get", "polars.Series.list.head", "polars.Series.list.intersection", "polars.Series.list.join", "polars.Series.list.last", "polars.Series.list.len", "polars.Series.list.lengths", "polars.Series.list.max", "polars.Series.list.mean", "polars.Series.list.min", "polars.Series.list.reverse", "polars.Series.list.sample", "polars.Series.list.set_difference", "polars.Series.list.set_intersection", "polars.Series.list.set_symmetric_difference", "polars.Series.list.set_union", "polars.Series.list.shift", "polars.Series.list.slice", "polars.Series.list.sort", "polars.Series.list.sum", "polars.Series.list.symmetric_difference", "polars.Series.list.tail", "polars.Series.list.take", "polars.Series.list.to_struct", "polars.Series.list.union", "polars.Series.list.unique", "polars.Series.log", "polars.Series.log10", "polars.Series.log1p", "polars.Series.lower_bound", "polars.Series.map_dict", "polars.Series.map_elements", "polars.Series.max", "polars.Series.mean", "polars.Series.median", "polars.Series.min", "polars.Series.mode", "polars.Series.n_chunks", "polars.Series.n_unique", "polars.Series.name", "polars.Series.nan_max", "polars.Series.nan_min", "polars.Series.new_from_index", "polars.Series.not_", "polars.Series.null_count", "polars.Series.pct_change", "polars.Series.peak_max", "polars.Series.peak_min", "polars.Series.product", "polars.Series.qcut", "polars.Series.quantile", "polars.Series.rank", "polars.Series.rechunk", "polars.Series.reinterpret", "polars.Series.rename", "polars.Series.reshape", "polars.Series.reverse", "polars.Series.rle", "polars.Series.rle_id", "polars.Series.rolling_apply", "polars.Series.rolling_map", "polars.Series.rolling_max", "polars.Series.rolling_mean", "polars.Series.rolling_median", "polars.Series.rolling_min", "polars.Series.rolling_quantile", "polars.Series.rolling_skew", "polars.Series.rolling_std", "polars.Series.rolling_sum", "polars.Series.rolling_var", "polars.Series.round", "polars.Series.sample", "polars.Series.search_sorted", "polars.Series.series_equal", "polars.Series.set", "polars.Series.set_at_idx", "polars.Series.set_sorted", "polars.Series.shape", "polars.Series.shift", "polars.Series.shift_and_fill", "polars.Series.shrink_dtype", "polars.Series.shrink_to_fit", "polars.Series.shuffle", "polars.Series.sign", "polars.Series.sin", "polars.Series.sinh", "polars.Series.skew", "polars.Series.slice", "polars.Series.sort", "polars.Series.sqrt", "polars.Series.std", "polars.Series.str", "polars.Series.str.concat", "polars.Series.str.contains", "polars.Series.str.count_match", "polars.Series.str.count_matches", "polars.Series.str.decode", "polars.Series.str.encode", "polars.Series.str.ends_with", "polars.Series.str.explode", "polars.Series.str.extract", "polars.Series.str.extract_all", "polars.Series.str.extract_groups", "polars.Series.str.json_extract", "polars.Series.str.json_path_match", "polars.Series.str.len_bytes", "polars.Series.str.len_chars", "polars.Series.str.lengths", "polars.Series.str.ljust", "polars.Series.str.lstrip", "polars.Series.str.n_chars", "polars.Series.str.pad_end", "polars.Series.str.pad_start", "polars.Series.str.parse_int", "polars.Series.str.replace", "polars.Series.str.replace_all", "polars.Series.str.rjust", "polars.Series.str.rstrip", "polars.Series.str.slice", "polars.Series.str.split", "polars.Series.str.split_exact", "polars.Series.str.splitn", "polars.Series.str.starts_with", "polars.Series.str.strip", "polars.Series.str.strip_chars", "polars.Series.str.strip_chars_end", "polars.Series.str.strip_chars_start", "polars.Series.str.strip_prefix", "polars.Series.str.strip_suffix", "polars.Series.str.strptime", "polars.Series.str.to_date", "polars.Series.str.to_datetime", "polars.Series.str.to_decimal", "polars.Series.str.to_lowercase", "polars.Series.str.to_time", "polars.Series.str.to_titlecase", "polars.Series.str.to_uppercase", "polars.Series.str.zfill", "polars.Series.struct.field", "polars.Series.struct.fields", "polars.Series.struct.rename_fields", "polars.Series.struct.schema", "polars.Series.struct.unnest", "polars.Series.sum", "polars.Series.tail", "polars.Series.take", "polars.Series.take_every", "polars.Series.tan", "polars.Series.tanh", "polars.Series.to_arrow", "polars.Series.to_dummies", "polars.Series.to_frame", "polars.Series.to_init_repr", "polars.Series.to_list", "polars.Series.to_numpy", "polars.Series.to_pandas", "polars.Series.to_physical", "polars.Series.top_k", "polars.Series.unique", "polars.Series.unique_counts", "polars.Series.upper_bound", "polars.Series.value_counts", "polars.Series.var", "polars.Series.view", "polars.Series.zip_with", "Array", "Attributes", "Binary", "Boolean", "Categories", "Computation", "Descriptive", "Export", "Series", "List", "Miscellaneous", "Manipulation/selection", "String", "Struct", "Temporal", "SQL", "Testing", "Utils"], "terms": {"api": [0, 98, 128, 146, 196, 265, 279, 480, 670, 705, 804, 854, 1018, 1160], "refer": [0, 34, 107, 108, 109, 113, 114, 115, 116, 117, 118, 119, 121, 155, 279, 374, 377, 478, 479, 523, 568, 597, 598, 599, 602, 705, 730, 768, 816, 914, 917, 1038, 1116, 1117, 1118, 1121, 1160], "input": [0, 72, 78, 100, 108, 109, 150, 174, 177, 196, 206, 222, 223, 226, 230, 244, 254, 255, 258, 279, 286, 323, 389, 410, 472, 479, 480, 489, 512, 557, 625, 627, 629, 630, 632, 635, 638, 639, 640, 647, 656, 657, 664, 665, 666, 668, 669, 670, 672, 676, 684, 687, 689, 695, 705, 717, 722, 742, 745, 773, 774, 775, 777, 781, 786, 792, 793, 797, 816, 859, 946, 1014, 1015, 1017, 1018, 1065, 1160], "output": [0, 29, 31, 34, 35, 36, 37, 38, 51, 113, 147, 175, 176, 178, 179, 190, 196, 201, 206, 208, 216, 218, 222, 250, 254, 279, 289, 291, 293, 336, 476, 477, 478, 480, 488, 500, 520, 531, 536, 538, 540, 542, 574, 622, 626, 628, 630, 641, 649, 650, 668, 669, 670, 692, 705, 717, 743, 744, 746, 747, 756, 757, 761, 762, 771, 773, 775, 792, 796, 799, 804, 816, 823, 824, 826, 871, 1018, 1036, 1093, 1148, 1160], "seri": [0, 1, 2, 13, 26, 63, 64, 73, 74, 75, 76, 80, 81, 82, 97, 99, 102, 104, 131, 133, 134, 138, 158, 166, 169, 171, 172, 175, 180, 183, 184, 186, 188, 197, 198, 202, 213, 214, 216, 220, 232, 236, 239, 242, 243, 259, 279, 292, 293, 304, 311, 319, 320, 322, 370, 392, 398, 408, 412, 415, 416, 419, 421, 422, 423, 435, 443, 446, 462, 466, 467, 468, 474, 476, 478, 480, 517, 523, 524, 525, 526, 527, 529, 531, 532, 533, 539, 546, 549, 560, 586, 597, 598, 599, 602, 606, 612, 613, 621, 630, 631, 632, 636, 637, 642, 644, 645, 649, 650, 652, 653, 657, 658, 660, 662, 664, 665, 666, 667, 668, 669, 670, 673, 674, 677, 678, 680, 681, 684, 686, 687, 690, 692, 693, 694, 696, 705, 717, 739, 743, 771, 798, 816, 1152, 1154, 1156, 1159, 1161, 1164, 1165, 1166, 1168], "datafram": [0, 1, 12, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 51, 52, 53, 54, 57, 58, 59, 60, 61, 62, 72, 73, 74, 75, 76, 78, 79, 80, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 122, 125, 126, 127, 131, 132, 135, 136, 144, 277, 278, 285, 286, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 318, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 348, 349, 350, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 372, 373, 374, 377, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 438, 439, 441, 442, 443, 444, 445, 448, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 468, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482, 483, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 579, 580, 581, 582, 583, 586, 587, 588, 589, 590, 592, 593, 594, 595, 596, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 650, 654, 655, 656, 657, 658, 659, 660, 662, 665, 666, 669, 670, 671, 672, 673, 674, 675, 676, 677, 680, 684, 685, 686, 687, 688, 689, 690, 693, 694, 695, 701, 705, 717, 727, 728, 731, 735, 736, 740, 743, 751, 752, 753, 754, 756, 757, 761, 762, 766, 770, 780, 781, 787, 788, 789, 792, 793, 794, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 816, 819, 825, 840, 841, 852, 871, 872, 910, 942, 973, 974, 984, 1018, 1036, 1091, 1107, 1108, 1129, 1137, 1138, 1148, 1160, 1167, 1168], "lazyfram": [0, 1, 57, 58, 60, 62, 72, 73, 74, 75, 76, 78, 79, 80, 122, 123, 124, 125, 126, 127, 128, 131, 132, 138, 194, 207, 208, 223, 255, 279, 317, 395, 468, 705, 717, 815, 819, 1167, 1168], "express": [0, 51, 52, 53, 78, 79, 135, 138, 140, 150, 162, 164, 166, 174, 177, 196, 204, 208, 217, 222, 223, 226, 230, 244, 254, 255, 258, 265, 279, 286, 288, 289, 290, 291, 292, 295, 296, 297, 298, 299, 300, 303, 304, 311, 313, 314, 315, 317, 323, 326, 327, 328, 335, 336, 337, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 378, 379, 380, 381, 382, 384, 385, 389, 391, 392, 394, 395, 399, 401, 402, 403, 404, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 420, 425, 428, 433, 434, 436, 437, 438, 442, 443, 448, 450, 468, 474, 475, 477, 478, 479, 480, 484, 485, 486, 487, 488, 489, 491, 493, 495, 497, 499, 500, 501, 502, 503, 504, 507, 508, 509, 511, 512, 516, 517, 518, 519, 520, 522, 526, 527, 529, 544, 545, 546, 548, 550, 552, 553, 555, 557, 560, 561, 562, 563, 565, 567, 568, 569, 570, 571, 572, 573, 574, 581, 582, 583, 586, 587, 588, 589, 608, 609, 612, 614, 615, 618, 619, 621, 622, 624, 625, 626, 627, 629, 630, 632, 633, 634, 635, 636, 638, 639, 640, 641, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 664, 665, 666, 667, 668, 669, 670, 672, 676, 678, 680, 681, 682, 683, 684, 685, 687, 689, 691, 692, 693, 695, 696, 701, 704, 717, 722, 727, 728, 734, 735, 736, 739, 742, 745, 766, 773, 774, 777, 778, 779, 781, 786, 792, 793, 794, 797, 804, 816, 819, 859, 870, 880, 932, 946, 979, 980, 984, 1018, 1059, 1065, 1066, 1080, 1081, 1082, 1087, 1088, 1089, 1090, 1091, 1101, 1102, 1160], "selector": [0, 34, 151, 157, 159, 162, 200, 206, 208, 238, 246, 248, 279, 389, 705, 717, 724, 731, 732, 735, 761, 787, 816], "extend": [0, 100, 252, 279, 392, 705, 717, 825, 932, 1160], "function": [0, 34, 63, 72, 73, 74, 75, 76, 79, 81, 82, 98, 104, 107, 108, 109, 110, 113, 114, 115, 116, 117, 118, 119, 121, 122, 131, 132, 133, 134, 136, 146, 147, 155, 161, 169, 196, 200, 207, 208, 241, 245, 248, 249, 260, 265, 279, 289, 293, 335, 371, 386, 387, 388, 468, 476, 477, 478, 480, 500, 512, 516, 532, 533, 534, 535, 536, 537, 538, 540, 541, 542, 554, 616, 626, 630, 644, 645, 657, 658, 660, 666, 668, 669, 670, 680, 701, 705, 717, 727, 728, 730, 736, 756, 757, 761, 765, 768, 799, 804, 816, 826, 870, 911, 925, 926, 927, 928, 942, 1010, 1018, 1036, 1046, 1047, 1061, 1062, 1068, 1073, 1142, 1160, 1168], "data": [0, 1, 6, 19, 20, 22, 31, 32, 33, 34, 35, 36, 40, 51, 52, 53, 57, 63, 72, 73, 75, 80, 82, 87, 88, 92, 94, 97, 98, 99, 100, 101, 102, 103, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 126, 127, 131, 132, 133, 134, 136, 137, 138, 140, 146, 153, 163, 173, 174, 175, 176, 177, 178, 179, 190, 191, 192, 194, 196, 206, 207, 211, 216, 217, 218, 219, 228, 235, 240, 241, 245, 254, 257, 277, 279, 289, 290, 291, 295, 296, 297, 298, 299, 300, 303, 306, 307, 308, 309, 311, 313, 314, 315, 318, 319, 323, 326, 327, 328, 336, 337, 342, 343, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 375, 378, 379, 380, 381, 382, 384, 385, 391, 402, 403, 404, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 428, 433, 434, 436, 443, 448, 450, 456, 470, 475, 480, 507, 508, 511, 512, 520, 522, 523, 526, 527, 529, 531, 543, 544, 552, 553, 554, 560, 562, 563, 565, 567, 568, 569, 570, 572, 573, 574, 581, 586, 587, 588, 589, 597, 598, 599, 602, 605, 612, 614, 615, 616, 618, 619, 622, 625, 630, 632, 648, 649, 650, 651, 652, 653, 654, 664, 665, 667, 668, 669, 670, 678, 681, 691, 692, 693, 696, 701, 705, 717, 725, 726, 727, 736, 742, 743, 744, 745, 746, 747, 765, 771, 792, 816, 823, 824, 825, 836, 840, 841, 842, 844, 848, 850, 858, 859, 862, 871, 878, 879, 882, 883, 884, 885, 886, 888, 889, 890, 891, 895, 896, 897, 898, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 915, 918, 919, 920, 921, 922, 930, 931, 942, 948, 950, 951, 952, 954, 955, 957, 958, 959, 960, 961, 962, 966, 975, 976, 978, 985, 990, 992, 998, 1012, 1018, 1030, 1036, 1038, 1042, 1044, 1057, 1058, 1068, 1073, 1079, 1080, 1081, 1082, 1084, 1086, 1087, 1088, 1089, 1091, 1092, 1093, 1100, 1105, 1106, 1107, 1108, 1116, 1117, 1118, 1121, 1124, 1140, 1141, 1142, 1143, 1145, 1150, 1159, 1160, 1167], "type": [0, 1, 2, 3, 4, 6, 7, 8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 33, 34, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 78, 79, 87, 97, 99, 100, 101, 102, 103, 108, 109, 110, 112, 113, 117, 118, 119, 122, 123, 124, 126, 130, 131, 132, 133, 134, 137, 138, 147, 169, 173, 175, 176, 178, 179, 180, 191, 192, 196, 216, 235, 241, 243, 246, 279, 289, 291, 295, 296, 297, 298, 299, 300, 303, 311, 313, 314, 315, 318, 319, 320, 323, 326, 327, 328, 336, 337, 342, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 378, 379, 380, 382, 389, 391, 403, 405, 410, 411, 412, 413, 414, 415, 416, 417, 418, 433, 434, 436, 443, 448, 450, 468, 479, 480, 520, 522, 526, 527, 529, 531, 552, 553, 560, 562, 563, 565, 567, 568, 569, 570, 572, 573, 574, 581, 586, 587, 588, 589, 597, 612, 614, 615, 616, 622, 630, 632, 648, 649, 650, 651, 652, 653, 654, 656, 657, 664, 665, 666, 667, 668, 669, 670, 678, 681, 691, 692, 693, 696, 701, 705, 717, 727, 728, 734, 736, 743, 744, 746, 747, 751, 766, 771, 779, 787, 816, 823, 824, 836, 842, 844, 848, 850, 852, 859, 871, 878, 881, 882, 883, 884, 885, 886, 888, 889, 890, 891, 895, 896, 897, 898, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 915, 918, 919, 920, 922, 930, 940, 948, 950, 951, 952, 954, 955, 957, 958, 959, 960, 961, 962, 966, 975, 976, 978, 985, 990, 992, 1010, 1030, 1036, 1042, 1044, 1068, 1079, 1080, 1081, 1082, 1084, 1086, 1087, 1088, 1089, 1091, 1092, 1093, 1100, 1105, 1106, 1107, 1108, 1116, 1140, 1141, 1143, 1151, 1160, 1167], "config": [0, 72, 222, 254, 279, 654, 717, 727, 773, 792, 816], "except": [0, 131, 181, 193, 195, 233, 279, 656, 717, 752, 816, 819, 941, 971, 1131, 1141, 1150, 1160], "test": [0, 6, 110, 111, 113, 119, 717, 748, 755, 816], "util": [0, 104, 660, 717, 736, 816], "sql": [0, 32, 57, 61, 110, 111, 192, 226, 279, 461, 547, 685, 705, 717, 777, 816, 1003, 1065, 1160], "These": [1, 34, 110, 144, 245, 279, 378, 704, 705, 911, 918], "allow": [1, 33, 34, 51, 52, 53, 63, 82, 87, 98, 110, 122, 125, 126, 127, 128, 138, 140, 146, 190, 193, 194, 217, 218, 220, 240, 241, 246, 257, 279, 367, 374, 377, 456, 478, 480, 525, 544, 597, 598, 599, 705, 751, 752, 756, 757, 761, 787, 794, 816, 819, 907, 914, 917, 998, 1018, 1040, 1058, 1060, 1116, 1117, 1118, 1142, 1160, 1168], "you": [1, 16, 34, 39, 53, 62, 72, 79, 80, 97, 99, 100, 101, 103, 108, 109, 110, 111, 113, 114, 117, 118, 120, 122, 126, 127, 128, 144, 163, 175, 176, 178, 179, 190, 196, 204, 208, 216, 217, 218, 219, 237, 240, 245, 265, 279, 363, 364, 367, 370, 374, 377, 378, 389, 395, 410, 442, 468, 478, 479, 480, 525, 530, 531, 534, 535, 536, 537, 538, 540, 541, 542, 573, 644, 649, 654, 658, 670, 678, 681, 696, 705, 728, 732, 743, 744, 746, 747, 748, 755, 771, 779, 804, 816, 819, 825, 903, 904, 910, 914, 917, 918, 931, 946, 984, 1018, 1040, 1045, 1092, 1118, 1141, 1150, 1160, 1168], "regist": [1, 57, 59, 60, 61, 62, 73, 74, 75, 76, 139, 141, 705, 1167], "custom": [1, 33, 34, 73, 74, 75, 76, 139, 140, 141, 147, 196, 260, 265, 279, 293, 374, 377, 468, 476, 478, 480, 532, 533, 630, 668, 669, 670, 705, 756, 757, 799, 804, 816, 826, 914, 917, 1010, 1018, 1046, 1047, 1160, 1168], "dedic": [1, 98, 190, 218, 279], "namespac": [1, 278, 704, 717, 815, 1168], "underli": [1, 63, 82, 90, 97, 99, 100, 101, 103, 110, 117, 118, 120, 126, 135, 138, 140, 162, 163, 190, 191, 218, 235, 279, 312, 343, 344, 348, 352, 354, 355, 356, 358, 360, 362, 365, 368, 369, 370, 372, 379, 380, 381, 382, 525, 543, 561, 564, 705, 735, 816, 819, 825, 843, 853, 879, 880, 884, 888, 890, 891, 895, 897, 900, 902, 905, 908, 909, 910, 912, 919, 920, 921, 922, 931, 1040, 1057, 1068, 1080, 1083, 1136, 1141, 1160], "polar": [1, 279, 704, 705, 711, 717, 816, 819, 1160, 1167], "class": [1, 2, 3, 4, 5, 18, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 54, 55, 56, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 135, 136, 219, 241, 279, 692, 701, 705, 711, 717, 768, 816, 1140, 1141, 1160, 1167], "without": [1, 79, 104, 112, 115, 121, 123, 124, 128, 248, 249, 279, 293, 335, 371, 534, 535, 536, 537, 538, 540, 541, 542, 684, 705, 728, 816, 851, 854, 870, 911, 942, 1036, 1141, 1160], "requir": [1, 33, 34, 39, 53, 72, 98, 102, 110, 131, 132, 133, 134, 150, 155, 217, 241, 244, 279, 309, 386, 387, 388, 470, 480, 549, 597, 598, 599, 619, 681, 705, 722, 781, 786, 816, 841, 926, 927, 928, 1012, 1067, 1116, 1117, 1118, 1141, 1142, 1145, 1160], "subclass": [1, 279], "mixin": 1, "expr": [1, 72, 73, 74, 75, 76, 162, 164, 192, 193, 204, 208, 217, 222, 223, 254, 255, 279, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 700, 701, 705, 706, 707, 710, 711, 712, 713, 714, 735, 737, 751, 752, 767, 773, 774, 775, 778, 792, 793, 816, 870, 880, 907, 918, 933, 973, 974, 979, 980, 984, 988, 1004, 1008, 1066, 1080, 1085, 1109, 1132, 1160], "ar": [1, 13, 18, 21, 29, 31, 33, 34, 51, 52, 53, 62, 63, 72, 79, 80, 81, 82, 89, 96, 97, 98, 99, 100, 101, 102, 103, 104, 108, 109, 110, 111, 112, 113, 114, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 131, 132, 133, 134, 136, 138, 144, 146, 150, 155, 159, 161, 164, 168, 169, 173, 174, 175, 176, 177, 178, 179, 190, 192, 193, 194, 196, 200, 201, 206, 208, 216, 217, 218, 219, 222, 223, 224, 226, 230, 236, 241, 244, 249, 250, 254, 255, 258, 279, 289, 291, 317, 323, 329, 331, 333, 334, 371, 378, 383, 385, 386, 387, 388, 410, 412, 415, 416, 419, 421, 422, 423, 426, 429, 431, 450, 461, 468, 478, 479, 508, 512, 520, 523, 526, 527, 531, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 551, 554, 556, 557, 570, 571, 572, 579, 580, 581, 605, 610, 626, 627, 629, 635, 638, 639, 640, 641, 647, 649, 650, 652, 653, 672, 676, 684, 687, 689, 692, 693, 695, 697, 698, 700, 704, 705, 706, 707, 710, 711, 712, 713, 714, 717, 722, 727, 728, 732, 736, 737, 742, 743, 744, 745, 746, 747, 748, 751, 752, 755, 757, 761, 762, 766, 769, 771, 773, 774, 776, 777, 781, 786, 789, 792, 793, 794, 797, 816, 819, 823, 824, 825, 851, 859, 868, 869, 911, 918, 924, 925, 926, 927, 928, 939, 946, 950, 954, 955, 959, 960, 961, 962, 969, 970, 973, 992, 1003, 1010, 1036, 1038, 1042, 1053, 1065, 1070, 1073, 1089, 1090, 1098, 1099, 1100, 1118, 1124, 1130, 1141, 1142, 1150, 1152, 1154, 1156, 1160, 1161, 1164, 1165, 1166, 1168], "all": [1, 9, 15, 18, 21, 26, 29, 31, 34, 40, 51, 59, 72, 78, 97, 100, 102, 103, 108, 109, 112, 113, 114, 116, 119, 120, 122, 125, 126, 135, 136, 140, 144, 151, 156, 159, 165, 181, 186, 188, 190, 191, 194, 195, 200, 203, 204, 211, 217, 218, 219, 223, 229, 233, 238, 240, 246, 248, 249, 250, 255, 279, 290, 292, 310, 329, 335, 340, 341, 342, 389, 394, 400, 405, 407, 409, 412, 416, 422, 423, 425, 429, 441, 442, 448, 464, 468, 477, 478, 496, 499, 500, 501, 502, 503, 504, 510, 518, 523, 528, 533, 549, 555, 557, 562, 563, 569, 570, 571, 572, 577, 582, 583, 585, 591, 592, 593, 594, 609, 627, 646, 647, 649, 656, 658, 663, 680, 687, 688, 689, 695, 705, 711, 717, 724, 727, 728, 732, 734, 736, 738, 756, 757, 761, 766, 774, 779, 780, 787, 789, 793, 794, 816, 819, 870, 872, 875, 876, 878, 941, 948, 966, 971, 983, 984, 990, 1006, 1010, 1038, 1047, 1074, 1081, 1082, 1088, 1089, 1090, 1091, 1096, 1101, 1102, 1104, 1110, 1111, 1112, 1113, 1131, 1160, 1167, 1168], "support": [1, 33, 34, 39, 80, 97, 98, 99, 100, 101, 102, 103, 104, 110, 111, 112, 113, 117, 118, 119, 123, 124, 127, 135, 140, 144, 190, 191, 192, 193, 218, 219, 229, 230, 237, 241, 279, 462, 512, 555, 557, 586, 701, 705, 711, 751, 752, 780, 781, 816, 819, 1004, 1074, 1105, 1142, 1160, 1167], "target": [1, 32, 33, 34, 77, 113, 279, 568, 597, 598, 599, 819, 1087, 1116, 1117, 1118], "thi": [1, 6, 9, 14, 16, 29, 31, 33, 34, 37, 39, 43, 51, 52, 53, 57, 58, 62, 63, 72, 78, 79, 80, 82, 97, 98, 99, 100, 101, 102, 103, 104, 106, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 140, 142, 144, 146, 147, 148, 149, 150, 153, 155, 159, 160, 161, 163, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 184, 186, 188, 189, 190, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 206, 209, 210, 211, 216, 217, 218, 219, 220, 222, 223, 226, 227, 229, 231, 232, 235, 237, 240, 241, 244, 245, 246, 248, 249, 250, 251, 252, 254, 255, 256, 260, 261, 265, 278, 279, 289, 292, 293, 294, 303, 309, 316, 317, 319, 320, 323, 329, 335, 336, 342, 343, 355, 363, 364, 367, 370, 371, 374, 377, 381, 385, 391, 408, 409, 410, 413, 415, 417, 420, 425, 429, 437, 440, 442, 443, 447, 448, 450, 451, 456, 457, 458, 459, 460, 461, 463, 465, 468, 469, 470, 473, 474, 476, 478, 480, 484, 485, 486, 487, 488, 489, 499, 501, 502, 503, 504, 505, 506, 508, 512, 518, 520, 523, 524, 525, 526, 527, 530, 531, 532, 534, 535, 536, 537, 538, 540, 541, 542, 544, 546, 547, 548, 549, 550, 555, 556, 557, 562, 568, 575, 576, 577, 578, 579, 580, 584, 585, 591, 592, 593, 594, 600, 605, 609, 617, 619, 620, 621, 622, 626, 630, 631, 639, 642, 644, 649, 657, 658, 660, 666, 668, 670, 681, 684, 692, 695, 701, 705, 717, 718, 720, 721, 722, 723, 726, 727, 728, 732, 734, 736, 741, 742, 743, 744, 745, 746, 747, 749, 751, 752, 756, 757, 761, 762, 766, 768, 769, 771, 773, 774, 775, 777, 778, 779, 780, 781, 786, 787, 789, 792, 793, 794, 795, 796, 799, 800, 804, 815, 816, 819, 825, 826, 835, 841, 847, 850, 852, 853, 854, 859, 862, 870, 871, 878, 879, 880, 891, 903, 904, 907, 910, 911, 914, 917, 921, 925, 930, 931, 938, 942, 947, 951, 953, 954, 956, 957, 963, 965, 967, 968, 970, 979, 982, 984, 985, 989, 990, 992, 993, 998, 999, 1000, 1001, 1002, 1003, 1005, 1007, 1011, 1012, 1016, 1018, 1019, 1020, 1021, 1022, 1024, 1025, 1027, 1028, 1031, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1045, 1046, 1048, 1049, 1051, 1054, 1055, 1056, 1058, 1061, 1062, 1063, 1065, 1066, 1067, 1068, 1069, 1074, 1075, 1077, 1081, 1087, 1094, 1095, 1096, 1097, 1098, 1099, 1103, 1104, 1110, 1111, 1112, 1113, 1118, 1119, 1124, 1125, 1129, 1130, 1136, 1138, 1140, 1141, 1142, 1144, 1145, 1147, 1148, 1149, 1150, 1160, 1167, 1168], "featur": [1, 39, 43, 77, 279], "i": [1, 6, 14, 16, 18, 31, 33, 34, 35, 36, 37, 38, 43, 51, 52, 53, 57, 62, 63, 72, 77, 78, 79, 80, 82, 84, 86, 87, 89, 93, 95, 97, 98, 99, 100, 101, 102, 103, 106, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 140, 142, 143, 144, 148, 150, 153, 156, 159, 161, 163, 166, 170, 174, 175, 176, 177, 178, 179, 180, 181, 184, 185, 187, 189, 190, 191, 192, 193, 194, 195, 196, 198, 200, 201, 204, 206, 207, 208, 216, 217, 218, 219, 220, 223, 226, 229, 230, 231, 232, 233, 235, 240, 241, 244, 245, 246, 248, 249, 250, 251, 255, 257, 261, 265, 278, 279, 286, 289, 291, 292, 293, 294, 304, 317, 335, 336, 340, 341, 342, 344, 354, 367, 371, 374, 378, 386, 387, 388, 391, 395, 405, 408, 410, 426, 432, 441, 442, 445, 456, 461, 462, 467, 468, 473, 478, 479, 480, 484, 487, 488, 489, 512, 520, 523, 525, 526, 527, 530, 531, 533, 534, 535, 536, 537, 538, 540, 541, 542, 544, 545, 546, 547, 550, 551, 554, 555, 556, 557, 559, 561, 562, 563, 568, 569, 570, 572, 573, 577, 579, 580, 581, 582, 585, 586, 589, 591, 592, 593, 594, 597, 598, 599, 602, 605, 622, 623, 626, 628, 631, 636, 639, 641, 642, 644, 645, 649, 650, 652, 653, 658, 667, 670, 681, 682, 683, 684, 686, 692, 693, 694, 695, 701, 705, 720, 722, 726, 727, 728, 732, 734, 736, 739, 741, 742, 743, 744, 745, 746, 747, 750, 751, 752, 754, 756, 757, 761, 762, 766, 771, 774, 775, 777, 779, 780, 781, 782, 786, 787, 789, 790, 793, 796, 799, 800, 804, 816, 819, 823, 824, 825, 826, 851, 854, 859, 862, 870, 871, 872, 875, 876, 878, 880, 890, 907, 911, 914, 918, 925, 926, 927, 928, 930, 931, 935, 939, 940, 941, 942, 947, 949, 956, 963, 964, 965, 967, 968, 969, 971, 974, 983, 984, 987, 998, 1003, 1004, 1009, 1010, 1018, 1036, 1038, 1040, 1042, 1045, 1047, 1054, 1056, 1058, 1059, 1060, 1061, 1062, 1063, 1065, 1069, 1070, 1073, 1074, 1077, 1080, 1081, 1082, 1087, 1088, 1089, 1091, 1092, 1096, 1098, 1099, 1100, 1101, 1104, 1105, 1108, 1110, 1111, 1112, 1113, 1116, 1117, 1118, 1121, 1124, 1131, 1136, 1141, 1142, 1148, 1149, 1150, 1160, 1167, 1168], "primarili": 1, "intend": [1, 131, 132, 133, 134, 605, 1124], "us": [1, 12, 13, 14, 16, 21, 26, 31, 32, 34, 39, 42, 51, 53, 57, 58, 59, 60, 62, 63, 72, 79, 80, 81, 82, 98, 100, 101, 103, 105, 108, 109, 110, 111, 112, 113, 114, 116, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 147, 148, 151, 157, 159, 164, 165, 166, 169, 174, 175, 176, 177, 178, 179, 186, 188, 190, 191, 193, 196, 198, 200, 203, 204, 206, 207, 208, 216, 217, 218, 219, 220, 222, 223, 227, 230, 231, 232, 237, 238, 239, 240, 241, 245, 246, 248, 249, 250, 251, 254, 255, 258, 265, 279, 287, 289, 291, 293, 294, 304, 312, 313, 320, 324, 325, 335, 340, 341, 370, 371, 374, 377, 378, 381, 383, 386, 387, 388, 389, 394, 395, 409, 410, 426, 442, 456, 468, 478, 479, 480, 483, 512, 520, 523, 525, 527, 530, 531, 533, 534, 535, 536, 537, 538, 540, 541, 542, 544, 546, 548, 549, 554, 556, 557, 559, 561, 564, 565, 566, 568, 569, 571, 573, 574, 582, 586, 588, 590, 597, 598, 599, 602, 605, 623, 626, 627, 628, 629, 631, 637, 640, 641, 644, 646, 647, 649, 650, 651, 652, 653, 654, 658, 660, 667, 670, 671, 672, 675, 676, 678, 681, 682, 683, 684, 686, 687, 688, 689, 692, 693, 694, 696, 701, 704, 705, 716, 717, 720, 724, 727, 728, 731, 732, 736, 737, 738, 739, 741, 742, 743, 744, 746, 747, 748, 752, 754, 755, 761, 771, 773, 774, 778, 781, 782, 787, 789, 790, 792, 793, 797, 804, 816, 819, 823, 824, 825, 826, 843, 844, 852, 854, 860, 861, 870, 871, 875, 876, 910, 911, 914, 917, 918, 921, 924, 926, 927, 928, 933, 934, 939, 942, 945, 946, 969, 984, 998, 1010, 1017, 1018, 1036, 1038, 1040, 1042, 1045, 1047, 1058, 1061, 1062, 1063, 1066, 1067, 1073, 1077, 1080, 1083, 1084, 1087, 1088, 1090, 1092, 1093, 1101, 1105, 1107, 1116, 1117, 1118, 1121, 1124, 1132, 1137, 1139, 1140, 1141, 1142, 1149, 1150, 1160, 1167, 1168], "librari": [1, 90, 110, 113, 478, 705, 1168], "author": 1, "domain": [1, 569, 1088], "specif": [1, 29, 33, 34, 97, 99, 101, 103, 108, 111, 112, 113, 117, 118, 119, 123, 137, 138, 151, 190, 279, 374, 377, 597, 598, 599, 602, 724, 816, 819, 914, 917, 1116, 1117, 1118, 1121, 1160, 1168], "capabl": [1, 34, 279], "which": [1, 11, 21, 30, 31, 33, 34, 35, 36, 37, 38, 39, 51, 52, 53, 63, 72, 73, 74, 75, 76, 100, 108, 109, 110, 111, 112, 113, 122, 123, 124, 131, 132, 139, 141, 150, 151, 159, 163, 164, 174, 175, 176, 177, 178, 179, 193, 216, 240, 244, 246, 250, 279, 289, 317, 367, 371, 374, 378, 392, 410, 412, 416, 419, 421, 422, 423, 468, 480, 489, 530, 531, 534, 535, 536, 537, 538, 540, 541, 542, 581, 649, 650, 652, 653, 654, 692, 693, 695, 705, 722, 724, 732, 734, 743, 744, 746, 747, 752, 771, 775, 786, 787, 796, 816, 825, 907, 911, 914, 918, 931, 932, 946, 950, 955, 959, 960, 961, 962, 1010, 1045, 1061, 1100, 1141, 1160, 1168], "mai": [1, 33, 43, 53, 79, 80, 97, 99, 100, 101, 103, 108, 110, 112, 114, 117, 118, 123, 124, 125, 126, 128, 131, 133, 161, 163, 175, 193, 196, 216, 227, 241, 248, 249, 250, 279, 293, 335, 342, 343, 355, 367, 371, 378, 389, 467, 468, 478, 480, 488, 531, 534, 535, 536, 537, 538, 540, 541, 542, 548, 573, 644, 645, 649, 650, 652, 653, 658, 680, 692, 693, 705, 727, 728, 736, 743, 752, 756, 757, 771, 778, 789, 795, 799, 804, 816, 825, 853, 854, 870, 878, 879, 891, 907, 911, 918, 925, 931, 942, 1009, 1018, 1036, 1066, 1092, 1118, 1141, 1160, 1168], "exist": [1, 32, 33, 34, 72, 112, 123, 138, 245, 249, 254, 255, 279, 288, 311, 314, 315, 344, 705, 789, 792, 793, 816, 819, 880], "belong": [1, 175, 279, 743, 816], "core": [1, 241, 279, 1168], "cannot": [1, 108, 109, 113, 114, 119, 142, 196, 219, 220, 265, 279, 312, 389, 456, 479, 480, 544, 564, 588, 607, 670, 705, 779, 804, 816, 843, 998, 1018, 1058, 1083, 1107, 1160], "overrid": [1, 34, 97, 99, 100, 101, 102, 103, 108, 110, 111, 113, 117, 118, 119, 135, 136, 140, 142, 279, 479, 705, 816, 1017, 1160], "str": [1, 7, 8, 10, 11, 14, 17, 18, 21, 22, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 42, 51, 52, 53, 57, 58, 59, 60, 61, 62, 72, 73, 74, 75, 76, 77, 97, 98, 99, 100, 101, 103, 104, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 135, 136, 138, 139, 140, 141, 144, 150, 151, 154, 156, 157, 158, 159, 160, 161, 162, 166, 167, 168, 169, 171, 173, 174, 175, 176, 178, 179, 181, 183, 186, 188, 189, 190, 192, 193, 197, 198, 199, 200, 201, 202, 204, 206, 208, 210, 212, 213, 214, 215, 216, 217, 218, 220, 224, 227, 229, 230, 231, 232, 233, 236, 237, 238, 239, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 279, 286, 287, 288, 311, 313, 314, 315, 319, 336, 339, 345, 367, 370, 371, 374, 377, 378, 389, 391, 395, 397, 401, 403, 408, 410, 435, 436, 445, 446, 448, 462, 466, 468, 477, 479, 480, 488, 490, 491, 493, 500, 501, 502, 503, 504, 509, 512, 516, 518, 520, 526, 528, 530, 531, 534, 535, 536, 537, 538, 540, 541, 542, 549, 556, 557, 606, 607, 609, 612, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 637, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 662, 663, 666, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 680, 681, 682, 683, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 701, 705, 712, 722, 724, 727, 728, 729, 730, 731, 732, 734, 735, 736, 739, 741, 742, 743, 744, 746, 747, 749, 751, 752, 761, 762, 766, 768, 769, 770, 771, 775, 776, 778, 779, 780, 781, 786, 787, 788, 789, 794, 795, 796, 797, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 816, 819, 822, 848, 850, 871, 872, 881, 907, 910, 911, 914, 917, 918, 930, 934, 978, 979, 980, 990, 1010, 1017, 1027, 1028, 1036, 1041, 1061, 1062, 1125, 1127, 1137, 1138, 1139, 1148, 1160, 1164, 1167, 1168], "dt": [1, 72, 113, 119, 216, 279, 531, 649, 654, 705, 714, 771, 816, 819, 1166], "attempt": [1, 240, 279], "do": [1, 34, 51, 52, 53, 72, 78, 79, 80, 108, 122, 131, 132, 133, 134, 163, 175, 176, 178, 179, 193, 208, 216, 235, 245, 248, 279, 335, 442, 512, 531, 592, 593, 594, 678, 681, 696, 705, 727, 728, 734, 743, 744, 746, 747, 752, 756, 757, 766, 771, 779, 816, 819, 825, 870, 931, 984, 1111, 1112, 1113, 1141, 1150, 1160], "so": [1, 110, 111, 122, 142, 173, 175, 176, 178, 179, 208, 216, 279, 304, 317, 410, 445, 468, 480, 531, 592, 593, 594, 705, 743, 744, 746, 747, 771, 816, 987, 1111, 1112, 1113], "rais": [1, 17, 21, 33, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 108, 109, 113, 119, 122, 131, 133, 146, 208, 217, 279, 312, 370, 371, 378, 467, 488, 520, 561, 564, 581, 597, 598, 599, 602, 651, 667, 705, 843, 910, 911, 918, 1009, 1036, 1080, 1083, 1100, 1116, 1117, 1118, 1121, 1141, 1150, 1160], "an": [1, 29, 31, 32, 33, 34, 43, 51, 52, 73, 75, 76, 78, 79, 82, 87, 88, 90, 97, 108, 109, 110, 111, 112, 113, 115, 119, 120, 122, 124, 125, 136, 138, 140, 151, 152, 153, 161, 164, 169, 175, 176, 178, 179, 190, 191, 193, 196, 204, 208, 214, 216, 217, 235, 240, 245, 248, 249, 254, 265, 279, 288, 312, 318, 324, 325, 330, 331, 332, 333, 334, 335, 336, 344, 345, 367, 370, 374, 381, 392, 394, 395, 401, 403, 425, 437, 438, 442, 445, 467, 468, 477, 478, 480, 489, 499, 500, 519, 520, 527, 530, 531, 532, 534, 535, 536, 537, 538, 540, 541, 542, 561, 564, 569, 597, 598, 599, 602, 612, 618, 626, 632, 636, 649, 650, 652, 653, 655, 660, 664, 665, 667, 678, 680, 681, 684, 687, 692, 693, 695, 696, 701, 705, 717, 724, 725, 726, 727, 728, 734, 736, 739, 743, 744, 746, 747, 752, 757, 766, 771, 779, 789, 792, 794, 804, 816, 819, 843, 848, 858, 860, 861, 862, 866, 867, 868, 869, 870, 880, 914, 921, 925, 932, 956, 968, 979, 980, 984, 987, 1009, 1018, 1045, 1046, 1048, 1049, 1050, 1051, 1052, 1054, 1055, 1056, 1061, 1062, 1080, 1083, 1088, 1116, 1117, 1118, 1121, 1141, 1150, 1160, 1167], "attributeerror": 1, "howev": [1, 100, 110, 161, 196, 240, 279, 925, 1160], "can": [1, 16, 33, 34, 39, 42, 62, 63, 72, 81, 82, 88, 98, 100, 108, 109, 110, 113, 114, 119, 120, 122, 125, 127, 128, 136, 137, 138, 140, 142, 144, 150, 152, 159, 160, 169, 174, 175, 176, 177, 178, 179, 186, 188, 196, 204, 208, 216, 219, 222, 230, 240, 244, 245, 248, 254, 265, 279, 289, 293, 331, 334, 335, 363, 364, 367, 370, 378, 392, 410, 425, 442, 468, 480, 488, 496, 499, 501, 502, 503, 504, 512, 518, 520, 525, 531, 534, 535, 536, 537, 538, 540, 541, 542, 546, 549, 551, 554, 557, 572, 592, 593, 594, 597, 609, 635, 658, 660, 670, 695, 701, 704, 705, 716, 722, 727, 732, 734, 736, 743, 744, 746, 747, 771, 773, 775, 781, 786, 792, 795, 816, 819, 826, 854, 870, 871, 903, 904, 907, 910, 911, 918, 932, 946, 984, 1010, 1018, 1023, 1036, 1040, 1061, 1062, 1063, 1067, 1070, 1073, 1081, 1082, 1089, 1091, 1111, 1112, 1113, 1116, 1118, 1141, 1160, 1167], "other": [1, 21, 33, 34, 39, 62, 79, 108, 109, 110, 122, 131, 132, 133, 134, 159, 163, 170, 192, 193, 200, 201, 217, 219, 222, 223, 249, 252, 254, 255, 277, 279, 286, 290, 292, 304, 323, 339, 384, 385, 399, 402, 404, 410, 415, 428, 435, 440, 447, 457, 458, 459, 460, 465, 469, 475, 479, 484, 487, 495, 497, 507, 508, 511, 557, 608, 616, 618, 625, 627, 629, 638, 639, 640, 647, 649, 672, 676, 684, 687, 689, 705, 717, 728, 732, 751, 752, 761, 762, 773, 774, 789, 792, 793, 794, 816, 819, 825, 859, 874, 931, 954, 977, 982, 989, 999, 1000, 1001, 1002, 1007, 1011, 1060, 1143, 1151, 1159, 1160], "onli": [1, 15, 21, 29, 31, 34, 51, 57, 59, 63, 72, 77, 80, 82, 108, 109, 112, 114, 116, 120, 122, 123, 125, 126, 127, 128, 138, 140, 144, 147, 159, 163, 175, 178, 190, 192, 193, 196, 198, 208, 216, 218, 219, 232, 237, 239, 240, 249, 250, 265, 279, 287, 289, 291, 293, 304, 317, 322, 323, 367, 375, 389, 398, 425, 480, 499, 501, 502, 503, 504, 512, 518, 525, 534, 535, 536, 537, 538, 540, 541, 542, 609, 620, 649, 650, 670, 705, 727, 732, 743, 744, 746, 747, 748, 751, 752, 755, 771, 789, 804, 816, 823, 824, 825, 856, 859, 871, 907, 931, 937, 956, 1018, 1036, 1040, 1136, 1139, 1160, 1167, 1168], "gener": [1, 110, 111, 129, 135, 136, 137, 138, 140, 146, 155, 208, 220, 238, 240, 245, 279, 456, 544, 550, 632, 649, 652, 664, 665, 681, 692, 693, 705, 816, 998, 1058, 1069, 1137, 1160, 1168], "userwarn": 1, "pl": [1, 2, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 51, 52, 53, 54, 57, 58, 59, 60, 61, 62, 63, 64, 72, 73, 74, 75, 76, 80, 81, 82, 97, 98, 99, 100, 101, 102, 103, 104, 106, 108, 109, 110, 111, 112, 113, 114, 119, 122, 123, 124, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 144, 146, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 225, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 279, 285, 286, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 438, 439, 441, 442, 443, 444, 445, 446, 448, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 466, 468, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 579, 580, 581, 582, 583, 586, 587, 588, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 684, 685, 686, 687, 688, 689, 690, 692, 693, 694, 695, 696, 701, 705, 718, 720, 722, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 742, 743, 748, 749, 750, 751, 752, 753, 754, 755, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 769, 770, 771, 772, 773, 775, 777, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 794, 795, 797, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 816, 819, 822, 823, 824, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 847, 848, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 924, 925, 926, 927, 928, 931, 932, 933, 934, 935, 937, 940, 941, 942, 945, 946, 947, 948, 949, 950, 952, 953, 954, 955, 956, 958, 959, 960, 961, 962, 963, 965, 966, 967, 968, 970, 973, 974, 981, 983, 984, 985, 988, 990, 992, 998, 999, 1000, 1002, 1003, 1004, 1005, 1008, 1010, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1030, 1032, 1033, 1034, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1060, 1061, 1062, 1063, 1065, 1069, 1070, 1071, 1072, 1074, 1075, 1076, 1077, 1079, 1080, 1082, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1098, 1099, 1100, 1101, 1102, 1105, 1107, 1108, 1109, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1160, 1167, 1168], "register_expr_namespac": [1, 73, 75, 76], "greet": 1, "def": [1, 63, 73, 74, 75, 76, 136, 137, 138, 140, 144, 207, 245, 279, 286, 516, 569, 625, 669, 705, 728, 765, 816, 819, 1088, 1168], "__init__": [1, 2, 3, 4, 5, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 54, 55, 56, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 135, 1167], "self": [1, 58, 59, 60, 62, 73, 74, 75, 76, 78, 79, 152, 153, 156, 163, 181, 183, 184, 195, 197, 198, 199, 200, 202, 205, 206, 208, 210, 211, 213, 214, 220, 228, 229, 231, 232, 233, 238, 245, 247, 250, 251, 252, 256, 257, 279, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 310, 316, 317, 318, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 494, 495, 496, 497, 498, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 701, 705, 720, 721, 722, 723, 724, 726, 727, 728, 730, 731, 732, 734, 735, 736, 737, 738, 739, 740, 741, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 766, 767, 768, 769, 770, 773, 774, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 816, 825, 826, 848, 862, 931, 935, 943, 1016, 1017, 1018, 1029, 1033, 1034, 1039, 1061, 1062, 1063, 1075, 1147, 1151, 1160], "_expr": [1, 74], "hello": [1, 21, 58, 61, 592, 593, 594, 990, 1111, 1112, 1113], "return": [1, 10, 11, 29, 31, 34, 35, 36, 37, 38, 51, 52, 53, 57, 61, 63, 72, 73, 74, 75, 76, 77, 78, 79, 89, 91, 96, 97, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 124, 137, 147, 150, 152, 155, 158, 160, 161, 162, 163, 164, 165, 168, 169, 171, 173, 174, 175, 177, 178, 181, 183, 189, 190, 191, 192, 194, 195, 196, 203, 204, 206, 207, 208, 216, 217, 218, 219, 220, 233, 234, 240, 241, 244, 245, 246, 250, 254, 255, 263, 265, 268, 273, 279, 289, 291, 295, 296, 297, 298, 299, 300, 303, 304, 311, 313, 314, 315, 316, 326, 327, 328, 329, 336, 337, 342, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 375, 376, 378, 379, 380, 382, 391, 403, 406, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 422, 423, 429, 430, 433, 434, 436, 443, 445, 446, 448, 450, 451, 456, 466, 467, 474, 479, 489, 491, 496, 516, 520, 522, 526, 527, 529, 544, 545, 551, 552, 553, 560, 562, 563, 565, 567, 568, 569, 570, 572, 573, 574, 575, 576, 578, 579, 580, 581, 584, 586, 587, 588, 589, 605, 611, 612, 613, 614, 615, 617, 618, 620, 621, 622, 625, 626, 630, 632, 633, 634, 635, 636, 648, 649, 650, 651, 652, 653, 654, 660, 662, 664, 665, 667, 668, 669, 670, 678, 681, 684, 687, 690, 691, 692, 693, 695, 696, 705, 722, 725, 727, 728, 733, 734, 736, 743, 744, 746, 747, 748, 754, 755, 757, 765, 766, 771, 775, 779, 784, 785, 786, 787, 792, 793, 796, 802, 807, 812, 816, 823, 824, 825, 833, 834, 836, 837, 842, 844, 847, 851, 854, 858, 871, 872, 878, 882, 883, 884, 885, 886, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 915, 916, 918, 919, 920, 922, 925, 930, 931, 939, 941, 942, 948, 950, 951, 952, 954, 955, 957, 958, 959, 960, 961, 962, 966, 968, 970, 971, 975, 976, 978, 985, 987, 988, 990, 992, 993, 998, 1008, 1009, 1016, 1017, 1018, 1023, 1030, 1036, 1042, 1043, 1044, 1045, 1058, 1059, 1060, 1062, 1070, 1079, 1080, 1081, 1082, 1084, 1086, 1087, 1088, 1089, 1091, 1092, 1093, 1094, 1095, 1097, 1098, 1099, 1100, 1103, 1105, 1106, 1107, 1108, 1124, 1131, 1133, 1144, 1146, 1147, 1148, 1151, 1160, 1167, 1168], "lit": [1, 288, 311, 410, 425, 499, 644, 658, 678, 681, 695, 696, 705, 934, 1160], "alia": [1, 14, 72, 74, 76, 175, 195, 208, 216, 247, 254, 279, 286, 290, 311, 313, 314, 315, 316, 330, 331, 332, 333, 334, 336, 338, 342, 343, 344, 345, 348, 349, 350, 351, 352, 353, 355, 356, 357, 359, 360, 361, 362, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 384, 385, 395, 397, 399, 402, 404, 408, 410, 414, 415, 418, 425, 428, 429, 430, 438, 442, 457, 458, 459, 460, 475, 477, 479, 480, 484, 485, 486, 487, 489, 492, 495, 497, 499, 500, 507, 508, 511, 513, 517, 520, 523, 525, 545, 561, 563, 566, 568, 569, 573, 574, 586, 587, 588, 589, 590, 595, 596, 606, 607, 608, 616, 617, 618, 624, 625, 632, 633, 634, 637, 638, 639, 640, 644, 645, 649, 654, 655, 658, 659, 669, 670, 680, 681, 687, 692, 695, 705, 743, 749, 755, 771, 788, 792, 816, 871, 879, 881, 887, 907, 910, 914, 916, 971, 984, 1017, 1036, 1041, 1087, 1088, 1107, 1108, 1160], "hi": 1, "goodby": 1, "say\u014dnara": 1, "bye": 1, "world": [1, 21, 58, 61, 592, 593, 594, 603, 990, 1111, 1112, 1113, 1122], "select": [1, 32, 57, 58, 59, 72, 73, 74, 75, 107, 108, 109, 110, 111, 112, 114, 116, 120, 122, 128, 137, 189, 193, 196, 204, 207, 217, 223, 229, 242, 247, 250, 279, 285, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 314, 315, 316, 319, 321, 322, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 343, 344, 345, 349, 353, 354, 355, 356, 357, 359, 361, 363, 364, 366, 367, 370, 373, 378, 381, 382, 383, 386, 387, 388, 389, 390, 391, 392, 396, 398, 400, 405, 407, 408, 409, 411, 412, 415, 416, 424, 425, 426, 427, 429, 431, 432, 433, 434, 435, 436, 438, 439, 441, 442, 443, 444, 445, 448, 449, 450, 452, 453, 454, 455, 456, 463, 464, 468, 470, 471, 472, 473, 474, 478, 480, 481, 482, 483, 494, 496, 498, 499, 505, 506, 509, 510, 511, 514, 515, 519, 521, 522, 523, 524, 525, 526, 527, 528, 529, 533, 539, 543, 544, 545, 546, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 565, 567, 568, 569, 570, 571, 572, 581, 588, 589, 592, 593, 594, 597, 600, 601, 603, 604, 606, 607, 610, 613, 614, 615, 617, 619, 620, 621, 622, 623, 626, 628, 631, 633, 634, 635, 636, 637, 639, 641, 642, 643, 644, 645, 646, 654, 656, 657, 658, 659, 660, 662, 666, 671, 673, 674, 675, 677, 680, 681, 685, 686, 687, 688, 690, 694, 701, 705, 729, 749, 752, 765, 774, 775, 780, 788, 794, 816, 819, 840, 841, 910, 973, 974, 984, 1061, 1062, 1074, 1091, 1116, 1132, 1160, 1167], "shape": [1, 2, 12, 13, 14, 15, 17, 18, 19, 20, 22, 23, 24, 25, 26, 54, 57, 58, 59, 61, 63, 64, 72, 73, 74, 75, 76, 80, 81, 82, 94, 97, 98, 99, 100, 101, 102, 103, 104, 122, 128, 138, 140, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 169, 171, 172, 174, 175, 180, 181, 183, 184, 185, 186, 188, 189, 192, 193, 196, 197, 198, 199, 200, 201, 202, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 220, 222, 226, 229, 230, 231, 232, 233, 234, 236, 238, 239, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 279, 285, 286, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 438, 439, 441, 442, 443, 444, 445, 446, 448, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 466, 468, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482, 483, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 579, 580, 581, 582, 583, 586, 587, 588, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 652, 654, 655, 656, 657, 658, 659, 660, 662, 664, 665, 666, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 681, 684, 685, 686, 687, 688, 689, 690, 692, 693, 694, 695, 696, 701, 705, 720, 722, 724, 725, 727, 728, 730, 731, 732, 735, 736, 737, 738, 739, 740, 742, 743, 748, 750, 751, 752, 753, 755, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 769, 770, 771, 773, 775, 777, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 794, 795, 797, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 816, 819, 822, 825, 827, 828, 829, 830, 831, 832, 835, 836, 837, 838, 839, 840, 841, 847, 848, 850, 852, 853, 855, 856, 858, 859, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 875, 876, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 894, 895, 896, 897, 898, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 926, 927, 928, 931, 932, 933, 934, 935, 937, 940, 941, 942, 945, 946, 948, 950, 952, 954, 955, 958, 959, 960, 961, 962, 966, 968, 973, 974, 981, 983, 984, 985, 988, 990, 992, 998, 999, 1000, 1002, 1003, 1004, 1005, 1008, 1010, 1016, 1017, 1018, 1023, 1030, 1032, 1033, 1034, 1036, 1038, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1061, 1062, 1065, 1069, 1070, 1071, 1072, 1074, 1075, 1076, 1080, 1082, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1098, 1099, 1100, 1101, 1102, 1105, 1107, 1108, 1109, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1129, 1131, 1132, 1133, 1134, 1135, 1137, 1138, 1139, 1143, 1144, 1145, 1146, 1147, 1148, 1151, 1160, 1167], "3": [1, 2, 12, 13, 15, 17, 18, 19, 20, 22, 23, 24, 25, 26, 30, 31, 33, 34, 35, 36, 37, 38, 39, 54, 57, 59, 60, 62, 64, 72, 73, 74, 75, 76, 80, 82, 97, 98, 99, 100, 101, 102, 103, 104, 111, 113, 119, 122, 128, 130, 131, 132, 133, 134, 137, 138, 146, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 166, 167, 169, 170, 171, 172, 173, 174, 175, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 225, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 279, 286, 287, 288, 289, 291, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 318, 319, 320, 321, 322, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 343, 344, 345, 349, 351, 352, 354, 355, 360, 362, 367, 369, 370, 371, 372, 374, 376, 377, 378, 379, 381, 382, 383, 384, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 424, 425, 426, 428, 429, 430, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 466, 468, 471, 472, 473, 474, 475, 477, 479, 480, 495, 496, 497, 499, 500, 501, 502, 503, 504, 507, 509, 510, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 554, 556, 557, 558, 561, 562, 565, 566, 568, 569, 570, 571, 573, 574, 577, 582, 585, 586, 587, 588, 589, 590, 591, 598, 602, 606, 607, 608, 609, 611, 612, 613, 617, 620, 621, 622, 624, 625, 632, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 662, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 675, 676, 678, 680, 681, 684, 685, 686, 687, 688, 689, 690, 692, 693, 694, 695, 696, 701, 705, 720, 722, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 739, 740, 742, 743, 748, 749, 750, 751, 752, 753, 754, 755, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 769, 770, 771, 772, 773, 775, 777, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 794, 795, 797, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 816, 819, 822, 825, 827, 829, 830, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 847, 848, 850, 852, 853, 855, 856, 857, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 879, 880, 881, 884, 885, 887, 888, 890, 892, 893, 894, 896, 898, 899, 900, 902, 906, 908, 910, 911, 912, 914, 916, 917, 918, 920, 921, 925, 926, 927, 928, 931, 932, 933, 934, 935, 937, 940, 941, 942, 945, 946, 948, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 965, 966, 969, 970, 979, 981, 983, 984, 985, 988, 992, 998, 999, 1000, 1002, 1003, 1004, 1005, 1008, 1010, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1030, 1032, 1033, 1034, 1036, 1037, 1038, 1041, 1042, 1043, 1044, 1045, 1047, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1060, 1061, 1062, 1063, 1065, 1069, 1071, 1072, 1073, 1074, 1075, 1077, 1081, 1084, 1085, 1087, 1088, 1089, 1090, 1092, 1093, 1096, 1101, 1104, 1105, 1109, 1110, 1117, 1121, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1140, 1141, 1142, 1144, 1145, 1146, 1147, 1148, 1149, 1151, 1160, 1167, 1168], "1": [1, 2, 12, 13, 14, 15, 17, 18, 19, 20, 22, 23, 24, 25, 26, 30, 31, 33, 34, 35, 36, 37, 38, 39, 53, 54, 57, 58, 59, 60, 61, 62, 64, 72, 73, 74, 75, 76, 80, 97, 98, 99, 100, 101, 102, 103, 104, 108, 109, 112, 113, 114, 119, 122, 123, 124, 127, 128, 130, 131, 132, 133, 134, 135, 138, 140, 146, 148, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 279, 285, 286, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 316, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 348, 349, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 418, 419, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 438, 439, 441, 442, 443, 444, 445, 446, 448, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 466, 468, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482, 483, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 581, 582, 583, 588, 589, 590, 592, 593, 594, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 631, 632, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 682, 683, 684, 685, 686, 687, 688, 689, 690, 692, 693, 694, 695, 701, 705, 720, 722, 724, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 742, 743, 748, 749, 750, 751, 752, 753, 755, 758, 759, 760, 761, 763, 764, 765, 766, 767, 769, 770, 771, 772, 773, 775, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 794, 795, 797, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 816, 819, 822, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 847, 848, 852, 853, 855, 856, 857, 859, 862, 863, 864, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 882, 883, 884, 885, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 924, 926, 927, 928, 931, 932, 933, 934, 935, 937, 940, 941, 942, 945, 946, 948, 950, 952, 953, 954, 955, 956, 958, 959, 960, 961, 962, 963, 965, 966, 968, 970, 973, 974, 981, 983, 984, 985, 987, 988, 992, 998, 999, 1000, 1002, 1003, 1004, 1005, 1008, 1010, 1016, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1032, 1033, 1034, 1036, 1037, 1038, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1065, 1066, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1079, 1087, 1089, 1090, 1091, 1092, 1093, 1101, 1107, 1108, 1124, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1160, 1167, 1168], "2": [1, 2, 12, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 30, 31, 33, 34, 35, 36, 37, 38, 39, 54, 57, 59, 60, 62, 64, 72, 73, 74, 75, 76, 80, 97, 98, 99, 100, 101, 102, 103, 104, 111, 122, 128, 129, 130, 131, 132, 133, 134, 137, 138, 140, 146, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 181, 182, 183, 184, 186, 187, 188, 189, 190, 192, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 225, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 279, 285, 286, 287, 288, 290, 292, 294, 301, 303, 304, 305, 306, 307, 308, 309, 310, 316, 318, 320, 321, 322, 323, 328, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 342, 344, 345, 348, 349, 350, 352, 353, 356, 357, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 373, 374, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 433, 434, 435, 436, 438, 439, 441, 442, 443, 444, 445, 446, 448, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 466, 468, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 491, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 523, 524, 525, 526, 527, 528, 529, 530, 531, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 554, 555, 556, 557, 558, 560, 563, 566, 568, 570, 571, 572, 573, 574, 579, 580, 581, 582, 583, 586, 588, 589, 590, 592, 593, 594, 595, 596, 597, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 654, 655, 656, 657, 658, 659, 660, 662, 664, 665, 666, 667, 669, 670, 671, 673, 674, 675, 677, 680, 684, 685, 686, 687, 688, 690, 693, 694, 695, 701, 705, 720, 722, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 742, 743, 748, 749, 751, 753, 754, 755, 757, 758, 759, 760, 761, 762, 763, 765, 766, 767, 769, 770, 771, 772, 773, 775, 777, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 794, 795, 797, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 816, 819, 822, 825, 828, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 847, 852, 853, 855, 856, 857, 858, 862, 863, 865, 867, 868, 869, 870, 871, 872, 873, 874, 878, 880, 882, 883, 886, 888, 892, 893, 894, 899, 900, 902, 903, 904, 909, 910, 911, 915, 918, 920, 921, 922, 924, 925, 926, 927, 928, 931, 932, 933, 934, 935, 937, 940, 941, 942, 945, 946, 948, 950, 952, 953, 954, 955, 956, 958, 959, 960, 961, 962, 963, 965, 966, 970, 981, 983, 984, 985, 988, 990, 992, 998, 999, 1000, 1002, 1003, 1004, 1005, 1008, 1010, 1013, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1032, 1033, 1034, 1036, 1037, 1038, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1060, 1061, 1062, 1063, 1065, 1069, 1071, 1073, 1074, 1075, 1076, 1077, 1079, 1082, 1087, 1089, 1090, 1091, 1093, 1100, 1101, 1102, 1107, 1108, 1111, 1112, 1113, 1116, 1118, 1119, 1120, 1122, 1123, 1129, 1130, 1131, 1132, 1133, 1134, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1144, 1145, 1146, 1147, 1148, 1149, 1151, 1160, 1167, 1168], "column_0": [1, 196, 245, 279], "register_dataframe_namespac": [1, 74, 75, 76], "split": [1, 34, 73, 191, 279, 588, 589, 1107, 1108], "splitfram": [1, 73], "df": [1, 12, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 30, 31, 33, 34, 35, 36, 37, 38, 39, 54, 57, 58, 73, 74, 97, 98, 99, 100, 101, 102, 103, 104, 109, 110, 111, 122, 136, 138, 144, 146, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 169, 171, 172, 173, 174, 175, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 225, 226, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 279, 285, 286, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 316, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 438, 439, 441, 442, 443, 444, 445, 448, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 468, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482, 483, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 579, 580, 581, 582, 583, 586, 587, 588, 589, 590, 592, 593, 594, 595, 596, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 650, 654, 655, 656, 657, 658, 659, 660, 662, 665, 666, 669, 670, 671, 672, 673, 674, 675, 676, 677, 680, 684, 685, 686, 687, 688, 689, 690, 693, 694, 695, 701, 705, 743, 771, 775, 788, 789, 802, 804, 812, 816, 819, 840, 841, 852, 910, 973, 974, 984, 1091, 1102, 1107, 1108, 1138, 1160, 1168], "_df": [1, 73], "by_alternate_row": 1, "list": [1, 2, 15, 33, 34, 42, 57, 61, 72, 73, 75, 78, 79, 97, 99, 100, 101, 103, 104, 106, 107, 108, 109, 111, 112, 113, 114, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 136, 137, 138, 140, 154, 157, 160, 161, 162, 166, 172, 174, 175, 183, 190, 203, 206, 217, 218, 219, 222, 230, 236, 237, 245, 246, 247, 248, 254, 258, 259, 279, 287, 309, 336, 391, 397, 407, 476, 478, 480, 489, 490, 512, 520, 526, 527, 532, 533, 534, 535, 536, 537, 538, 540, 541, 542, 556, 557, 569, 587, 606, 607, 612, 616, 635, 639, 650, 653, 655, 663, 665, 667, 670, 685, 687, 693, 705, 729, 733, 735, 739, 742, 743, 773, 781, 787, 788, 792, 794, 797, 798, 816, 819, 841, 857, 871, 925, 930, 935, 938, 942, 943, 954, 1036, 1042, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1054, 1055, 1056, 1059, 1088, 1106, 1132, 1140, 1143, 1160, 1168], "with_row_count": [1, 279, 479, 534, 535, 537, 540, 541, 542, 705, 816, 1062, 1160], "name": [1, 19, 23, 25, 31, 32, 34, 37, 51, 58, 59, 60, 61, 62, 73, 74, 75, 76, 80, 86, 97, 99, 100, 101, 102, 103, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 133, 134, 135, 136, 138, 139, 140, 141, 150, 151, 154, 157, 158, 159, 162, 166, 167, 168, 171, 173, 174, 177, 189, 190, 192, 193, 196, 200, 201, 206, 208, 212, 217, 218, 219, 221, 222, 223, 230, 236, 238, 240, 243, 244, 245, 246, 247, 248, 249, 254, 255, 256, 257, 258, 279, 288, 293, 311, 313, 314, 315, 336, 389, 410, 419, 421, 422, 423, 425, 468, 477, 480, 488, 490, 492, 512, 518, 520, 528, 557, 569, 570, 606, 607, 609, 626, 627, 628, 629, 631, 633, 634, 635, 638, 639, 640, 641, 643, 646, 647, 649, 656, 662, 663, 671, 672, 675, 676, 679, 681, 682, 683, 684, 687, 688, 689, 690, 692, 695, 701, 705, 722, 724, 729, 731, 732, 735, 739, 742, 745, 751, 752, 761, 762, 769, 772, 773, 774, 775, 781, 786, 787, 788, 789, 792, 793, 794, 795, 797, 816, 819, 822, 858, 871, 1010, 1036, 1041, 1087, 1088, 1089, 1101, 1125, 1127, 1137, 1138, 1142, 1160, 1167, 1168], "n": [1, 14, 15, 18, 26, 31, 38, 42, 44, 51, 59, 60, 73, 74, 75, 76, 106, 108, 109, 122, 147, 152, 163, 175, 181, 190, 191, 195, 196, 218, 219, 220, 226, 227, 231, 233, 234, 237, 239, 251, 263, 273, 279, 316, 335, 338, 343, 344, 351, 376, 381, 392, 406, 430, 439, 446, 456, 457, 461, 466, 468, 513, 516, 526, 540, 542, 544, 547, 548, 554, 559, 573, 574, 582, 588, 589, 592, 593, 599, 611, 613, 617, 618, 623, 625, 641, 649, 650, 651, 652, 653, 654, 660, 662, 678, 681, 682, 683, 686, 690, 694, 696, 705, 725, 727, 743, 748, 755, 777, 778, 782, 784, 785, 790, 802, 812, 816, 819, 825, 847, 858, 870, 873, 879, 880, 887, 916, 921, 931, 932, 941, 971, 981, 988, 998, 999, 1003, 1008, 1010, 1032, 1054, 1056, 1058, 1065, 1066, 1073, 1077, 1092, 1093, 1101, 1107, 1108, 1118, 1131, 1133, 1139, 1144, 1149, 1160, 1167, 1168], "filter": [1, 73, 112, 122, 123, 128, 159, 186, 187, 188, 208, 265, 279, 488, 490, 566, 590, 624, 658, 695, 705, 732, 736, 749, 804, 816, 819, 1061, 1160], "col": [1, 14, 31, 34, 51, 72, 73, 74, 75, 101, 103, 122, 136, 138, 166, 174, 175, 187, 189, 194, 196, 204, 207, 208, 216, 217, 222, 230, 247, 248, 254, 258, 279, 285, 286, 287, 288, 289, 290, 291, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 402, 403, 404, 408, 409, 410, 411, 414, 415, 418, 419, 421, 424, 425, 426, 427, 428, 431, 432, 433, 434, 435, 436, 438, 439, 441, 442, 443, 444, 445, 448, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 468, 470, 471, 472, 473, 474, 475, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 494, 495, 497, 498, 499, 505, 506, 507, 508, 509, 511, 512, 513, 514, 515, 516, 517, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 530, 531, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 550, 551, 552, 553, 554, 556, 557, 558, 559, 560, 561, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 579, 580, 581, 582, 583, 586, 587, 588, 589, 590, 592, 593, 594, 595, 596, 597, 600, 601, 603, 604, 605, 606, 607, 608, 610, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 636, 638, 639, 640, 644, 645, 646, 654, 657, 658, 659, 660, 661, 666, 671, 675, 679, 680, 688, 695, 705, 726, 739, 742, 743, 749, 754, 765, 771, 773, 781, 788, 792, 794, 797, 816, 819, 840, 841, 852, 907, 910, 973, 974, 984, 1042, 1061, 1062, 1091, 1116, 1160, 1168], "0": [1, 12, 13, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 34, 39, 53, 54, 57, 62, 72, 73, 74, 76, 80, 82, 98, 108, 109, 110, 111, 113, 114, 116, 119, 120, 122, 125, 126, 127, 128, 130, 135, 136, 137, 138, 140, 146, 147, 149, 151, 152, 153, 155, 156, 157, 160, 164, 165, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 184, 185, 189, 190, 191, 192, 194, 196, 197, 198, 199, 202, 203, 204, 205, 208, 209, 210, 214, 218, 219, 220, 221, 222, 227, 229, 230, 231, 232, 238, 239, 240, 241, 242, 245, 248, 250, 251, 254, 256, 258, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 279, 285, 287, 288, 290, 293, 295, 296, 297, 298, 299, 300, 303, 304, 305, 317, 318, 321, 322, 324, 325, 326, 327, 328, 330, 335, 336, 337, 340, 341, 352, 356, 357, 359, 360, 366, 370, 372, 373, 378, 384, 385, 386, 387, 388, 390, 392, 393, 394, 395, 398, 399, 402, 404, 405, 409, 412, 413, 416, 417, 419, 420, 421, 422, 423, 425, 426, 428, 433, 434, 437, 438, 440, 442, 445, 447, 451, 453, 465, 468, 469, 471, 472, 473, 475, 476, 478, 479, 481, 482, 483, 489, 494, 495, 497, 499, 505, 506, 507, 508, 510, 511, 513, 516, 517, 520, 521, 522, 523, 530, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 548, 549, 551, 552, 553, 554, 558, 559, 562, 563, 568, 569, 575, 576, 577, 578, 584, 585, 591, 597, 599, 608, 610, 614, 615, 616, 618, 623, 624, 626, 630, 632, 633, 634, 635, 636, 637, 638, 639, 641, 643, 644, 649, 651, 655, 658, 664, 665, 668, 670, 673, 674, 678, 679, 680, 681, 685, 691, 692, 693, 694, 695, 696, 701, 705, 721, 724, 725, 726, 731, 733, 737, 738, 741, 742, 743, 744, 745, 746, 747, 750, 751, 754, 756, 757, 760, 764, 766, 767, 768, 772, 773, 778, 779, 781, 782, 790, 792, 794, 795, 796, 797, 799, 800, 801, 803, 804, 805, 806, 807, 808, 809, 810, 811, 816, 819, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 837, 848, 853, 855, 856, 858, 860, 861, 863, 864, 865, 870, 871, 872, 874, 875, 876, 888, 893, 894, 895, 896, 897, 898, 900, 905, 906, 910, 912, 913, 918, 924, 926, 927, 928, 933, 937, 940, 942, 945, 950, 951, 953, 955, 957, 959, 960, 961, 962, 968, 969, 979, 982, 984, 987, 989, 993, 1007, 1010, 1011, 1016, 1020, 1021, 1032, 1036, 1037, 1038, 1045, 1046, 1047, 1049, 1050, 1052, 1053, 1054, 1056, 1057, 1058, 1066, 1070, 1071, 1072, 1076, 1077, 1079, 1081, 1082, 1087, 1088, 1091, 1094, 1095, 1096, 1097, 1103, 1104, 1110, 1116, 1118, 1134, 1135, 1137, 1142, 1143, 1147, 1149, 1150, 1160, 1168], "drop": [1, 100, 158, 159, 196, 246, 254, 279, 338, 340, 341, 439, 441, 520, 705, 732, 787, 792, 816, 873, 875, 876, 981, 983, 1036, 1160], "aaa": [1, 34, 279, 561, 606, 607, 1080], "bbb": [1, 34, 279, 606, 607, 819], "ccc": [1, 34, 279, 606, 607], "ddd": [1, 34, 279, 606, 607], "eee": [1, 34, 279, 819], "fff": 1, "column": [1, 18, 19, 22, 23, 25, 33, 34, 37, 42, 63, 72, 73, 80, 82, 84, 86, 97, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 131, 132, 133, 134, 138, 150, 151, 155, 157, 158, 159, 160, 162, 166, 167, 168, 171, 173, 174, 175, 176, 177, 178, 179, 183, 184, 189, 190, 192, 193, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 216, 217, 218, 219, 221, 222, 223, 224, 230, 231, 232, 236, 238, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 258, 279, 288, 289, 291, 303, 323, 329, 336, 344, 346, 347, 348, 352, 354, 355, 356, 358, 360, 362, 365, 368, 369, 372, 374, 375, 377, 379, 380, 382, 389, 391, 395, 397, 410, 425, 429, 435, 443, 463, 467, 468, 479, 480, 486, 488, 490, 499, 501, 502, 503, 504, 512, 518, 520, 524, 526, 527, 531, 534, 535, 536, 537, 538, 540, 541, 542, 549, 556, 557, 567, 588, 589, 597, 598, 599, 600, 602, 609, 624, 626, 627, 628, 629, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 656, 657, 658, 660, 661, 662, 663, 664, 665, 666, 668, 669, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 701, 705, 722, 724, 731, 732, 733, 735, 739, 742, 743, 744, 745, 746, 747, 751, 752, 757, 758, 759, 760, 761, 763, 764, 765, 767, 769, 771, 772, 773, 774, 775, 776, 781, 782, 783, 786, 787, 788, 789, 790, 792, 793, 794, 795, 797, 804, 816, 819, 823, 824, 851, 853, 859, 871, 882, 883, 884, 888, 890, 891, 895, 897, 900, 902, 905, 908, 909, 912, 914, 915, 917, 919, 920, 922, 930, 939, 977, 985, 1005, 1009, 1036, 1042, 1067, 1086, 1107, 1108, 1116, 1117, 1118, 1119, 1121, 1129, 1137, 1138, 1160, 1168], "txt": [1, 14, 122], "utf8": [1, 21, 33, 100, 108, 109, 122, 135, 137, 140, 151, 160, 161, 162, 169, 221, 240, 279, 313, 374, 377, 448, 479, 560, 565, 567, 568, 569, 570, 572, 586, 587, 588, 589, 597, 598, 599, 600, 602, 605, 640, 705, 724, 733, 735, 772, 816, 819, 914, 917, 967, 990, 1079, 1084, 1086, 1087, 1088, 1089, 1091, 1105, 1106, 1107, 1108, 1116, 1117, 1118, 1119, 1121, 1124, 1160], "register_lazyframe_namespac": [1, 73, 74, 76], "dtypeoper": [1, 75], "ldf": [1, 75, 797, 798, 800, 801, 803, 805, 806, 807, 808, 809, 810, 811], "_ldf": [1, 75], "upcast_integer_typ": [1, 75], "with_column": [1, 14, 75, 175, 207, 216, 248, 255, 279, 286, 288, 304, 313, 318, 320, 323, 331, 334, 336, 338, 342, 348, 350, 351, 352, 360, 362, 367, 368, 369, 370, 371, 372, 374, 376, 377, 379, 380, 384, 385, 393, 394, 399, 402, 404, 405, 409, 410, 414, 418, 419, 421, 422, 423, 425, 428, 442, 457, 458, 459, 460, 461, 475, 477, 479, 480, 495, 497, 499, 500, 501, 502, 503, 504, 507, 508, 512, 513, 516, 517, 518, 520, 523, 530, 531, 534, 535, 536, 537, 538, 540, 541, 542, 547, 561, 566, 569, 570, 573, 574, 579, 580, 582, 583, 586, 587, 588, 589, 590, 595, 596, 605, 608, 609, 616, 618, 625, 627, 629, 638, 640, 647, 650, 655, 665, 669, 672, 676, 685, 689, 693, 695, 701, 705, 743, 765, 771, 793, 816, 819, 852, 871, 910, 984, 1036, 1160], "tp": [1, 75], "cast": [1, 33, 74, 75, 97, 131, 132, 133, 134, 169, 175, 176, 178, 179, 207, 216, 241, 254, 279, 292, 320, 333, 334, 343, 374, 377, 479, 511, 516, 525, 531, 571, 572, 605, 610, 616, 640, 685, 705, 743, 744, 746, 747, 765, 771, 792, 816, 819, 852, 854, 868, 869, 879, 914, 917, 1040, 1090, 1091, 1124, 1130, 1138, 1143, 1160], "int64": [1, 2, 33, 34, 37, 74, 75, 80, 108, 160, 169, 175, 176, 178, 179, 194, 207, 216, 221, 235, 241, 279, 306, 307, 308, 309, 333, 334, 349, 353, 357, 359, 361, 366, 373, 389, 516, 525, 531, 571, 610, 616, 632, 656, 664, 665, 667, 681, 687, 705, 726, 733, 743, 744, 746, 747, 749, 754, 765, 771, 772, 775, 816, 838, 839, 840, 841, 868, 869, 885, 889, 896, 898, 901, 906, 913, 1040, 1060, 1130, 1141, 1142, 1143, 1160], "int8": [1, 75, 169, 279, 333, 334, 610, 678, 681, 696, 705, 868, 869, 873, 1017, 1043, 1130, 1147, 1160], "int16": [1, 75, 333, 334, 610, 705, 819, 868, 869, 1017, 1130, 1139, 1160], "int32": [1, 75, 80, 97, 100, 113, 137, 138, 175, 176, 178, 179, 191, 216, 279, 318, 355, 382, 531, 581, 616, 681, 705, 743, 744, 746, 747, 771, 816, 819, 891, 922, 1016, 1100, 1143, 1160], "b": [1, 30, 31, 33, 35, 36, 39, 59, 60, 62, 64, 75, 80, 97, 98, 99, 100, 101, 102, 103, 104, 113, 146, 148, 150, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 169, 170, 172, 173, 174, 175, 180, 181, 183, 184, 186, 188, 189, 190, 191, 192, 194, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 214, 215, 217, 218, 219, 220, 221, 222, 226, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 256, 257, 258, 259, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 279, 286, 288, 289, 291, 292, 305, 310, 311, 313, 314, 315, 318, 320, 329, 336, 339, 389, 391, 393, 394, 395, 397, 400, 405, 407, 409, 410, 412, 416, 419, 421, 422, 423, 425, 429, 435, 442, 448, 457, 458, 459, 460, 477, 480, 485, 496, 499, 500, 501, 502, 509, 510, 512, 516, 518, 520, 523, 528, 530, 549, 555, 557, 567, 571, 582, 609, 620, 624, 626, 627, 628, 629, 631, 635, 637, 638, 640, 641, 642, 643, 644, 645, 646, 647, 655, 656, 657, 658, 659, 662, 666, 669, 670, 671, 672, 673, 674, 675, 676, 677, 680, 682, 683, 686, 687, 688, 689, 690, 694, 705, 720, 722, 725, 726, 727, 728, 729, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 742, 743, 748, 751, 753, 754, 755, 757, 758, 759, 760, 761, 763, 764, 765, 766, 767, 769, 770, 772, 773, 777, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 794, 795, 797, 798, 800, 801, 802, 803, 805, 806, 807, 808, 809, 810, 811, 812, 816, 819, 822, 825, 851, 852, 853, 854, 871, 872, 874, 924, 925, 931, 934, 946, 954, 967, 984, 999, 1000, 1002, 1036, 1041, 1060, 1086, 1090, 1101, 1129, 1142, 1146, 1160, 1167], "4": [1, 2, 15, 18, 26, 30, 31, 33, 34, 35, 36, 39, 54, 57, 59, 60, 62, 64, 72, 73, 74, 75, 76, 80, 97, 98, 99, 100, 101, 102, 103, 104, 113, 122, 130, 140, 146, 148, 150, 151, 152, 153, 156, 159, 162, 163, 164, 165, 169, 171, 172, 173, 174, 175, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 196, 198, 200, 201, 203, 204, 206, 207, 208, 209, 213, 216, 218, 219, 225, 226, 230, 233, 234, 235, 236, 237, 238, 243, 244, 245, 247, 248, 249, 250, 252, 253, 254, 256, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 279, 285, 286, 287, 288, 290, 292, 305, 306, 307, 308, 310, 316, 318, 321, 322, 323, 329, 330, 331, 332, 333, 334, 335, 337, 339, 344, 348, 353, 361, 368, 369, 370, 371, 373, 374, 377, 378, 380, 384, 385, 390, 391, 393, 394, 397, 398, 399, 400, 402, 403, 404, 406, 407, 408, 409, 410, 422, 423, 425, 428, 429, 430, 438, 439, 441, 442, 443, 446, 456, 457, 458, 459, 460, 461, 462, 466, 472, 475, 477, 479, 480, 495, 497, 499, 500, 501, 502, 503, 504, 507, 508, 511, 512, 514, 515, 516, 517, 518, 521, 523, 527, 528, 530, 531, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 547, 551, 555, 556, 557, 558, 561, 563, 569, 573, 574, 579, 580, 581, 582, 586, 587, 588, 589, 595, 596, 597, 605, 606, 607, 608, 609, 611, 612, 613, 616, 617, 618, 625, 627, 629, 631, 633, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 652, 653, 655, 657, 658, 662, 666, 667, 669, 670, 671, 672, 673, 674, 675, 676, 677, 685, 686, 687, 688, 689, 690, 692, 693, 694, 695, 701, 705, 720, 722, 724, 725, 726, 727, 728, 732, 734, 735, 736, 737, 738, 740, 742, 743, 748, 750, 751, 752, 753, 754, 755, 757, 758, 759, 760, 761, 762, 763, 765, 766, 767, 771, 777, 779, 780, 781, 782, 783, 784, 785, 786, 788, 789, 790, 791, 792, 795, 797, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 816, 819, 825, 828, 835, 838, 839, 840, 847, 856, 857, 859, 870, 872, 874, 888, 889, 895, 897, 900, 901, 902, 903, 904, 905, 909, 910, 911, 913, 914, 917, 918, 919, 920, 931, 933, 934, 941, 942, 945, 946, 948, 954, 959, 960, 961, 962, 966, 981, 983, 984, 985, 988, 998, 999, 1000, 1002, 1003, 1004, 1008, 1017, 1024, 1032, 1033, 1034, 1038, 1042, 1045, 1050, 1052, 1053, 1054, 1055, 1056, 1058, 1060, 1065, 1070, 1074, 1075, 1080, 1082, 1088, 1092, 1093, 1098, 1099, 1100, 1105, 1107, 1108, 1114, 1115, 1116, 1124, 1129, 1131, 1132, 1133, 1139, 1142, 1143, 1144, 1151, 1160, 1168], "c": [1, 30, 31, 33, 35, 36, 39, 59, 60, 62, 64, 73, 75, 80, 98, 100, 102, 104, 113, 122, 136, 146, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 162, 166, 167, 169, 170, 172, 173, 174, 175, 181, 183, 184, 191, 192, 194, 197, 198, 199, 200, 202, 203, 204, 205, 206, 208, 209, 210, 212, 214, 215, 217, 220, 221, 222, 229, 230, 231, 232, 233, 235, 238, 239, 240, 241, 242, 244, 245, 248, 249, 251, 252, 254, 258, 261, 262, 263, 264, 266, 267, 269, 272, 273, 279, 286, 288, 289, 291, 293, 310, 336, 410, 425, 435, 448, 477, 480, 499, 500, 512, 516, 520, 549, 588, 597, 620, 627, 629, 631, 637, 638, 640, 641, 642, 643, 644, 645, 647, 657, 658, 659, 662, 666, 669, 671, 672, 673, 674, 675, 676, 677, 686, 688, 689, 690, 694, 701, 705, 722, 724, 725, 726, 727, 728, 729, 731, 732, 733, 734, 735, 736, 739, 742, 743, 751, 754, 761, 764, 766, 769, 770, 772, 773, 779, 780, 781, 786, 789, 792, 794, 797, 800, 801, 802, 803, 805, 806, 808, 811, 812, 816, 819, 853, 871, 872, 946, 967, 1036, 1107, 1116, 1146, 1160], "5": [1, 12, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 30, 31, 33, 35, 36, 39, 60, 62, 64, 72, 73, 75, 76, 80, 97, 100, 101, 102, 103, 104, 106, 109, 130, 131, 133, 138, 151, 152, 153, 156, 162, 163, 164, 165, 169, 171, 172, 173, 174, 175, 181, 182, 184, 185, 187, 189, 190, 193, 194, 195, 196, 198, 200, 203, 204, 206, 208, 209, 210, 213, 216, 219, 225, 226, 230, 233, 234, 235, 236, 237, 238, 240, 243, 248, 249, 250, 253, 254, 256, 258, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 279, 286, 287, 290, 316, 318, 320, 322, 323, 335, 336, 337, 338, 339, 344, 345, 349, 370, 372, 373, 374, 377, 385, 388, 389, 392, 394, 398, 399, 402, 404, 406, 407, 410, 414, 418, 419, 421, 422, 423, 425, 428, 430, 438, 442, 443, 446, 450, 453, 456, 457, 458, 459, 460, 461, 464, 466, 495, 497, 499, 508, 511, 512, 513, 514, 515, 516, 520, 521, 523, 527, 528, 530, 531, 533, 534, 535, 536, 537, 538, 540, 541, 542, 543, 545, 551, 557, 563, 572, 573, 574, 581, 608, 611, 613, 617, 618, 631, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 649, 654, 655, 656, 657, 658, 662, 666, 667, 669, 670, 671, 672, 673, 674, 675, 676, 677, 680, 686, 688, 689, 690, 694, 701, 705, 724, 725, 726, 727, 728, 734, 735, 736, 737, 738, 740, 742, 743, 748, 750, 752, 753, 754, 755, 759, 760, 761, 766, 771, 777, 779, 780, 781, 782, 783, 784, 785, 789, 791, 792, 795, 797, 800, 801, 802, 803, 805, 806, 807, 808, 809, 810, 811, 812, 816, 819, 825, 828, 832, 835, 847, 852, 857, 859, 866, 870, 871, 872, 873, 874, 880, 881, 882, 883, 884, 885, 910, 912, 913, 914, 915, 917, 919, 920, 928, 931, 932, 941, 942, 945, 946, 952, 958, 984, 985, 988, 992, 998, 999, 1000, 1002, 1003, 1008, 1016, 1017, 1024, 1032, 1033, 1034, 1036, 1037, 1038, 1042, 1045, 1047, 1048, 1049, 1051, 1052, 1055, 1058, 1060, 1070, 1076, 1082, 1091, 1092, 1100, 1131, 1144, 1147, 1151, 1160, 1168], "6": [1, 15, 30, 31, 33, 34, 35, 36, 37, 38, 39, 60, 62, 63, 64, 73, 75, 80, 81, 82, 97, 100, 101, 102, 103, 130, 151, 154, 157, 158, 159, 160, 162, 163, 166, 167, 170, 171, 172, 173, 175, 181, 183, 184, 185, 187, 189, 190, 192, 196, 197, 198, 199, 200, 202, 205, 208, 209, 210, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 226, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 245, 247, 248, 250, 251, 252, 254, 256, 263, 272, 273, 279, 286, 290, 310, 318, 333, 334, 339, 344, 348, 362, 367, 368, 369, 379, 380, 383, 385, 393, 394, 400, 406, 407, 409, 430, 431, 432, 443, 457, 458, 459, 460, 480, 508, 511, 519, 522, 523, 524, 527, 529, 531, 534, 535, 536, 537, 538, 540, 541, 542, 545, 557, 563, 567, 573, 574, 581, 608, 611, 613, 625, 644, 645, 646, 655, 658, 669, 670, 688, 701, 705, 724, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 739, 740, 743, 748, 750, 751, 753, 755, 757, 761, 764, 766, 769, 771, 772, 773, 775, 777, 779, 780, 781, 784, 785, 788, 791, 792, 795, 802, 811, 812, 816, 819, 857, 863, 865, 868, 869, 874, 907, 920, 942, 973, 974, 985, 999, 1000, 1002, 1024, 1038, 1042, 1044, 1050, 1052, 1054, 1056, 1060, 1082, 1086, 1092, 1100, 1130, 1160, 1167, 1168], "7": [1, 30, 31, 33, 34, 35, 36, 37, 38, 39, 62, 73, 75, 80, 151, 154, 155, 156, 157, 158, 160, 162, 166, 167, 170, 175, 181, 183, 185, 192, 197, 198, 199, 201, 202, 205, 208, 210, 212, 214, 216, 217, 219, 220, 221, 222, 226, 229, 231, 232, 233, 234, 239, 240, 241, 242, 248, 250, 251, 252, 279, 286, 290, 308, 334, 344, 348, 368, 370, 371, 378, 380, 390, 406, 409, 430, 457, 458, 459, 460, 479, 511, 523, 527, 531, 541, 557, 600, 611, 613, 644, 645, 652, 658, 669, 670, 688, 705, 724, 729, 731, 733, 735, 739, 743, 748, 750, 751, 755, 762, 764, 767, 769, 771, 772, 773, 777, 784, 785, 816, 819, 832, 840, 880, 884, 891, 910, 911, 918, 920, 968, 999, 1000, 1002, 1017, 1042, 1055, 1119, 1160, 1168], "float32": [1, 31, 51, 75, 151, 169, 239, 240, 279, 667, 724, 816, 819, 949, 1016, 1160], "lazi": [1, 57, 58, 59, 60, 62, 75, 80, 122, 138, 193, 207, 208, 279, 480, 660, 678, 681, 696, 705, 751, 752, 794, 797, 798, 800, 801, 803, 804, 805, 806, 807, 808, 809, 810, 811, 816, 819, 1167, 1168], "i16": [1, 75, 549, 705, 819, 1017, 1139, 1160, 1168], "i32": [1, 75, 97, 100, 104, 137, 138, 222, 279, 318, 355, 382, 529, 549, 581, 695, 705, 773, 816, 891, 922, 1016, 1044, 1100, 1160, 1168], "f32": [1, 75, 151, 159, 239, 279, 549, 705, 724, 732, 816, 819, 1016, 1160], "i64": [1, 2, 15, 18, 22, 54, 57, 59, 73, 74, 75, 76, 80, 97, 98, 99, 100, 101, 102, 103, 104, 110, 122, 150, 152, 153, 154, 157, 159, 160, 162, 163, 165, 166, 171, 172, 173, 174, 175, 181, 183, 184, 186, 188, 192, 193, 196, 197, 200, 201, 202, 206, 207, 208, 209, 212, 213, 214, 215, 216, 220, 222, 226, 229, 230, 232, 233, 234, 236, 242, 244, 245, 246, 247, 248, 249, 250, 252, 254, 256, 257, 258, 259, 262, 263, 264, 265, 266, 269, 272, 273, 279, 286, 288, 292, 306, 307, 308, 309, 310, 316, 320, 323, 331, 332, 333, 334, 336, 338, 339, 349, 351, 353, 357, 359, 361, 366, 373, 376, 389, 391, 392, 394, 395, 396, 397, 399, 400, 403, 406, 407, 408, 409, 410, 414, 418, 419, 421, 422, 423, 425, 427, 430, 439, 441, 442, 443, 444, 445, 446, 449, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 466, 470, 474, 477, 478, 480, 495, 496, 497, 499, 500, 501, 502, 503, 504, 512, 513, 516, 517, 518, 519, 520, 523, 524, 525, 527, 528, 529, 530, 531, 544, 546, 547, 549, 550, 551, 555, 556, 557, 582, 583, 605, 606, 607, 608, 609, 610, 611, 612, 613, 617, 618, 619, 621, 624, 632, 638, 640, 644, 645, 646, 647, 654, 655, 656, 657, 658, 662, 664, 665, 666, 667, 669, 670, 671, 672, 675, 676, 680, 684, 685, 688, 689, 690, 695, 701, 705, 722, 725, 727, 728, 730, 731, 732, 735, 736, 738, 739, 740, 742, 743, 748, 751, 752, 753, 755, 757, 758, 761, 762, 763, 765, 766, 769, 770, 771, 773, 775, 777, 780, 781, 783, 784, 785, 786, 787, 788, 789, 792, 795, 797, 798, 801, 802, 803, 804, 805, 808, 811, 812, 816, 819, 822, 825, 838, 839, 840, 841, 847, 852, 859, 862, 866, 867, 868, 869, 871, 872, 885, 887, 889, 896, 898, 901, 906, 913, 916, 931, 932, 934, 935, 941, 954, 981, 983, 984, 985, 988, 998, 999, 1000, 1002, 1003, 1004, 1005, 1008, 1010, 1018, 1023, 1036, 1041, 1042, 1044, 1048, 1051, 1055, 1058, 1061, 1062, 1065, 1069, 1070, 1074, 1075, 1129, 1131, 1132, 1133, 1138, 1144, 1145, 1151, 1160, 1167, 1168], "register_series_namespac": [1, 73, 74, 75], "math": [1, 76, 337, 633, 634, 705, 863, 865, 1071, 1134, 1160], "mathshortcut": [1, 76], "": [1, 2, 13, 31, 34, 39, 51, 57, 60, 64, 76, 97, 98, 104, 108, 109, 110, 111, 113, 119, 123, 124, 127, 128, 140, 150, 151, 159, 161, 174, 175, 177, 178, 184, 192, 193, 200, 206, 208, 213, 214, 219, 222, 223, 230, 234, 238, 244, 246, 247, 248, 249, 254, 255, 279, 351, 374, 377, 389, 426, 446, 448, 462, 466, 478, 480, 489, 496, 505, 506, 512, 513, 525, 529, 557, 561, 568, 569, 570, 582, 586, 587, 589, 597, 598, 599, 602, 603, 606, 607, 626, 627, 628, 629, 635, 641, 646, 647, 656, 659, 660, 669, 670, 671, 672, 675, 676, 684, 685, 687, 688, 689, 701, 705, 722, 724, 731, 732, 742, 743, 745, 746, 752, 761, 773, 774, 781, 786, 787, 788, 789, 792, 793, 799, 804, 816, 819, 822, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 847, 848, 850, 851, 853, 854, 856, 857, 858, 859, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 878, 880, 884, 886, 887, 890, 892, 893, 897, 899, 903, 904, 908, 911, 912, 914, 917, 918, 920, 921, 922, 925, 926, 927, 928, 932, 933, 934, 935, 937, 940, 941, 945, 946, 947, 948, 949, 950, 952, 953, 954, 955, 956, 958, 959, 960, 961, 962, 963, 965, 966, 967, 968, 969, 970, 981, 983, 985, 988, 990, 992, 998, 1003, 1004, 1005, 1008, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1027, 1028, 1030, 1032, 1033, 1034, 1036, 1037, 1038, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1054, 1055, 1056, 1057, 1058, 1060, 1061, 1062, 1063, 1065, 1069, 1070, 1071, 1072, 1074, 1075, 1077, 1080, 1082, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1092, 1093, 1098, 1099, 1100, 1101, 1105, 1108, 1109, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1127, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1160], "_": [1, 72, 76, 208, 238, 279, 448, 569, 573, 574, 587, 588, 853, 1088, 1092, 1093, 1107, 1137, 1160], "squar": [1, 76, 265, 426, 558, 705, 804, 969, 1076, 1160], "cube": [1, 76, 321, 517, 705, 855, 1160], "s2": [1, 63, 81, 82, 133, 134, 169, 279, 857, 874, 954, 968, 1010, 1024, 1060, 1142, 1151, 1160], "renam": [1, 100, 108, 109, 147, 149, 176, 177, 178, 179, 222, 223, 254, 255, 258, 260, 279, 288, 293, 413, 417, 420, 437, 440, 447, 451, 465, 469, 476, 477, 492, 500, 501, 502, 518, 532, 562, 575, 576, 577, 578, 584, 585, 591, 607, 609, 630, 668, 684, 687, 705, 721, 744, 745, 746, 747, 756, 768, 773, 774, 792, 793, 796, 797, 799, 816, 822, 826, 871, 951, 957, 979, 982, 989, 993, 1007, 1011, 1036, 1046, 1081, 1094, 1095, 1096, 1097, 1103, 1104, 1110, 1127, 1138, 1160], "n2": [1, 468], "in_plac": [1, 183, 228, 252, 279, 1039, 1068, 1075, 1160], "true": [1, 6, 12, 17, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 31, 33, 34, 37, 39, 51, 52, 53, 57, 59, 61, 78, 79, 80, 97, 98, 102, 104, 106, 108, 109, 110, 112, 113, 114, 116, 119, 120, 122, 123, 125, 126, 127, 128, 131, 132, 133, 134, 135, 136, 138, 139, 140, 144, 146, 150, 151, 152, 153, 156, 165, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 184, 186, 187, 188, 190, 193, 194, 198, 203, 204, 206, 208, 209, 216, 217, 218, 219, 220, 222, 230, 236, 238, 240, 241, 244, 245, 246, 247, 248, 249, 250, 254, 259, 261, 262, 264, 266, 267, 268, 269, 270, 271, 272, 279, 287, 288, 289, 290, 291, 292, 293, 304, 311, 312, 314, 315, 318, 330, 331, 332, 333, 334, 336, 343, 345, 348, 349, 351, 353, 354, 356, 357, 359, 361, 363, 364, 366, 367, 368, 370, 371, 372, 373, 376, 378, 380, 381, 383, 384, 385, 386, 387, 388, 402, 403, 404, 410, 411, 412, 414, 415, 416, 418, 419, 421, 422, 423, 424, 426, 428, 431, 432, 436, 463, 467, 468, 475, 480, 484, 485, 486, 487, 488, 489, 491, 492, 507, 508, 509, 511, 514, 515, 520, 525, 531, 534, 535, 536, 537, 538, 539, 540, 541, 542, 544, 549, 554, 556, 557, 561, 563, 564, 566, 571, 572, 581, 587, 588, 590, 597, 598, 599, 602, 606, 607, 612, 619, 622, 625, 626, 627, 628, 629, 630, 632, 635, 636, 641, 642, 649, 650, 651, 652, 653, 658, 664, 665, 670, 678, 681, 687, 692, 693, 695, 696, 705, 722, 724, 725, 726, 727, 728, 734, 736, 738, 742, 743, 744, 745, 746, 747, 751, 752, 754, 756, 757, 761, 766, 771, 773, 775, 779, 781, 786, 787, 788, 789, 792, 798, 800, 801, 803, 805, 806, 807, 808, 809, 810, 811, 816, 819, 823, 824, 825, 826, 836, 843, 848, 851, 854, 857, 858, 871, 878, 879, 881, 884, 885, 886, 887, 888, 889, 890, 894, 895, 896, 897, 898, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 916, 918, 919, 920, 924, 926, 927, 928, 935, 939, 946, 947, 948, 949, 950, 952, 953, 954, 955, 956, 958, 959, 960, 961, 962, 963, 965, 966, 967, 969, 973, 974, 1005, 1009, 1018, 1024, 1030, 1033, 1034, 1036, 1040, 1053, 1060, 1073, 1075, 1080, 1082, 1083, 1085, 1090, 1091, 1100, 1106, 1107, 1109, 1116, 1117, 1118, 1121, 1141, 1142, 1150, 1151, 1160, 1167, 1168], "s3": [1, 33, 112, 123, 124, 127, 128, 279, 1010, 1160], "n3": 1, "8": [1, 13, 30, 31, 33, 35, 36, 37, 38, 39, 50, 57, 62, 69, 71, 72, 73, 75, 76, 80, 130, 136, 151, 154, 155, 156, 157, 158, 159, 160, 162, 166, 167, 170, 173, 181, 183, 192, 196, 197, 198, 199, 202, 210, 212, 214, 217, 219, 220, 221, 222, 226, 229, 231, 232, 233, 234, 239, 240, 241, 242, 248, 251, 252, 254, 279, 290, 292, 305, 329, 331, 334, 335, 344, 409, 429, 439, 442, 451, 457, 458, 459, 460, 497, 511, 517, 527, 528, 533, 549, 555, 557, 575, 578, 579, 580, 597, 613, 625, 631, 637, 641, 642, 643, 645, 647, 655, 657, 662, 666, 669, 670, 671, 672, 673, 674, 675, 676, 677, 686, 689, 690, 694, 705, 724, 729, 731, 732, 733, 735, 739, 748, 751, 755, 757, 766, 769, 772, 773, 777, 784, 785, 792, 816, 819, 825, 865, 870, 891, 942, 968, 981, 984, 993, 999, 1000, 1002, 1032, 1042, 1045, 1047, 1050, 1052, 1054, 1056, 1094, 1097, 1098, 1099, 1116, 1160, 1168], "9": [1, 30, 31, 33, 34, 35, 36, 39, 57, 62, 72, 80, 130, 155, 156, 169, 176, 181, 185, 196, 216, 218, 219, 222, 233, 248, 252, 254, 272, 279, 286, 290, 292, 305, 317, 329, 331, 334, 337, 344, 409, 415, 425, 429, 439, 455, 463, 499, 511, 522, 527, 531, 533, 539, 541, 551, 555, 569, 600, 613, 639, 644, 645, 693, 705, 744, 748, 750, 755, 771, 773, 784, 792, 811, 816, 819, 872, 884, 895, 897, 905, 911, 918, 919, 954, 968, 981, 1005, 1042, 1047, 1053, 1055, 1057, 1070, 1088, 1119, 1160], "27": [1, 76, 272, 334, 362, 369, 379, 705, 811, 1160, 1168], "16": [1, 34, 47, 66, 74, 175, 216, 254, 279, 331, 334, 409, 497, 517, 531, 581, 644, 654, 655, 658, 705, 743, 771, 779, 792, 816, 819, 911, 918, 1032, 1071, 1100, 1134, 1160], "64": [1, 46, 49, 68, 74, 76, 129, 146, 328, 497, 517, 705, 1032, 1160], "25": [1, 34, 76, 104, 138, 156, 175, 193, 216, 250, 254, 279, 338, 348, 350, 368, 371, 378, 380, 520, 531, 534, 535, 536, 537, 538, 540, 541, 542, 618, 649, 650, 652, 653, 654, 660, 670, 692, 693, 705, 743, 752, 759, 771, 790, 792, 816, 819, 872, 873, 886, 911, 918, 924, 942, 1032, 1036, 1160], "125": [1, 34, 76, 279, 286, 705, 1032, 1160], "arg": [2, 3, 4, 5, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 54, 55, 56, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 166, 207, 241, 279, 516, 635, 659, 705, 739, 765, 816, 1018, 1141, 1142, 1160], "ani": [2, 3, 4, 5, 9, 31, 33, 34, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 54, 55, 56, 64, 65, 66, 67, 68, 69, 70, 71, 77, 97, 98, 99, 100, 101, 102, 103, 108, 109, 110, 112, 113, 114, 116, 117, 118, 120, 122, 123, 124, 125, 127, 135, 137, 138, 140, 144, 147, 155, 159, 163, 165, 166, 169, 189, 190, 191, 196, 206, 207, 217, 218, 219, 236, 237, 240, 241, 246, 248, 249, 279, 286, 289, 290, 293, 318, 372, 384, 385, 394, 399, 402, 404, 415, 428, 435, 442, 475, 476, 478, 479, 480, 492, 495, 497, 501, 502, 507, 508, 511, 512, 516, 518, 527, 532, 533, 545, 581, 597, 598, 599, 602, 608, 609, 612, 618, 625, 626, 629, 630, 641, 657, 666, 667, 670, 695, 705, 732, 738, 739, 765, 787, 789, 816, 819, 823, 825, 826, 874, 912, 931, 934, 954, 968, 977, 984, 1017, 1018, 1042, 1046, 1047, 1059, 1062, 1100, 1116, 1117, 1118, 1121, 1132, 1140, 1141, 1142, 1160, 1167, 1168], "kwarg": [2, 3, 4, 5, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 54, 55, 56, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 110, 155, 166, 207, 241, 279, 516, 705, 739, 765, 816, 1142, 1160, 1167], "sourc": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 279, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 701, 705, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 816, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 937, 938, 939, 940, 941, 942, 943, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1127, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1160, 1167], "fix": [2, 113, 136, 138, 381, 534, 535, 536, 537, 538, 540, 541, 542, 654, 705, 921], "length": [2, 54, 80, 122, 136, 173, 175, 176, 178, 179, 216, 229, 279, 335, 371, 378, 462, 468, 489, 529, 531, 532, 533, 534, 535, 536, 537, 538, 540, 541, 542, 555, 573, 574, 576, 578, 579, 580, 584, 586, 605, 678, 681, 682, 683, 696, 705, 743, 744, 746, 747, 766, 771, 780, 816, 857, 870, 880, 911, 918, 1004, 1010, 1029, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1054, 1055, 1056, 1074, 1092, 1093, 1095, 1097, 1098, 1099, 1103, 1105, 1124, 1160], "width": [2, 27, 34, 108, 109, 122, 279, 306, 307, 308, 309, 816, 838, 839, 840, 841], "int": [2, 14, 15, 16, 18, 26, 27, 31, 34, 39, 43, 51, 53, 59, 62, 74, 100, 103, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 119, 120, 122, 123, 125, 126, 127, 128, 129, 136, 137, 138, 139, 140, 141, 142, 147, 150, 152, 161, 164, 165, 167, 173, 180, 181, 182, 184, 189, 190, 191, 193, 195, 196, 197, 198, 202, 203, 204, 214, 217, 220, 225, 226, 227, 229, 231, 232, 233, 234, 239, 242, 244, 248, 251, 253, 256, 263, 273, 279, 286, 310, 316, 335, 338, 386, 387, 388, 392, 393, 394, 400, 403, 405, 406, 430, 436, 439, 445, 446, 456, 461, 462, 466, 467, 468, 511, 513, 516, 517, 520, 523, 526, 527, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 547, 548, 550, 555, 559, 568, 571, 576, 579, 580, 581, 582, 584, 586, 588, 589, 600, 605, 611, 612, 613, 617, 623, 625, 632, 641, 642, 648, 651, 654, 660, 662, 664, 665, 674, 677, 678, 681, 682, 683, 686, 687, 690, 691, 694, 696, 705, 722, 725, 736, 737, 738, 748, 752, 755, 766, 777, 778, 780, 782, 784, 785, 786, 790, 791, 795, 802, 812, 816, 833, 834, 847, 848, 857, 858, 870, 873, 925, 926, 927, 928, 932, 933, 934, 940, 941, 942, 968, 970, 971, 978, 979, 980, 981, 987, 988, 998, 1003, 1004, 1008, 1009, 1010, 1020, 1024, 1025, 1027, 1028, 1029, 1031, 1032, 1035, 1036, 1038, 1042, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1061, 1062, 1065, 1066, 1069, 1074, 1077, 1087, 1090, 1095, 1098, 1099, 1100, 1101, 1103, 1105, 1107, 1108, 1119, 1124, 1130, 1131, 1132, 1133, 1139, 1144, 1149, 1160, 1167, 1168], "none": [2, 6, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 42, 43, 51, 52, 53, 55, 57, 59, 60, 62, 72, 79, 82, 97, 99, 100, 101, 102, 103, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 144, 147, 152, 156, 159, 164, 165, 173, 175, 176, 178, 179, 180, 185, 189, 192, 193, 194, 196, 198, 200, 204, 205, 208, 216, 217, 220, 226, 227, 229, 230, 236, 238, 241, 245, 246, 247, 248, 249, 250, 279, 289, 291, 292, 293, 305, 310, 323, 329, 331, 334, 336, 340, 341, 367, 370, 371, 378, 385, 386, 387, 388, 389, 392, 393, 394, 400, 405, 409, 410, 419, 421, 422, 423, 429, 431, 432, 441, 445, 450, 456, 457, 458, 459, 460, 462, 468, 476, 478, 479, 480, 488, 491, 493, 508, 509, 510, 513, 517, 520, 523, 524, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 540, 541, 542, 544, 547, 548, 549, 550, 551, 555, 556, 560, 561, 563, 565, 566, 569, 571, 572, 573, 574, 577, 579, 580, 581, 585, 586, 588, 589, 590, 591, 592, 593, 594, 597, 598, 599, 602, 605, 606, 607, 616, 626, 627, 628, 629, 630, 638, 640, 642, 647, 649, 650, 651, 652, 653, 654, 656, 657, 666, 667, 668, 669, 670, 672, 676, 681, 682, 683, 686, 687, 689, 691, 692, 693, 694, 695, 705, 725, 726, 728, 732, 737, 738, 743, 744, 746, 747, 750, 751, 752, 754, 756, 757, 761, 764, 771, 775, 777, 778, 779, 780, 781, 787, 788, 789, 794, 796, 799, 804, 816, 819, 823, 824, 825, 826, 833, 834, 858, 859, 871, 872, 874, 875, 876, 892, 893, 894, 899, 910, 911, 918, 923, 924, 926, 927, 928, 932, 933, 934, 936, 940, 942, 944, 945, 946, 956, 961, 962, 965, 968, 969, 970, 973, 974, 983, 987, 992, 998, 999, 1000, 1002, 1004, 1010, 1017, 1018, 1019, 1020, 1021, 1022, 1026, 1036, 1037, 1038, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1054, 1055, 1056, 1058, 1062, 1064, 1065, 1066, 1069, 1070, 1073, 1074, 1077, 1079, 1080, 1082, 1084, 1085, 1088, 1090, 1091, 1092, 1093, 1096, 1098, 1099, 1100, 1104, 1105, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1116, 1117, 1118, 1121, 1124, 1138, 1139, 1140, 1142, 1143, 1149, 1150, 1160, 1167], "inner": [2, 54, 137, 192, 249, 279, 306, 307, 308, 309, 339, 448, 526, 616, 705, 751, 775, 789, 816, 838, 839, 840, 841, 874, 990, 1143, 1160], "polarsdatatyp": [2, 54, 108, 109, 115, 121, 122, 135, 136, 137, 138, 140, 147, 151, 160, 196, 279, 293, 318, 389, 476, 478, 479, 480, 571, 630, 656, 667, 668, 669, 670, 678, 681, 696, 701, 705, 724, 733, 816, 819, 826, 848, 1017, 1018, 1090, 1160], "pythondatatyp": [2, 54], "paramet": [2, 7, 8, 11, 13, 14, 15, 16, 17, 18, 21, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 42, 44, 51, 52, 53, 54, 57, 58, 59, 60, 62, 64, 72, 73, 74, 75, 76, 78, 79, 80, 82, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 146, 147, 150, 151, 152, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 189, 190, 191, 192, 193, 195, 196, 198, 200, 201, 203, 204, 206, 207, 208, 210, 212, 213, 214, 216, 217, 218, 219, 220, 222, 223, 224, 226, 227, 229, 230, 231, 232, 233, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 258, 260, 263, 265, 271, 273, 279, 286, 288, 289, 290, 291, 292, 293, 303, 309, 310, 311, 312, 313, 314, 315, 316, 318, 320, 323, 324, 325, 330, 331, 332, 333, 334, 335, 336, 338, 339, 343, 344, 345, 351, 367, 370, 371, 372, 374, 376, 377, 378, 381, 383, 384, 385, 386, 387, 388, 389, 392, 394, 395, 399, 400, 401, 402, 403, 404, 405, 406, 409, 410, 415, 426, 428, 430, 435, 436, 437, 438, 439, 442, 445, 446, 448, 456, 457, 458, 459, 460, 461, 462, 463, 466, 467, 468, 470, 471, 475, 476, 477, 478, 479, 480, 491, 495, 497, 500, 501, 502, 507, 508, 511, 512, 513, 516, 517, 518, 520, 521, 523, 525, 526, 527, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 554, 555, 556, 557, 559, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 576, 577, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 605, 606, 607, 608, 609, 611, 612, 617, 618, 619, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 656, 658, 659, 660, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 675, 676, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 701, 705, 722, 724, 725, 727, 728, 730, 731, 732, 734, 735, 736, 737, 738, 739, 741, 742, 743, 744, 745, 746, 747, 748, 751, 752, 755, 756, 757, 761, 762, 765, 766, 767, 768, 769, 771, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 784, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 799, 802, 804, 810, 812, 816, 819, 822, 823, 824, 825, 826, 835, 841, 842, 843, 844, 845, 846, 847, 848, 852, 858, 859, 860, 861, 866, 867, 868, 869, 870, 871, 872, 873, 874, 879, 880, 881, 887, 907, 910, 911, 912, 914, 916, 917, 918, 921, 924, 925, 926, 927, 928, 931, 932, 933, 934, 935, 940, 941, 942, 945, 946, 956, 964, 965, 969, 971, 977, 978, 979, 980, 981, 984, 987, 988, 990, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1008, 1009, 1010, 1012, 1017, 1018, 1032, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1065, 1066, 1069, 1073, 1074, 1075, 1077, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1087, 1088, 1089, 1090, 1091, 1095, 1096, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1121, 1124, 1125, 1127, 1131, 1132, 1137, 1138, 1139, 1140, 1141, 1142, 1144, 1145, 1148, 1149, 1150, 1151, 1160, 1167], "The": [2, 21, 32, 33, 34, 39, 53, 54, 57, 61, 63, 64, 72, 77, 78, 82, 97, 99, 100, 101, 103, 106, 108, 109, 110, 111, 113, 117, 118, 120, 122, 126, 128, 131, 132, 133, 134, 142, 156, 158, 159, 160, 162, 163, 166, 173, 174, 175, 178, 180, 185, 190, 193, 196, 201, 206, 216, 217, 218, 219, 222, 223, 240, 247, 250, 254, 255, 258, 265, 279, 288, 310, 311, 312, 313, 336, 340, 341, 348, 362, 367, 368, 371, 374, 378, 379, 389, 392, 395, 400, 405, 441, 467, 478, 480, 512, 520, 523, 526, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 551, 554, 560, 564, 565, 571, 577, 579, 580, 585, 591, 592, 593, 594, 595, 596, 597, 656, 660, 670, 682, 683, 684, 687, 695, 697, 698, 700, 701, 705, 706, 707, 710, 712, 713, 714, 732, 735, 739, 743, 746, 748, 750, 752, 755, 757, 762, 766, 771, 773, 774, 775, 788, 792, 793, 797, 804, 816, 822, 825, 842, 843, 844, 858, 871, 872, 875, 876, 884, 902, 907, 908, 911, 914, 918, 919, 931, 932, 935, 940, 983, 1009, 1018, 1036, 1038, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1062, 1070, 1073, 1079, 1083, 1084, 1090, 1096, 1098, 1099, 1104, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1152, 1154, 1156, 1160, 1161, 1164, 1165, 1166, 1168], "datatyp": [2, 31, 37, 51, 54, 70, 97, 99, 100, 101, 103, 105, 113, 115, 117, 118, 121, 126, 140, 160, 162, 169, 221, 279, 318, 389, 549, 616, 656, 667, 705, 717, 735, 772, 775, 816, 826, 848, 872, 956, 963, 965, 967, 1018, 1067, 1143, 1160], "valu": [2, 9, 13, 14, 15, 18, 29, 31, 34, 37, 51, 54, 55, 57, 61, 63, 70, 72, 80, 82, 100, 102, 108, 109, 110, 111, 113, 122, 128, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 146, 148, 149, 150, 156, 159, 163, 164, 165, 166, 170, 173, 175, 178, 180, 181, 185, 189, 190, 193, 195, 196, 197, 198, 199, 200, 202, 204, 206, 208, 209, 210, 212, 216, 217, 218, 219, 220, 226, 227, 230, 231, 232, 233, 236, 237, 241, 244, 245, 248, 249, 250, 251, 261, 262, 264, 266, 267, 269, 270, 279, 285, 286, 287, 289, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 316, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 334, 335, 336, 338, 340, 341, 344, 348, 362, 368, 379, 384, 385, 386, 387, 388, 390, 391, 392, 393, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 416, 417, 418, 419, 421, 422, 423, 424, 427, 428, 429, 431, 432, 433, 434, 437, 438, 439, 441, 444, 445, 446, 449, 450, 452, 453, 454, 456, 461, 464, 466, 470, 472, 474, 475, 478, 479, 480, 481, 482, 483, 494, 495, 496, 497, 498, 505, 506, 507, 508, 510, 512, 513, 516, 517, 520, 521, 523, 526, 529, 530, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 544, 545, 546, 547, 548, 551, 552, 553, 554, 556, 557, 558, 560, 561, 562, 563, 564, 565, 566, 568, 571, 572, 579, 580, 582, 583, 586, 588, 589, 590, 605, 608, 610, 612, 613, 614, 615, 617, 618, 619, 620, 621, 622, 625, 626, 628, 631, 638, 640, 642, 644, 645, 646, 647, 657, 658, 663, 666, 667, 671, 672, 673, 674, 675, 676, 677, 680, 681, 682, 683, 688, 689, 695, 705, 720, 721, 722, 732, 737, 738, 739, 743, 746, 749, 750, 752, 758, 759, 760, 761, 763, 764, 767, 769, 771, 775, 777, 778, 781, 782, 783, 786, 789, 790, 800, 801, 803, 805, 806, 808, 809, 816, 819, 821, 823, 824, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 838, 839, 840, 841, 843, 844, 845, 846, 852, 856, 859, 860, 861, 863, 864, 865, 870, 871, 872, 873, 875, 876, 880, 884, 902, 908, 919, 925, 926, 927, 928, 931, 932, 933, 934, 937, 939, 940, 941, 942, 943, 945, 946, 948, 950, 951, 952, 954, 955, 957, 958, 959, 960, 961, 962, 966, 970, 971, 973, 974, 975, 976, 979, 980, 981, 983, 986, 987, 988, 991, 992, 994, 995, 996, 998, 1003, 1008, 1012, 1017, 1019, 1020, 1022, 1023, 1025, 1027, 1028, 1029, 1031, 1032, 1035, 1036, 1037, 1038, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1058, 1059, 1060, 1061, 1062, 1065, 1066, 1070, 1071, 1072, 1073, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1087, 1088, 1089, 1090, 1091, 1098, 1099, 1101, 1102, 1105, 1107, 1108, 1109, 1124, 1130, 1131, 1132, 1133, 1134, 1135, 1141, 1142, 1143, 1146, 1148, 1150, 1151, 1160, 1168], "within": [2, 54, 131, 132, 133, 134, 174, 175, 176, 177, 178, 179, 193, 216, 250, 279, 523, 531, 557, 705, 743, 744, 746, 747, 752, 771, 816, 1167], "each": [2, 31, 34, 51, 54, 72, 109, 110, 126, 131, 132, 133, 134, 136, 173, 174, 175, 176, 177, 178, 179, 191, 193, 196, 206, 216, 220, 241, 247, 249, 250, 257, 258, 261, 263, 265, 273, 279, 336, 371, 378, 413, 414, 417, 418, 446, 450, 451, 456, 466, 473, 480, 520, 523, 530, 536, 538, 540, 542, 544, 550, 557, 569, 573, 574, 575, 578, 588, 589, 632, 635, 640, 664, 665, 687, 695, 705, 727, 743, 744, 746, 747, 752, 766, 771, 788, 789, 797, 799, 800, 802, 804, 812, 816, 857, 871, 911, 918, 951, 952, 957, 958, 988, 992, 993, 998, 1008, 1036, 1038, 1045, 1058, 1069, 1088, 1092, 1093, 1094, 1097, 1107, 1108, 1129, 1160, 1168], "exampl": [2, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 51, 52, 53, 54, 57, 58, 59, 60, 61, 62, 63, 64, 72, 73, 74, 75, 76, 80, 81, 82, 97, 98, 99, 100, 101, 102, 103, 104, 106, 109, 110, 111, 112, 113, 119, 122, 123, 124, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 146, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 225, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 279, 285, 286, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 438, 439, 441, 442, 443, 444, 445, 446, 448, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 466, 468, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 579, 580, 581, 582, 583, 586, 587, 588, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 652, 654, 655, 656, 657, 658, 659, 660, 662, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 681, 684, 685, 686, 687, 688, 689, 690, 692, 693, 694, 695, 696, 701, 705, 717, 720, 722, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 742, 743, 748, 749, 750, 751, 752, 753, 754, 755, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 769, 770, 771, 772, 773, 775, 777, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 794, 795, 797, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 816, 822, 823, 824, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 847, 848, 850, 851, 852, 853, 854, 856, 857, 858, 859, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 924, 925, 926, 927, 928, 931, 932, 933, 934, 935, 937, 940, 941, 942, 945, 946, 947, 948, 949, 950, 952, 953, 954, 955, 956, 958, 959, 960, 961, 962, 963, 965, 966, 967, 968, 970, 973, 974, 981, 983, 984, 985, 988, 990, 992, 998, 999, 1000, 1002, 1003, 1004, 1005, 1008, 1010, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1030, 1032, 1033, 1034, 1036, 1037, 1038, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1060, 1061, 1062, 1063, 1065, 1069, 1070, 1071, 1072, 1074, 1075, 1077, 1079, 1080, 1082, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1098, 1099, 1100, 1101, 1102, 1105, 1107, 1108, 1109, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1160, 1167], "dtype": [2, 34, 42, 63, 75, 81, 82, 97, 99, 101, 103, 104, 108, 109, 110, 111, 117, 118, 119, 122, 135, 136, 137, 138, 140, 146, 151, 175, 176, 178, 179, 193, 216, 239, 240, 241, 248, 279, 293, 318, 319, 333, 334, 381, 389, 435, 467, 474, 476, 478, 479, 480, 525, 526, 531, 534, 535, 536, 537, 538, 540, 541, 542, 549, 571, 597, 610, 612, 616, 621, 630, 632, 642, 656, 660, 664, 665, 667, 668, 669, 670, 678, 681, 687, 696, 705, 724, 743, 744, 746, 747, 752, 771, 816, 819, 838, 839, 848, 850, 851, 853, 858, 868, 869, 872, 873, 921, 925, 949, 956, 965, 977, 1009, 1016, 1017, 1043, 1060, 1067, 1090, 1116, 1130, 1139, 1141, 1142, 1143, 1147, 1160, 1168], "method": [2, 3, 4, 5, 9, 30, 34, 35, 36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 54, 55, 56, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 79, 80, 98, 107, 108, 109, 110, 113, 114, 115, 116, 117, 118, 119, 120, 121, 127, 128, 135, 144, 147, 149, 159, 163, 174, 176, 177, 178, 179, 185, 190, 196, 204, 210, 217, 218, 219, 226, 246, 254, 260, 265, 271, 279, 286, 289, 290, 293, 317, 323, 374, 377, 384, 385, 392, 399, 402, 404, 409, 413, 417, 420, 425, 428, 437, 440, 447, 451, 461, 465, 469, 475, 476, 480, 495, 497, 499, 501, 502, 503, 504, 507, 508, 511, 517, 518, 521, 523, 532, 534, 535, 536, 537, 538, 540, 541, 542, 547, 562, 575, 576, 577, 578, 584, 585, 591, 600, 605, 608, 609, 618, 620, 625, 641, 649, 670, 679, 681, 692, 697, 698, 700, 701, 705, 706, 707, 710, 711, 712, 713, 714, 717, 721, 728, 730, 732, 741, 744, 745, 746, 747, 750, 756, 767, 768, 777, 787, 792, 796, 799, 804, 810, 816, 825, 826, 859, 914, 917, 931, 932, 945, 951, 957, 979, 982, 989, 993, 1003, 1007, 1011, 1018, 1037, 1038, 1046, 1052, 1065, 1081, 1094, 1095, 1096, 1097, 1103, 1104, 1110, 1119, 1124, 1143, 1152, 1154, 1156, 1160, 1161, 1164, 1165, 1166], "attribut": [2, 3, 4, 5, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 54, 55, 56, 64, 65, 66, 67, 68, 69, 70, 71, 135, 279, 697, 698, 700, 701, 706, 707, 710, 712, 713, 714, 816, 1152, 1154, 1156, 1161, 1164, 1165, 1166], "A": [5, 15, 31, 34, 51, 57, 60, 78, 79, 104, 108, 109, 110, 111, 122, 124, 129, 142, 169, 175, 192, 193, 208, 236, 248, 249, 250, 254, 255, 279, 285, 340, 341, 344, 384, 385, 392, 402, 404, 412, 416, 419, 421, 428, 468, 475, 478, 489, 507, 508, 528, 533, 534, 535, 536, 537, 538, 540, 541, 542, 561, 562, 563, 568, 569, 570, 572, 582, 583, 605, 639, 654, 655, 659, 705, 743, 751, 752, 769, 789, 792, 793, 816, 819, 875, 876, 880, 932, 1047, 1048, 1049, 1051, 1054, 1055, 1056, 1080, 1081, 1082, 1087, 1088, 1089, 1091, 1101, 1102, 1124, 1160, 1167], "encod": [5, 71, 108, 109, 122, 238, 279, 312, 401, 564, 705, 843, 1083], "set": [5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 17, 18, 21, 26, 27, 29, 31, 33, 34, 35, 36, 37, 38, 51, 52, 53, 72, 73, 98, 100, 103, 108, 109, 110, 113, 114, 116, 119, 120, 122, 125, 126, 127, 128, 129, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 142, 144, 146, 154, 159, 168, 174, 175, 176, 177, 178, 179, 180, 190, 193, 200, 216, 220, 222, 229, 238, 240, 245, 246, 248, 254, 279, 289, 291, 293, 317, 323, 336, 381, 405, 415, 440, 447, 456, 457, 458, 459, 460, 462, 465, 467, 468, 469, 479, 480, 516, 520, 531, 532, 533, 534, 535, 536, 537, 538, 540, 541, 542, 544, 550, 554, 555, 577, 585, 586, 591, 592, 593, 594, 597, 598, 599, 602, 622, 626, 628, 632, 636, 649, 650, 652, 653, 664, 665, 678, 681, 682, 683, 687, 692, 693, 695, 696, 705, 717, 727, 732, 734, 742, 743, 744, 745, 746, 747, 751, 752, 756, 757, 761, 771, 773, 775, 780, 787, 792, 796, 799, 804, 816, 823, 824, 825, 854, 859, 871, 921, 940, 954, 982, 989, 998, 999, 1000, 1001, 1002, 1004, 1007, 1009, 1010, 1011, 1017, 1018, 1036, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1054, 1055, 1056, 1058, 1062, 1069, 1073, 1074, 1096, 1104, 1105, 1110, 1111, 1112, 1113, 1116, 1117, 1118, 1121, 1141, 1148, 1160, 1168], "string": [5, 7, 8, 10, 11, 14, 16, 17, 21, 31, 32, 34, 37, 38, 42, 51, 57, 63, 71, 81, 82, 104, 108, 109, 110, 111, 122, 131, 132, 133, 134, 135, 136, 137, 140, 143, 150, 169, 173, 174, 175, 177, 193, 206, 208, 216, 219, 222, 223, 230, 239, 244, 245, 248, 250, 254, 255, 258, 279, 286, 314, 320, 367, 371, 374, 377, 378, 389, 391, 397, 401, 410, 448, 479, 491, 512, 516, 531, 534, 535, 536, 537, 538, 540, 541, 542, 557, 560, 561, 563, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 582, 583, 584, 586, 587, 588, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 605, 627, 629, 635, 638, 639, 640, 647, 649, 650, 652, 653, 659, 672, 676, 684, 687, 689, 692, 693, 695, 705, 722, 734, 741, 742, 743, 745, 752, 771, 773, 774, 775, 781, 786, 792, 793, 796, 797, 816, 819, 845, 851, 852, 907, 911, 914, 917, 918, 930, 946, 990, 1078, 1079, 1080, 1082, 1085, 1086, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1105, 1106, 1107, 1108, 1109, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1120, 1122, 1123, 1124, 1139, 1160, 1168], "classmethod": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 401, 705, 730, 741, 768, 816], "activ": [6, 12, 19, 20, 22, 23, 24, 25, 28, 442, 569, 984, 1088], "bool": [6, 12, 17, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 31, 33, 34, 37, 39, 51, 52, 53, 72, 78, 79, 80, 81, 82, 97, 98, 102, 104, 108, 109, 113, 114, 116, 118, 119, 120, 122, 125, 126, 127, 128, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 143, 146, 150, 151, 152, 153, 165, 166, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 183, 184, 186, 187, 188, 193, 206, 208, 216, 219, 220, 224, 228, 230, 236, 238, 240, 241, 244, 245, 246, 247, 249, 250, 252, 254, 262, 264, 266, 269, 279, 288, 289, 290, 291, 292, 293, 303, 309, 311, 312, 314, 315, 318, 330, 331, 332, 333, 334, 335, 336, 354, 370, 372, 378, 383, 384, 385, 386, 387, 388, 402, 404, 410, 411, 412, 414, 415, 416, 418, 419, 421, 422, 423, 424, 426, 428, 431, 432, 436, 442, 456, 463, 467, 470, 475, 476, 478, 480, 484, 485, 486, 487, 488, 491, 507, 508, 509, 511, 514, 515, 520, 523, 525, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 544, 546, 549, 554, 556, 557, 561, 563, 564, 566, 581, 582, 583, 587, 588, 590, 597, 598, 599, 602, 607, 619, 622, 625, 626, 627, 628, 629, 630, 632, 635, 636, 641, 644, 649, 650, 651, 652, 653, 664, 665, 667, 670, 678, 681, 687, 692, 693, 696, 705, 722, 724, 725, 727, 728, 734, 736, 738, 739, 742, 743, 744, 745, 746, 747, 751, 752, 756, 757, 761, 766, 771, 776, 779, 781, 786, 787, 788, 789, 792, 801, 803, 805, 808, 816, 819, 823, 824, 825, 826, 835, 841, 843, 848, 851, 854, 858, 866, 867, 868, 869, 870, 871, 890, 910, 912, 918, 924, 926, 927, 928, 935, 939, 946, 947, 948, 949, 950, 952, 953, 954, 955, 956, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 969, 973, 974, 978, 979, 980, 984, 998, 1005, 1009, 1012, 1018, 1030, 1033, 1034, 1036, 1038, 1039, 1040, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1058, 1060, 1062, 1063, 1068, 1073, 1075, 1080, 1082, 1083, 1085, 1100, 1101, 1102, 1106, 1107, 1109, 1116, 1117, 1118, 1121, 1140, 1141, 1142, 1145, 1148, 1150, 1160, 1167], "decim": [6, 13, 31, 34, 51, 279, 543, 600, 705, 816, 1057, 1119, 1160], "temporari": 6, "remov": [6, 9, 83, 108, 109, 122, 146, 157, 238, 279, 293, 389, 477, 480, 500, 577, 585, 591, 592, 593, 594, 595, 596, 656, 705, 731, 816, 825, 871, 1036, 1096, 1104, 1110, 1111, 1112, 1113, 1114, 1115, 1118, 1160], "onc": [6, 60, 108, 109, 113, 142, 196, 218, 220, 258, 279, 317, 456, 480, 544, 595, 596, 705, 723, 797, 816, 998, 1018, 1058, 1114, 1115, 1160], "stabil": 6, "current": [6, 7, 8, 10, 11, 29, 59, 98, 104, 110, 111, 127, 152, 153, 192, 193, 279, 350, 371, 468, 513, 705, 717, 725, 726, 727, 751, 752, 816, 819, 858, 862, 878, 886, 911, 1032, 1160, 1167], "consid": [6, 79, 81, 82, 108, 109, 122, 128, 131, 132, 133, 134, 159, 170, 196, 200, 218, 246, 248, 249, 279, 293, 323, 335, 371, 478, 480, 534, 535, 536, 537, 538, 540, 541, 542, 644, 658, 701, 705, 728, 732, 748, 755, 761, 787, 804, 816, 851, 854, 859, 870, 911, 942, 956, 1018, 1036, 1060, 1061, 1062, 1160], "beta": 6, "cfg": [7, 9, 18, 144], "previous": [7, 8], "save": [7, 8, 11, 175, 193, 216, 250, 279, 342, 350, 367, 371, 378, 531, 534, 535, 536, 537, 538, 540, 541, 542, 649, 650, 652, 653, 654, 692, 693, 701, 705, 717, 743, 752, 771, 816, 886, 907, 911, 918], "option": [7, 8, 9, 10, 11, 29, 33, 34, 43, 72, 108, 110, 112, 113, 114, 116, 120, 123, 124, 125, 127, 128, 130, 135, 136, 137, 138, 139, 140, 141, 175, 189, 193, 200, 236, 240, 245, 249, 279, 426, 532, 534, 535, 536, 537, 538, 540, 541, 542, 554, 586, 622, 667, 687, 695, 705, 717, 743, 751, 752, 761, 775, 789, 816, 819, 965, 969, 1046, 1048, 1049, 1050, 1051, 1052, 1054, 1055, 1056, 1073, 1105, 1138, 1148, 1160], "from": [7, 8, 9, 10, 11, 31, 34, 51, 57, 58, 59, 72, 80, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 151, 156, 157, 161, 163, 168, 173, 175, 178, 190, 191, 193, 194, 200, 208, 212, 216, 217, 219, 220, 222, 223, 238, 245, 246, 248, 249, 250, 279, 330, 336, 337, 342, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 385, 389, 401, 409, 426, 456, 468, 480, 505, 506, 508, 513, 516, 520, 522, 531, 533, 534, 535, 537, 540, 541, 542, 544, 557, 568, 569, 571, 581, 595, 596, 597, 598, 599, 602, 620, 633, 634, 638, 648, 649, 650, 651, 652, 654, 681, 686, 691, 692, 693, 701, 704, 705, 724, 730, 731, 736, 741, 743, 746, 752, 761, 768, 769, 771, 773, 774, 787, 789, 794, 816, 819, 825, 871, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 925, 931, 965, 969, 998, 1010, 1027, 1028, 1029, 1032, 1036, 1047, 1058, 1087, 1088, 1090, 1100, 1114, 1115, 1116, 1117, 1118, 1121, 1151, 1160, 1167, 1168], "json": [7, 8, 10, 11, 37, 38, 117, 118, 124, 126, 279, 401, 493, 571, 572, 705, 717, 730, 741, 768, 775, 796, 816, 1090, 1091], "produc": [7, 8, 137, 138, 140, 437, 438, 488, 669, 756, 757, 816, 979, 980], "load_from_fil": [7, 10, 11], "file": [7, 8, 10, 11, 30, 31, 35, 36, 37, 38, 39, 51, 52, 53, 107, 108, 109, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 163, 279, 493, 730, 768, 775, 796, 816, 825, 931, 1160], "path": [8, 11, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 51, 52, 53, 107, 108, 109, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 279, 493, 546, 572, 705, 730, 768, 775, 779, 796, 816, 1063, 1091, 1160, 1168], "load": [8, 10, 11, 100, 102, 110, 112, 113, 119, 123, 124, 139, 141, 279, 705, 717, 748, 755, 816, 1168], "reset": [9, 144], "default": [9, 12, 16, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 51, 53, 72, 79, 80, 97, 99, 100, 101, 102, 103, 104, 108, 109, 111, 113, 117, 118, 119, 120, 122, 131, 133, 135, 136, 137, 138, 139, 140, 144, 156, 159, 161, 174, 175, 176, 177, 178, 179, 180, 190, 192, 193, 200, 206, 208, 216, 217, 218, 219, 220, 226, 231, 238, 246, 248, 249, 251, 256, 279, 288, 289, 291, 320, 336, 370, 371, 378, 383, 385, 386, 387, 388, 405, 456, 461, 462, 467, 468, 471, 479, 488, 505, 506, 508, 513, 520, 523, 531, 534, 535, 536, 537, 538, 540, 541, 542, 544, 547, 550, 559, 568, 577, 581, 585, 586, 591, 592, 593, 594, 597, 598, 599, 602, 622, 623, 626, 628, 632, 636, 641, 649, 650, 651, 652, 653, 660, 664, 665, 667, 678, 681, 686, 687, 692, 693, 694, 696, 705, 727, 728, 732, 734, 742, 743, 744, 745, 746, 747, 751, 752, 761, 771, 775, 777, 782, 787, 790, 796, 816, 823, 824, 825, 852, 859, 871, 872, 910, 911, 918, 924, 925, 926, 927, 928, 940, 998, 1003, 1004, 1009, 1010, 1017, 1027, 1028, 1032, 1036, 1038, 1058, 1065, 1069, 1077, 1080, 1087, 1096, 1100, 1104, 1105, 1110, 1111, 1112, 1113, 1116, 1117, 1118, 1121, 1148, 1149, 1160, 1168], "state": [9, 78, 79, 90, 644, 717, 727, 728, 734, 736, 766, 779, 816], "note": [9, 21, 33, 34, 43, 57, 61, 62, 63, 72, 79, 81, 82, 97, 98, 99, 101, 103, 104, 108, 110, 111, 112, 113, 117, 118, 120, 123, 124, 127, 128, 131, 133, 136, 138, 140, 142, 144, 146, 150, 155, 156, 164, 175, 176, 178, 179, 189, 190, 192, 193, 196, 204, 207, 208, 216, 217, 218, 219, 226, 237, 240, 244, 245, 249, 250, 254, 279, 323, 333, 334, 340, 341, 363, 364, 367, 371, 378, 410, 419, 421, 425, 442, 461, 467, 478, 480, 499, 501, 502, 503, 504, 518, 531, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 554, 561, 568, 569, 570, 573, 574, 582, 592, 593, 594, 597, 605, 609, 610, 618, 644, 649, 650, 652, 653, 654, 658, 667, 678, 680, 681, 692, 693, 695, 696, 701, 705, 716, 722, 728, 736, 737, 743, 744, 746, 747, 748, 752, 755, 769, 771, 777, 779, 781, 786, 789, 792, 816, 859, 868, 869, 872, 875, 876, 903, 904, 907, 918, 939, 984, 1003, 1009, 1018, 1053, 1061, 1062, 1065, 1068, 1073, 1080, 1087, 1088, 1089, 1092, 1093, 1101, 1111, 1112, 1113, 1116, 1124, 1130, 1141, 1160, 1167], "oper": [9, 34, 63, 80, 82, 87, 88, 97, 99, 100, 101, 102, 103, 108, 110, 120, 147, 153, 163, 166, 169, 174, 177, 184, 194, 196, 201, 204, 206, 207, 211, 216, 219, 220, 226, 235, 240, 241, 245, 248, 257, 258, 279, 286, 287, 290, 330, 331, 332, 333, 334, 335, 384, 385, 399, 402, 404, 425, 428, 456, 457, 458, 459, 460, 461, 468, 475, 492, 495, 497, 499, 501, 502, 507, 508, 511, 517, 518, 525, 531, 544, 547, 608, 609, 618, 625, 626, 628, 639, 640, 655, 705, 717, 726, 736, 742, 745, 748, 751, 755, 761, 762, 771, 777, 797, 816, 825, 862, 866, 867, 868, 869, 870, 931, 998, 999, 1000, 1001, 1002, 1003, 1040, 1058, 1065, 1136, 1140, 1141, 1142, 1150, 1160], "environ": [9, 29, 127, 139, 142], "local": [9, 33, 110, 112, 123, 124, 127, 140, 279, 378, 514, 515, 705, 851, 853, 882, 883, 915, 918, 1033, 1034, 1160], "non": [9, 31, 33, 34, 43, 51, 72, 102, 129, 176, 179, 191, 200, 216, 222, 223, 226, 245, 249, 254, 255, 279, 323, 410, 468, 479, 513, 531, 532, 533, 534, 535, 536, 537, 538, 540, 541, 542, 562, 563, 569, 573, 605, 627, 629, 638, 639, 640, 647, 654, 672, 676, 682, 683, 684, 687, 689, 705, 744, 747, 761, 771, 773, 774, 777, 789, 792, 793, 816, 859, 946, 1010, 1032, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1054, 1055, 1056, 1065, 1081, 1082, 1088, 1092, 1124, 1141, 1160], "env": [9, 141], "back": [9, 72, 163, 241, 279, 512, 603, 705, 775, 816, 825, 931, 1122, 1142, 1160], "contain": [10, 31, 32, 33, 34, 51, 72, 77, 98, 99, 102, 104, 110, 112, 123, 124, 131, 132, 137, 150, 159, 175, 178, 191, 204, 208, 244, 249, 279, 289, 291, 293, 314, 315, 415, 479, 480, 566, 568, 570, 572, 589, 590, 605, 626, 628, 670, 705, 722, 732, 743, 746, 766, 786, 789, 816, 819, 823, 824, 871, 1017, 1024, 1036, 1085, 1087, 1089, 1091, 1108, 1109, 1124, 1136, 1160], "save_to_fil": 10, "json_str": 10, "written": [11, 30, 31, 34, 35, 36, 37, 38, 39, 51, 52, 53, 279, 775, 796, 816], "leav": [11, 200, 279, 468, 761, 816], "directli": [11, 29, 59, 79, 110, 138, 140, 144, 219, 279, 386, 387, 388, 681, 705, 728, 816, 926, 927, 928, 1160, 1168], "json_fil": 11, "ascii": [12, 21, 573, 574, 576, 584, 605, 1092, 1093, 1095, 1103, 1124], "charact": [12, 14, 21, 27, 31, 32, 51, 108, 109, 122, 279, 367, 567, 569, 573, 574, 576, 577, 578, 579, 580, 584, 585, 587, 588, 591, 592, 593, 594, 605, 766, 816, 819, 907, 1086, 1088, 1092, 1093, 1095, 1096, 1097, 1098, 1099, 1103, 1104, 1106, 1107, 1110, 1111, 1112, 1113, 1124], "displai": [12, 13, 14, 15, 18, 20, 24, 26, 34, 173, 279], "tabl": [12, 17, 18, 20, 21, 22, 23, 24, 26, 27, 32, 33, 34, 58, 59, 60, 62, 97, 104, 108, 109, 112, 113, 122, 123, 124, 208, 235, 241, 248, 249, 279, 789, 816, 1142, 1160, 1167], "outlin": 12, "fals": [12, 17, 19, 20, 21, 22, 23, 24, 25, 26, 29, 33, 34, 37, 39, 51, 52, 53, 57, 72, 78, 79, 98, 102, 104, 108, 109, 110, 113, 114, 116, 118, 119, 120, 122, 126, 127, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 146, 150, 151, 152, 153, 156, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 183, 184, 186, 187, 188, 190, 193, 194, 198, 203, 204, 206, 208, 209, 216, 217, 218, 219, 220, 224, 228, 230, 236, 238, 240, 241, 244, 245, 246, 249, 250, 252, 254, 261, 262, 264, 266, 267, 269, 272, 279, 289, 290, 291, 293, 303, 309, 311, 314, 315, 330, 331, 332, 333, 334, 335, 336, 354, 370, 372, 378, 383, 384, 385, 386, 387, 388, 402, 404, 410, 411, 412, 414, 415, 416, 418, 419, 421, 422, 423, 424, 426, 428, 431, 432, 436, 442, 456, 463, 467, 470, 475, 476, 478, 480, 484, 487, 489, 491, 507, 508, 509, 511, 514, 515, 520, 523, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 544, 546, 549, 554, 556, 557, 561, 563, 566, 571, 581, 582, 583, 587, 588, 590, 597, 598, 599, 619, 622, 625, 626, 627, 628, 629, 632, 635, 636, 641, 644, 649, 650, 651, 652, 653, 664, 665, 667, 678, 681, 687, 692, 693, 695, 696, 705, 722, 724, 725, 726, 727, 728, 734, 736, 742, 743, 744, 745, 746, 747, 751, 752, 754, 756, 757, 766, 771, 776, 779, 781, 786, 787, 789, 792, 800, 801, 803, 805, 806, 808, 811, 816, 819, 823, 824, 825, 835, 841, 848, 851, 854, 857, 858, 866, 867, 868, 869, 870, 871, 890, 910, 912, 918, 924, 926, 927, 928, 935, 939, 946, 947, 948, 950, 952, 954, 955, 956, 958, 959, 960, 961, 962, 964, 965, 966, 969, 973, 974, 984, 998, 1005, 1009, 1012, 1024, 1030, 1033, 1034, 1036, 1038, 1039, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1058, 1060, 1063, 1068, 1073, 1075, 1080, 1082, 1085, 1090, 1100, 1101, 1102, 1106, 1107, 1109, 1116, 1117, 1118, 1141, 1142, 1145, 1148, 1150, 1151, 1160, 1167], "revert": 12, "utf8_full_condens": [12, 21, 104], "format": [12, 13, 17, 21, 31, 34, 35, 36, 51, 107, 108, 109, 110, 122, 128, 162, 173, 190, 200, 218, 219, 237, 277, 279, 371, 374, 377, 491, 597, 598, 599, 602, 654, 735, 741, 761, 775, 796, 816, 914, 917, 1116, 1117, 1118, 1121, 1159], "style": [12, 21, 34, 110, 120, 127, 208, 279], "abc": [12, 19, 20, 21, 22, 23, 24, 25, 26, 286, 569, 582, 705, 819, 1088, 1101], "xyz": [12, 19, 20, 21, 22, 23, 24, 25, 26, 286, 563, 569, 705, 1082, 1088, 1138, 1160], "f64": [12, 13, 17, 19, 20, 22, 23, 24, 25, 26, 54, 57, 72, 74, 76, 80, 98, 100, 128, 138, 152, 153, 155, 156, 157, 160, 164, 165, 169, 172, 173, 174, 175, 184, 185, 192, 193, 198, 199, 208, 209, 210, 229, 230, 231, 251, 254, 258, 262, 264, 266, 267, 268, 269, 271, 272, 279, 285, 288, 295, 296, 297, 298, 299, 300, 318, 321, 322, 326, 327, 328, 335, 336, 337, 340, 341, 372, 383, 384, 385, 386, 387, 388, 389, 390, 393, 394, 398, 399, 402, 404, 409, 419, 421, 422, 423, 425, 426, 428, 442, 453, 471, 472, 473, 475, 481, 482, 483, 494, 497, 499, 505, 506, 507, 508, 513, 517, 520, 521, 522, 523, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 552, 553, 554, 558, 559, 614, 615, 618, 623, 633, 634, 637, 638, 639, 641, 643, 655, 656, 670, 673, 674, 685, 686, 694, 701, 705, 725, 731, 737, 738, 742, 743, 750, 751, 752, 759, 760, 767, 781, 782, 790, 792, 794, 797, 801, 803, 805, 806, 807, 808, 810, 811, 816, 819, 827, 828, 829, 830, 831, 832, 855, 856, 863, 864, 865, 870, 871, 872, 875, 876, 912, 926, 927, 928, 933, 937, 942, 945, 984, 1032, 1036, 1038, 1047, 1049, 1050, 1052, 1053, 1054, 1056, 1057, 1071, 1072, 1076, 1134, 1135, 1147, 1160, 1168], "fmt": [13, 408, 659, 705, 749, 816], "floatfmt": 13, "mix": [13, 872, 1118, 1160], "control": [13, 34, 62, 79, 80, 136, 279, 728, 734, 816], "how": [13, 33, 34, 72, 80, 100, 103, 111, 127, 159, 192, 208, 248, 249, 279, 320, 338, 370, 371, 378, 409, 437, 438, 439, 512, 526, 539, 571, 597, 599, 651, 695, 705, 732, 751, 789, 816, 852, 873, 910, 911, 918, 979, 980, 981, 1053, 1090, 1116, 1118, 1160], "float": [13, 31, 34, 45, 46, 51, 113, 128, 131, 132, 133, 134, 135, 138, 140, 146, 156, 161, 164, 193, 210, 220, 227, 271, 279, 322, 336, 340, 341, 372, 383, 384, 385, 386, 387, 388, 393, 398, 402, 404, 409, 412, 416, 419, 421, 422, 423, 428, 436, 456, 471, 475, 481, 494, 505, 506, 507, 508, 517, 520, 521, 532, 533, 534, 535, 536, 537, 538, 540, 541, 542, 543, 544, 618, 637, 673, 674, 679, 681, 686, 694, 705, 737, 752, 767, 778, 779, 810, 816, 819, 848, 856, 871, 872, 874, 875, 876, 912, 924, 925, 926, 927, 928, 933, 937, 942, 953, 969, 978, 979, 980, 998, 1013, 1020, 1021, 1027, 1028, 1035, 1036, 1037, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1054, 1055, 1056, 1057, 1058, 1059, 1061, 1062, 1073, 1077, 1130, 1141, 1149, 1160, 1168], "point": [13, 34, 45, 46, 138, 140, 164, 175, 178, 194, 279, 322, 336, 340, 372, 393, 398, 419, 421, 456, 480, 543, 544, 705, 737, 743, 746, 756, 757, 769, 816, 856, 871, 875, 912, 933, 937, 953, 998, 1036, 1057, 1058, 1141, 1160], "full": [13, 42, 72, 77, 80, 108, 109, 112, 122, 123, 124, 128, 175, 176, 178, 179, 216, 279, 531, 597, 598, 599, 602, 705, 743, 744, 746, 747, 756, 757, 771, 816, 819, 1116, 1117, 1118, 1121, 1168], "number": [13, 14, 15, 16, 18, 26, 31, 34, 39, 51, 53, 63, 72, 82, 91, 97, 99, 101, 103, 106, 108, 109, 111, 113, 117, 118, 119, 122, 126, 127, 129, 136, 138, 139, 141, 142, 150, 152, 161, 162, 164, 165, 173, 181, 190, 191, 194, 195, 203, 204, 220, 226, 227, 231, 233, 244, 248, 251, 261, 263, 273, 279, 304, 310, 316, 329, 335, 336, 338, 352, 355, 360, 362, 372, 379, 380, 382, 386, 387, 388, 392, 394, 400, 406, 419, 421, 429, 430, 439, 446, 450, 451, 456, 461, 466, 468, 516, 520, 532, 533, 534, 535, 536, 537, 538, 540, 541, 542, 543, 544, 547, 548, 550, 559, 573, 574, 575, 578, 582, 588, 589, 600, 611, 617, 623, 641, 642, 654, 662, 682, 683, 686, 690, 694, 705, 722, 725, 735, 736, 737, 738, 748, 755, 766, 777, 778, 782, 784, 786, 790, 800, 802, 812, 816, 847, 858, 870, 871, 873, 888, 891, 900, 902, 912, 919, 920, 922, 925, 926, 927, 928, 932, 934, 941, 953, 970, 971, 981, 988, 992, 993, 998, 1003, 1008, 1010, 1024, 1025, 1036, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1054, 1055, 1056, 1057, 1058, 1065, 1066, 1069, 1077, 1092, 1093, 1094, 1097, 1101, 1107, 1108, 1119, 1131, 1144, 1149, 1160, 1168], "limit": [13, 53, 110, 111, 122, 165, 279, 310, 324, 325, 394, 400, 705, 738, 748, 816, 860, 861, 934, 1160], "place": [13, 31, 51, 150, 158, 163, 183, 184, 208, 213, 219, 227, 230, 244, 252, 279, 303, 448, 548, 556, 705, 722, 778, 781, 786, 816, 825, 835, 931, 990, 1039, 1066, 1075, 1160], "scientif": 13, "notat": [13, 34, 279], "larg": [13, 16, 33, 72, 110, 175, 193, 216, 250, 279, 367, 371, 378, 531, 534, 535, 536, 537, 538, 540, 541, 542, 649, 650, 652, 653, 692, 693, 705, 743, 752, 771, 816, 907, 911, 918], "small": [13, 111, 137, 194, 279, 371, 736, 816, 1168], "print": [13, 14, 15, 18, 20, 21, 26, 109, 130, 131, 133, 160, 173, 174, 191, 194, 239, 257, 279, 408, 491, 705, 727, 749, 816, 954, 1139, 1160, 1168], "precis": [13, 31, 33, 34, 42, 43, 51, 110, 190, 218, 219, 237, 279, 343, 600, 816, 819, 879, 1119], "2304980958725870923": 13, "1e6": 13, "1e": [13, 131, 132, 133, 134], "230498": 13, "0000e": 13, "230498095872587": 13, "1000000": [13, 366, 906], "00000001": [13, 625, 705], "plai": [14, 640], "sam": 14, "As": [14, 63, 81, 82, 97, 99, 100, 101, 103, 113, 117, 118, 126, 279, 816], "time": [14, 33, 42, 44, 57, 62, 77, 78, 79, 120, 122, 163, 175, 176, 178, 179, 193, 216, 250, 279, 316, 342, 343, 344, 345, 346, 350, 351, 367, 370, 371, 374, 376, 377, 378, 381, 435, 436, 468, 531, 534, 535, 536, 537, 538, 540, 541, 542, 550, 597, 599, 602, 616, 617, 639, 640, 649, 650, 651, 652, 653, 654, 660, 692, 693, 705, 727, 728, 743, 744, 746, 747, 752, 766, 771, 816, 819, 825, 847, 878, 879, 880, 881, 886, 887, 907, 910, 911, 914, 916, 917, 918, 921, 931, 977, 979, 980, 1069, 1116, 1118, 1121, 1143, 1144, 1160, 1168], "goe": 14, "By": [14, 16, 29, 72, 108, 109, 122, 175, 193, 216, 226, 231, 249, 250, 251, 279, 367, 371, 378, 461, 531, 534, 535, 536, 537, 538, 540, 541, 542, 547, 559, 623, 641, 649, 650, 652, 653, 654, 667, 686, 692, 693, 694, 705, 727, 743, 752, 771, 777, 782, 790, 816, 907, 911, 918, 1003, 1065, 1077, 1141, 1149, 1160], "begin": [14, 34, 279, 386, 387, 388, 568, 705, 926, 927, 928, 1087, 1160], "beauti": 14, "friendship": 14, "len_byt": [14, 574, 575, 1093, 1094], "len": [14, 34, 136, 138, 191, 279, 330, 451, 480, 705, 993, 1160], "u32": [14, 57, 110, 148, 151, 205, 256, 261, 270, 272, 279, 287, 294, 301, 302, 303, 304, 305, 329, 330, 348, 352, 356, 360, 362, 368, 369, 372, 379, 380, 429, 433, 434, 438, 450, 479, 498, 510, 523, 530, 534, 535, 537, 540, 541, 542, 545, 563, 573, 574, 616, 620, 626, 631, 635, 636, 642, 677, 705, 720, 724, 764, 795, 800, 809, 811, 816, 835, 836, 837, 848, 853, 884, 888, 895, 897, 900, 902, 905, 908, 909, 912, 919, 920, 942, 992, 1038, 1045, 1082, 1092, 1093, 1143, 1146, 1148, 1160], "37": 14, "beaut": 14, "48": [14, 216, 279, 531, 705, 771, 816], "fmt_str_length": 14, "50": [14, 34, 156, 163, 173, 279, 323, 371, 378, 705, 859, 872, 918, 1160], "element": [15, 16, 26, 137, 140, 150, 189, 208, 217, 231, 244, 251, 279, 293, 295, 296, 297, 298, 299, 300, 316, 321, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 340, 341, 390, 391, 395, 405, 415, 429, 437, 438, 440, 441, 442, 443, 447, 450, 451, 457, 458, 459, 460, 465, 469, 472, 473, 480, 512, 513, 523, 526, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 545, 551, 552, 553, 558, 559, 588, 589, 600, 614, 615, 617, 623, 641, 682, 683, 686, 694, 705, 722, 781, 782, 786, 790, 816, 826, 827, 828, 829, 830, 831, 832, 847, 855, 858, 863, 864, 865, 866, 867, 868, 869, 870, 875, 876, 929, 930, 935, 941, 954, 968, 970, 971, 979, 980, 982, 983, 984, 985, 989, 992, 993, 999, 1000, 1001, 1002, 1007, 1011, 1014, 1015, 1018, 1032, 1038, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1059, 1070, 1071, 1072, 1076, 1077, 1107, 1108, 1119, 1131, 1134, 1135, 1139, 1144, 1145, 1149, 1160], "empti": [15, 31, 51, 88, 100, 108, 109, 113, 119, 122, 152, 153, 175, 187, 200, 279, 667, 684, 725, 726, 743, 761, 816, 819, 858, 862, 949, 1160], "alwai": [15, 31, 33, 51, 57, 108, 131, 132, 133, 134, 137, 174, 177, 196, 265, 279, 488, 597, 649, 695, 757, 816, 825, 1018, 1116, 1160, 1167, 1168], "neg": [15, 43, 129, 175, 176, 178, 179, 181, 195, 216, 226, 227, 229, 233, 279, 461, 462, 516, 531, 547, 548, 555, 586, 705, 743, 744, 746, 747, 771, 777, 778, 780, 795, 816, 941, 971, 1003, 1004, 1065, 1066, 1074, 1105, 1131, 1160], "result": [15, 31, 37, 38, 51, 52, 53, 72, 80, 101, 103, 110, 111, 112, 113, 122, 125, 127, 128, 140, 163, 175, 178, 192, 204, 208, 216, 219, 226, 227, 241, 250, 258, 279, 374, 377, 386, 387, 388, 392, 426, 468, 478, 480, 512, 520, 527, 532, 533, 534, 535, 536, 537, 538, 540, 541, 542, 546, 547, 548, 587, 588, 599, 618, 644, 645, 649, 650, 651, 652, 653, 654, 669, 678, 681, 682, 683, 696, 705, 723, 743, 744, 746, 747, 751, 756, 757, 766, 771, 775, 777, 778, 796, 797, 816, 825, 871, 914, 917, 926, 927, 928, 931, 969, 1018, 1036, 1042, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1054, 1055, 1056, 1063, 1065, 1066, 1106, 1107, 1118, 1141, 1160, 1167, 1168], "being": [15, 79, 108, 109, 110, 122, 128, 151, 162, 238, 248, 249, 279, 293, 335, 371, 534, 535, 536, 537, 538, 540, 541, 542, 655, 705, 724, 728, 735, 736, 816, 854, 870, 911, 942, 1036, 1160, 1168], "content": [15, 550, 705, 1069, 1160], "final": [15, 34, 72, 127, 279, 386, 387, 388, 705, 736, 816, 926, 927, 928, 1160], "item": [15, 80, 109, 173, 217, 220, 279, 338, 391, 436, 439, 445, 448, 456, 544, 589, 705, 873, 930, 978, 981, 987, 990, 998, 1058, 1108, 1160], "num": [15, 34, 243, 279, 410, 705, 946, 1160], "fmt_table_cell_list_len": 15, "10": [15, 18, 30, 31, 33, 34, 35, 36, 39, 53, 57, 72, 80, 104, 111, 122, 130, 138, 140, 153, 163, 172, 173, 175, 181, 183, 184, 185, 203, 207, 208, 209, 213, 214, 216, 222, 233, 254, 258, 261, 262, 264, 266, 267, 268, 269, 270, 271, 272, 279, 288, 292, 301, 302, 303, 305, 323, 329, 331, 334, 338, 342, 344, 350, 363, 364, 370, 371, 378, 381, 405, 406, 409, 415, 425, 429, 430, 439, 440, 446, 447, 462, 465, 466, 469, 472, 488, 490, 499, 513, 516, 531, 555, 611, 625, 638, 644, 649, 652, 655, 658, 660, 662, 667, 669, 690, 693, 705, 727, 728, 743, 748, 750, 755, 765, 766, 771, 773, 783, 784, 792, 797, 800, 801, 803, 805, 806, 807, 808, 809, 810, 811, 816, 819, 859, 873, 878, 880, 886, 910, 918, 921, 924, 941, 954, 971, 981, 982, 988, 989, 1004, 1007, 1008, 1011, 1014, 1018, 1032, 1061, 1062, 1131, 1160, 1168], "size": [16, 39, 53, 108, 109, 110, 136, 137, 138, 140, 142, 161, 248, 279, 527, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 632, 664, 665, 682, 683, 705, 727, 816, 925, 1042, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1160, 1168], "overwrit": [16, 32, 33, 97, 99, 100, 101, 103, 108, 109, 117, 118, 122, 126, 146, 249, 279, 288, 705, 736, 816], "chunk": [16, 53, 106, 108, 109, 120, 122, 125, 126, 127, 138, 140, 163, 191, 203, 279, 292, 524, 705, 816, 825, 857, 931, 938, 1024, 1039, 1136, 1160], "stream": [16, 35, 36, 51, 52, 53, 78, 79, 116, 150, 174, 177, 192, 244, 246, 279, 722, 727, 728, 734, 736, 742, 745, 751, 756, 757, 761, 766, 779, 781, 786, 787, 816], "engin": [16, 32, 110, 111, 113, 142, 174, 177, 192, 196, 246, 265, 279, 742, 745, 751, 756, 757, 761, 787, 804, 816, 1018, 1160], "determin": [16, 31, 34, 51, 70, 72, 80, 100, 103, 108, 109, 110, 113, 119, 120, 122, 127, 129, 147, 157, 169, 175, 178, 190, 191, 196, 208, 216, 245, 250, 279, 320, 354, 370, 371, 378, 468, 479, 488, 520, 526, 534, 535, 536, 537, 538, 540, 541, 542, 554, 571, 597, 599, 600, 651, 678, 681, 696, 705, 743, 746, 771, 816, 852, 890, 910, 911, 918, 942, 1010, 1017, 1036, 1073, 1090, 1116, 1118, 1119, 1160], "schema": [16, 33, 57, 73, 74, 75, 80, 92, 93, 95, 97, 99, 100, 101, 103, 108, 109, 110, 111, 115, 117, 118, 121, 122, 126, 127, 136, 138, 147, 152, 153, 160, 161, 191, 196, 201, 204, 240, 279, 306, 307, 308, 468, 488, 571, 625, 687, 705, 725, 726, 733, 756, 757, 762, 775, 799, 804, 816, 819, 840, 862, 1090, 1160], "thread": [16, 31, 51, 79, 106, 108, 109, 111, 142, 279, 293, 442, 480, 705, 728, 816, 984], "pool": [16, 79, 142, 728, 816], "For": [16, 33, 34, 111, 112, 113, 123, 124, 159, 163, 192, 193, 216, 265, 279, 386, 387, 388, 468, 480, 489, 525, 554, 561, 568, 569, 570, 582, 644, 654, 658, 659, 701, 705, 732, 752, 771, 804, 816, 825, 926, 927, 928, 931, 1040, 1073, 1080, 1087, 1088, 1089, 1101, 1141, 1160], "some": [16, 29, 33, 34, 63, 82, 100, 108, 109, 110, 113, 122, 146, 159, 279, 701, 732, 816, 954, 1160, 1168], "dataset": [16, 39, 108, 109, 120, 122, 127, 128, 192, 279, 426, 705, 717, 751, 756, 757, 816, 969, 1160], "esp": 16, "when": [16, 18, 20, 24, 31, 34, 39, 42, 51, 53, 62, 63, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 108, 109, 110, 113, 114, 116, 119, 120, 122, 123, 125, 126, 128, 131, 132, 133, 134, 138, 140, 147, 150, 160, 161, 163, 165, 169, 175, 176, 178, 179, 192, 196, 207, 216, 217, 219, 222, 223, 226, 230, 238, 240, 244, 246, 249, 255, 279, 323, 386, 387, 388, 394, 461, 468, 479, 489, 516, 530, 531, 547, 556, 557, 573, 574, 592, 593, 594, 597, 635, 644, 658, 705, 722, 738, 743, 744, 746, 747, 751, 756, 757, 771, 773, 774, 777, 781, 786, 787, 789, 793, 816, 825, 859, 918, 925, 926, 927, 928, 931, 934, 1003, 1017, 1045, 1061, 1062, 1065, 1092, 1093, 1111, 1112, 1113, 1116, 1137, 1160], "have": [16, 29, 33, 34, 42, 63, 72, 82, 98, 107, 108, 109, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 127, 138, 140, 163, 190, 211, 216, 218, 219, 237, 279, 335, 386, 387, 388, 480, 489, 523, 531, 570, 705, 730, 761, 768, 771, 779, 795, 816, 819, 825, 870, 926, 927, 928, 931, 939, 1038, 1118, 1160, 1168], "too": [16, 175, 193, 216, 250, 279, 367, 371, 378, 530, 531, 534, 535, 536, 537, 538, 540, 541, 542, 649, 650, 652, 653, 692, 693, 705, 736, 743, 752, 771, 816, 907, 911, 918], "optimist": 16, "lead": [16, 39, 104, 128, 175, 176, 178, 179, 216, 226, 279, 403, 461, 478, 480, 531, 546, 547, 577, 591, 592, 594, 612, 641, 705, 743, 744, 746, 747, 756, 757, 771, 777, 799, 804, 816, 1003, 1018, 1063, 1065, 1096, 1110, 1111, 1113, 1160], "out": [16, 51, 52, 53, 104, 130, 216, 219, 279, 312, 445, 467, 561, 564, 695, 771, 816, 843, 987, 1009, 1080, 1083], "memori": [16, 53, 80, 97, 98, 101, 102, 103, 108, 109, 110, 113, 114, 120, 122, 125, 126, 127, 146, 163, 196, 219, 228, 265, 279, 512, 524, 549, 705, 727, 816, 825, 931, 1018, 1039, 1067, 1068, 1160], "error": [16, 33, 79, 108, 109, 122, 151, 175, 193, 208, 216, 217, 250, 279, 288, 312, 318, 367, 371, 378, 425, 448, 467, 499, 531, 534, 535, 536, 537, 538, 540, 541, 542, 561, 564, 568, 570, 571, 572, 597, 598, 599, 602, 649, 650, 652, 653, 692, 693, 705, 724, 728, 743, 752, 771, 799, 804, 816, 843, 848, 907, 911, 918, 990, 1009, 1080, 1083, 1087, 1089, 1090, 1091, 1116, 1117, 1118, 1121, 1160], "row": [16, 21, 26, 31, 34, 37, 39, 51, 53, 72, 73, 75, 80, 89, 91, 96, 100, 101, 103, 104, 108, 109, 110, 113, 114, 116, 117, 120, 122, 125, 126, 127, 128, 131, 132, 136, 138, 147, 150, 152, 159, 163, 166, 169, 173, 174, 175, 177, 180, 181, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 200, 204, 219, 220, 229, 233, 234, 237, 239, 244, 246, 248, 249, 256, 263, 265, 273, 279, 304, 391, 406, 430, 443, 468, 512, 513, 527, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 555, 557, 567, 571, 611, 632, 635, 644, 645, 658, 662, 664, 665, 680, 682, 683, 690, 695, 705, 722, 725, 727, 732, 736, 739, 740, 743, 748, 751, 752, 753, 755, 757, 761, 780, 784, 785, 786, 787, 789, 795, 802, 804, 812, 816, 825, 930, 931, 941, 985, 1032, 1042, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1074, 1086, 1090, 1131, 1160, 1168], "per": [16, 31, 34, 51, 136, 138, 150, 173, 204, 205, 223, 230, 244, 255, 268, 270, 271, 279, 293, 317, 442, 445, 467, 480, 557, 622, 635, 705, 722, 774, 781, 786, 793, 807, 809, 810, 816, 984, 987, 1009, 1148, 1160], "everi": [16, 31, 51, 108, 109, 122, 175, 178, 234, 237, 250, 279, 330, 331, 332, 333, 334, 335, 371, 378, 391, 433, 434, 439, 443, 445, 446, 457, 462, 466, 567, 613, 644, 645, 705, 736, 743, 746, 785, 816, 866, 867, 868, 869, 870, 911, 918, 930, 939, 975, 976, 981, 985, 987, 988, 999, 1004, 1008, 1086, 1133, 1160], "process": [16, 31, 51, 52, 53, 108, 109, 110, 122, 142, 279, 727, 816], "liter": [17, 21, 33, 57, 79, 110, 113, 119, 138, 139, 140, 141, 173, 190, 197, 198, 202, 203, 206, 217, 218, 222, 223, 226, 232, 236, 249, 254, 255, 279, 288, 311, 323, 344, 384, 385, 392, 399, 402, 404, 410, 428, 475, 479, 495, 497, 507, 508, 517, 561, 563, 582, 583, 608, 618, 627, 629, 632, 636, 638, 639, 640, 647, 648, 649, 650, 651, 652, 653, 664, 665, 667, 672, 676, 678, 681, 684, 687, 689, 691, 692, 693, 696, 705, 728, 738, 773, 774, 777, 789, 792, 793, 816, 819, 823, 824, 842, 859, 871, 880, 932, 946, 1036, 1061, 1062, 1065, 1080, 1082, 1101, 1102, 1160, 1167], "left": [17, 34, 59, 72, 131, 132, 133, 134, 175, 176, 178, 179, 192, 193, 216, 249, 279, 336, 386, 387, 388, 409, 410, 520, 531, 534, 535, 536, 537, 538, 540, 541, 542, 545, 576, 616, 638, 644, 645, 649, 650, 652, 653, 658, 680, 692, 693, 695, 705, 743, 744, 746, 747, 751, 752, 771, 789, 816, 871, 926, 927, 928, 946, 1036, 1059, 1095, 1143, 1160], "center": [17, 34, 279, 386, 387, 388, 532, 533, 534, 535, 536, 537, 538, 540, 541, 542, 705, 926, 927, 928, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1054, 1055, 1056, 1160], "right": [17, 19, 34, 108, 109, 131, 132, 133, 134, 175, 176, 178, 179, 192, 193, 216, 249, 279, 336, 386, 387, 388, 410, 457, 458, 459, 460, 520, 531, 534, 535, 536, 537, 538, 540, 541, 542, 545, 554, 584, 638, 649, 650, 652, 653, 692, 693, 705, 743, 744, 746, 747, 751, 752, 771, 789, 816, 871, 926, 927, 928, 946, 999, 1000, 1001, 1002, 1036, 1059, 1073, 1103, 1160], "cell": [17, 34, 279], "align": [17, 34, 72, 80, 279], "valueerror": [17, 21], "recognis": [17, 21, 135], "column_abc": 17, "column_xyz": 17, "visibl": [18, 161, 279, 925, 1160], "eg": [18, 26, 34, 80, 111, 144, 279, 371, 597, 599, 618, 705, 939, 1116, 1118, 1160], "low": [18, 110, 142, 520, 705, 1036, 1160], "rang": [18, 34, 110, 111, 156, 161, 175, 191, 279, 337, 348, 362, 368, 369, 371, 378, 379, 409, 632, 639, 648, 649, 650, 651, 652, 653, 664, 665, 691, 692, 693, 705, 743, 816, 872, 884, 902, 908, 909, 911, 918, 919, 925, 1032, 1160], "100": [18, 34, 100, 103, 108, 109, 117, 122, 126, 226, 279, 547, 571, 600, 705, 777, 816, 1048, 1049, 1051, 1065, 1090, 1119, 1160, 1168], "98": [18, 184, 279, 316, 403, 556, 600, 612, 617, 705, 1119], "99": [18, 34, 164, 165, 184, 187, 249, 279, 287, 316, 392, 394, 403, 556, 612, 617, 705, 737, 738, 789, 816, 924, 932, 1160], "tbl_col": 18, "95": [18, 287, 705], "96": [18, 287, 705], "97": [18, 184, 279, 287, 705], "move": [19, 219, 279, 386, 387, 388, 534, 535, 537, 541, 705, 926, 927, 928, 1048, 1049, 1051, 1055, 1160], "inlin": [19, 219, 279, 561, 568, 569, 582, 1080, 1087, 1088, 1101], "parenthes": 19, "inform": [20, 24, 33, 77, 112, 123, 124, 127, 131, 133, 155, 279, 426, 554, 561, 568, 569, 582, 705, 766, 816, 853, 969, 1073, 1080, 1087, 1088, 1101, 1160], "below": [20, 33, 112, 123, 124, 159, 175, 208, 279, 394, 649, 650, 652, 653, 692, 693, 695, 701, 705, 732, 743, 816], "ascii_ful": 21, "ascii_full_condens": 21, "ascii_no_bord": 21, "ascii_borders_onli": 21, "ascii_borders_only_condens": 21, "ascii_horizontal_onli": 21, "ascii_markdown": 21, "utf8_ful": [21, 72, 104], "utf8_no_bord": 21, "utf8_borders_onli": 21, "utf8_horizontal_onli": 21, "noth": [21, 317, 568, 572, 705, 1087, 1091], "rounded_corn": 21, "border": 21, "line": [21, 34, 108, 109, 113, 122, 173, 186, 188, 279, 568, 1087], "includ": [21, 29, 31, 33, 34, 51, 77, 110, 112, 123, 124, 138, 150, 156, 161, 206, 219, 244, 245, 248, 249, 279, 336, 372, 410, 520, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 587, 588, 592, 593, 644, 682, 683, 705, 722, 786, 789, 816, 819, 871, 872, 912, 925, 946, 1036, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1106, 1107, 1111, 1150, 1160], "divid": [21, 336, 371, 378, 386, 387, 388, 426, 520, 705, 871, 911, 918, 926, 927, 928, 969, 1036, 1160], "same": [21, 33, 34, 61, 63, 72, 78, 79, 80, 81, 82, 114, 122, 131, 132, 133, 134, 136, 144, 174, 196, 208, 219, 230, 246, 254, 255, 258, 265, 279, 285, 292, 340, 341, 403, 484, 487, 512, 532, 533, 534, 535, 536, 537, 538, 540, 541, 542, 557, 573, 607, 612, 705, 727, 728, 742, 756, 757, 781, 787, 792, 793, 797, 816, 821, 825, 826, 871, 875, 876, 880, 1018, 1036, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1054, 1055, 1056, 1092, 1151, 1160], "dens": [21, 173, 279, 523, 705, 1038, 1160], "space": [21, 175, 279, 743, 816], "horizont": [21, 80, 169, 183, 248, 279, 627, 629, 639, 640, 644, 645, 647, 655, 658, 672, 676, 680, 689], "markdown": 21, "compat": [21, 34, 39, 53, 279, 561, 562, 563, 568, 569, 570, 582, 583, 816, 819, 1080, 1081, 1082, 1087, 1088, 1089, 1101, 1102], "No": [21, 603, 1122], "appli": [21, 31, 34, 51, 57, 80, 122, 135, 138, 140, 169, 196, 207, 265, 279, 346, 347, 348, 352, 354, 355, 356, 358, 360, 362, 365, 368, 369, 372, 375, 379, 380, 382, 387, 388, 476, 478, 480, 516, 532, 534, 535, 537, 541, 582, 597, 598, 599, 602, 644, 645, 658, 668, 669, 670, 680, 695, 705, 748, 755, 756, 757, 765, 804, 816, 859, 882, 883, 884, 888, 890, 891, 895, 897, 900, 902, 905, 908, 909, 912, 915, 919, 920, 922, 927, 928, 1018, 1046, 1048, 1049, 1051, 1055, 1101, 1116, 1117, 1118, 1121, 1160], "round": [21, 34, 74, 104, 110, 279, 322, 328, 398, 614, 705, 856, 937, 1160], "corner": [21, 34, 104, 279], "op": [21, 140, 279, 526, 705, 816, 1118, 1160], "one": [21, 31, 32, 34, 51, 62, 72, 89, 97, 99, 100, 101, 102, 103, 108, 109, 113, 117, 118, 119, 122, 139, 140, 141, 144, 165, 166, 173, 174, 175, 176, 178, 179, 190, 200, 208, 216, 217, 218, 224, 226, 240, 243, 259, 279, 287, 336, 394, 403, 461, 468, 473, 531, 547, 556, 569, 612, 670, 685, 695, 701, 705, 738, 739, 742, 743, 744, 746, 747, 761, 771, 776, 777, 794, 798, 816, 825, 871, 934, 965, 1003, 1010, 1015, 1036, 1065, 1088, 1125, 1160], "more": [21, 34, 37, 39, 53, 62, 72, 80, 81, 82, 96, 97, 98, 99, 100, 101, 102, 103, 110, 111, 112, 113, 117, 118, 119, 120, 123, 124, 131, 133, 138, 140, 144, 155, 156, 190, 194, 196, 200, 204, 217, 218, 220, 240, 246, 265, 279, 290, 293, 309, 426, 456, 470, 473, 478, 480, 511, 544, 554, 569, 573, 597, 598, 599, 619, 685, 695, 705, 761, 787, 816, 819, 826, 841, 853, 872, 965, 969, 998, 1012, 1018, 1058, 1073, 1088, 1092, 1116, 1117, 1118, 1145, 1160, 1168], "semigraph": 21, "box": [21, 196, 279], "draw": [21, 26, 137, 1168], "found": [21, 31, 34, 51, 59, 84, 93, 95, 100, 104, 160, 279, 545, 572, 595, 596, 597, 599, 705, 816, 1059, 1091, 1114, 1115, 1116, 1118, 1160, 1167], "unicod": 21, "block": [21, 79, 174, 177, 246, 279, 695, 728, 742, 745, 769, 787, 795, 804, 816, 1061, 1062, 1160], "http": [21, 34, 35, 36, 98, 110, 111, 146, 155, 279, 568, 570, 1087, 1089], "en": [21, 34, 279], "wikipedia": 21, "org": [21, 35, 36, 98, 110, 111, 146, 155, 279], "wiki": 21, "drawing_charact": 21, "box_draw": 21, "mno": 21, "tbl_format": 21, "tbl_hide_column_data_typ": 21, "tbl_hide_dataframe_shap": 21, "hide": [22, 23, 24, 25, 34, 279], "etc": [22, 33, 34, 108, 112, 114, 116, 120, 123, 124, 125, 279, 705, 819, 1061, 1062, 1160], "separ": [25, 31, 51, 106, 108, 109, 122, 206, 208, 238, 245, 247, 279, 293, 443, 448, 480, 567, 640, 644, 645, 705, 788, 816, 985, 990, 1086, 1129, 1137, 1160], "between": [25, 80, 135, 136, 138, 140, 155, 210, 271, 279, 318, 338, 339, 410, 439, 440, 447, 448, 457, 458, 459, 460, 465, 469, 513, 520, 521, 538, 560, 633, 634, 641, 643, 679, 682, 683, 705, 767, 810, 816, 848, 853, 873, 874, 946, 981, 982, 989, 990, 999, 1000, 1001, 1002, 1007, 1011, 1032, 1036, 1037, 1052, 1079, 1160], "set_tbl_column_data_type_inlin": 25, "max": [26, 34, 39, 53, 57, 142, 156, 165, 174, 208, 216, 279, 324, 331, 394, 468, 512, 523, 531, 534, 546, 589, 672, 685, 705, 738, 742, 771, 816, 860, 866, 872, 934, 1010, 1038, 1048, 1063, 1108, 1160], "both": [26, 31, 51, 63, 81, 82, 175, 176, 178, 179, 192, 193, 201, 216, 217, 249, 279, 292, 323, 336, 389, 410, 520, 531, 534, 535, 536, 537, 538, 540, 541, 542, 649, 650, 652, 653, 692, 693, 701, 705, 716, 743, 744, 746, 747, 751, 752, 762, 771, 789, 816, 859, 946, 956, 1160], "tbl_row": 26, "maximum": [27, 31, 51, 108, 109, 122, 128, 136, 137, 138, 140, 173, 175, 197, 279, 433, 481, 505, 514, 523, 671, 672, 705, 743, 758, 816, 892, 975, 1019, 1027, 1033, 1038, 1160], "enabl": [28, 63, 81, 82, 131, 132, 133, 134, 143, 222, 254, 279, 289, 291, 546, 622, 701, 705, 727, 773, 792, 816, 823, 824, 1063, 1148, 1160], "addit": [28, 33, 34, 100, 112, 113, 123, 124, 136, 157, 159, 162, 174, 177, 206, 222, 223, 224, 230, 247, 254, 255, 258, 279, 286, 350, 389, 392, 512, 557, 561, 568, 569, 582, 635, 638, 639, 640, 656, 684, 687, 705, 731, 735, 742, 745, 773, 774, 776, 781, 788, 792, 793, 797, 816, 878, 886, 932, 1080, 1087, 1088, 1101, 1160], "verbos": [28, 131, 133, 144, 569, 1088], "debug": [28, 727, 736, 756, 757, 816, 1168], "log": [28, 74, 316, 383, 473, 497, 517, 617, 705, 847, 924, 1144, 1160], "do_polars_oper": 28, "if_set": 29, "env_onli": 29, "dict": [29, 33, 34, 39, 60, 73, 75, 77, 97, 99, 100, 101, 102, 103, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 138, 168, 190, 206, 212, 217, 218, 219, 221, 236, 237, 245, 279, 479, 530, 705, 769, 772, 816, 1017, 1160], "show": [29, 34, 61, 159, 173, 194, 205, 279, 732, 766, 779, 816], "variabl": [29, 54, 59, 127, 139, 142, 200, 238, 279, 761, 816, 1137, 1160, 1167], "chang": [29, 72, 79, 108, 109, 110, 128, 248, 249, 250, 279, 293, 335, 336, 338, 371, 480, 513, 520, 534, 535, 536, 537, 538, 540, 541, 542, 705, 728, 816, 825, 853, 854, 870, 871, 911, 942, 1032, 1036, 1068, 1160], "restrict": [29, 589, 1108], "dictionari": [29, 34, 97, 99, 100, 101, 103, 108, 109, 110, 111, 115, 117, 118, 121, 122, 126, 190, 206, 217, 218, 219, 236, 237, 279, 479, 705, 816, 1017, 1160], "those": [29, 34, 108, 113, 219, 249, 279, 523, 568, 670, 705, 789, 816, 819, 1038, 1087, 1160], "been": [29, 34, 146, 147, 149, 176, 177, 178, 179, 260, 279, 293, 317, 413, 417, 420, 437, 440, 447, 451, 465, 469, 476, 480, 523, 532, 534, 535, 536, 537, 538, 540, 541, 542, 562, 575, 576, 577, 578, 584, 585, 591, 630, 668, 705, 721, 744, 745, 746, 747, 756, 768, 796, 799, 816, 826, 951, 957, 979, 982, 989, 993, 1007, 1011, 1038, 1046, 1081, 1094, 1095, 1096, 1097, 1103, 1104, 1110, 1160], "set_fmt_float": 29, "via": [29, 107, 108, 109, 110, 113, 114, 115, 116, 117, 118, 119, 121, 122, 125, 126, 127, 190, 218, 279, 293, 480, 570, 705, 730, 768, 816, 1089], "set_stat": 29, "all_stat": 29, "binaryio": [30, 35, 36, 107, 108, 113, 114, 115, 116, 119, 120, 121, 279], "bytesio": [30, 31, 34, 35, 36, 39, 107, 108, 109, 113, 114, 115, 116, 117, 118, 119, 120, 121, 279, 730, 768, 816], "compress": [30, 35, 36, 39, 52, 53, 279, 816], "avrocompress": [30, 279], "uncompress": [30, 35, 36, 39, 53, 114, 125, 279, 816], "write": [30, 31, 32, 33, 34, 35, 36, 37, 39, 51, 52, 53, 109, 114, 144, 279, 323, 493, 705, 754, 779, 816, 859, 1160], "apach": [30, 35, 36, 39, 107, 110, 111, 124, 279, 717], "avro": [30, 107, 279, 717], "should": [30, 31, 32, 34, 35, 36, 37, 38, 39, 51, 52, 53, 80, 97, 99, 101, 103, 112, 117, 118, 120, 122, 126, 127, 128, 135, 136, 140, 150, 157, 175, 190, 193, 196, 216, 217, 218, 219, 237, 238, 244, 247, 250, 265, 279, 287, 320, 335, 367, 371, 378, 381, 389, 419, 421, 442, 480, 531, 532, 533, 534, 535, 536, 537, 538, 540, 541, 542, 545, 554, 622, 649, 650, 652, 653, 654, 656, 663, 667, 670, 682, 683, 692, 693, 695, 705, 722, 731, 736, 743, 751, 752, 757, 771, 775, 779, 781, 786, 788, 796, 816, 819, 852, 870, 907, 911, 918, 921, 984, 1018, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1054, 1055, 1056, 1059, 1073, 1148, 1160], "snappi": [30, 39, 53, 279, 816], "deflat": [30, 279], "import": [30, 31, 33, 34, 35, 36, 39, 42, 72, 97, 98, 101, 102, 122, 128, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 151, 156, 157, 159, 173, 175, 191, 193, 200, 206, 208, 238, 240, 241, 248, 250, 279, 337, 342, 343, 344, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 533, 534, 535, 537, 540, 541, 542, 633, 634, 649, 650, 652, 654, 692, 693, 701, 705, 717, 724, 728, 730, 731, 732, 743, 752, 757, 761, 775, 816, 863, 865, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 950, 955, 959, 960, 965, 1047, 1071, 1134, 1160, 1168], "pathlib": [30, 31, 35, 36, 39, 122, 279], "foo": [30, 31, 33, 35, 36, 37, 38, 39, 61, 151, 154, 155, 157, 158, 159, 160, 163, 166, 167, 169, 170, 171, 172, 180, 181, 182, 183, 184, 185, 187, 192, 196, 197, 198, 199, 202, 205, 208, 210, 212, 213, 214, 217, 220, 221, 222, 225, 229, 231, 232, 233, 235, 237, 238, 239, 240, 241, 242, 245, 246, 247, 251, 252, 253, 257, 279, 319, 336, 367, 406, 408, 430, 436, 444, 445, 449, 484, 487, 488, 489, 490, 491, 492, 520, 527, 560, 563, 565, 567, 569, 570, 587, 589, 592, 593, 594, 595, 596, 601, 604, 611, 613, 631, 637, 641, 642, 643, 657, 661, 662, 666, 671, 673, 674, 675, 677, 679, 684, 686, 690, 694, 695, 701, 705, 724, 729, 731, 732, 733, 739, 749, 750, 751, 764, 769, 772, 773, 787, 788, 791, 794, 816, 819, 850, 871, 907, 990, 1036, 1042, 1082, 1084, 1086, 1088, 1089, 1108, 1114, 1115, 1120, 1123, 1160], "bar": [30, 31, 33, 35, 36, 37, 38, 39, 61, 151, 154, 155, 157, 158, 159, 160, 163, 166, 167, 169, 170, 171, 172, 181, 183, 184, 185, 187, 192, 196, 197, 198, 199, 202, 205, 208, 210, 212, 213, 214, 217, 220, 221, 222, 229, 231, 232, 233, 235, 237, 238, 239, 240, 241, 242, 246, 247, 251, 252, 257, 279, 319, 408, 484, 485, 486, 487, 488, 489, 490, 491, 492, 554, 563, 565, 567, 569, 570, 587, 589, 595, 596, 631, 637, 641, 642, 643, 657, 662, 666, 671, 673, 674, 675, 677, 684, 686, 690, 694, 695, 701, 705, 724, 729, 731, 732, 733, 739, 749, 750, 751, 764, 769, 772, 773, 787, 788, 791, 816, 819, 850, 990, 1073, 1082, 1084, 1086, 1088, 1089, 1108, 1114, 1115, 1160], "ham": [30, 31, 33, 35, 36, 39, 151, 154, 155, 157, 158, 159, 160, 166, 167, 170, 180, 181, 183, 192, 197, 198, 199, 202, 205, 210, 212, 214, 217, 220, 221, 222, 229, 231, 232, 233, 238, 239, 240, 241, 242, 246, 251, 252, 279, 319, 491, 724, 729, 731, 732, 733, 739, 751, 764, 769, 772, 773, 787, 794, 816, 850], "d": [30, 31, 33, 34, 35, 36, 39, 100, 128, 156, 173, 175, 180, 181, 184, 192, 233, 235, 248, 252, 261, 262, 264, 266, 267, 268, 269, 270, 271, 272, 279, 286, 288, 351, 374, 377, 410, 516, 549, 563, 569, 588, 597, 598, 599, 638, 654, 660, 705, 743, 751, 800, 801, 803, 805, 806, 807, 808, 809, 810, 811, 816, 853, 887, 914, 917, 946, 1082, 1088, 1107, 1116, 1117, 1118, 1160], "e": [30, 31, 33, 35, 36, 39, 51, 98, 107, 108, 109, 113, 114, 115, 116, 117, 118, 119, 120, 121, 125, 128, 156, 173, 175, 181, 193, 216, 233, 235, 240, 248, 250, 279, 286, 293, 367, 371, 378, 383, 389, 410, 471, 479, 480, 485, 486, 488, 489, 490, 491, 492, 531, 534, 535, 536, 537, 538, 540, 541, 542, 549, 554, 649, 650, 652, 653, 656, 670, 692, 693, 695, 705, 730, 743, 752, 754, 768, 769, 771, 816, 819, 907, 911, 918, 924, 946, 1060, 1073, 1141, 1160, 1168], "dirpath": [30, 31, 35, 36, 39, 122, 279], "new_fil": [30, 31, 35, 36, 39, 279], "has_head": [31, 34, 51, 108, 109, 113, 122, 279, 816], "line_termin": [31, 51, 279, 816], "quote_char": [31, 51, 108, 109, 122, 279, 816], "batch_siz": [31, 51, 108, 109, 110, 126, 128, 279, 816], "1024": [31, 51, 53, 108, 109, 110, 126, 279, 816], "datetime_format": [31, 51, 279, 816], "date_format": [31, 51, 279, 816], "time_format": [31, 51, 279, 816], "float_precis": [31, 34, 51, 279, 816], "null_valu": [31, 51, 108, 109, 122, 279, 816], "quote_styl": [31, 51, 279, 816], "csvquotestyl": [31, 51, 279, 816], "textiowrapp": [31, 279], "comma": [31, 279], "csv": [31, 51, 52, 53, 108, 109, 113, 122, 279, 717, 816], "If": [31, 32, 33, 34, 35, 36, 37, 38, 39, 51, 53, 57, 63, 77, 79, 80, 97, 98, 99, 100, 101, 102, 103, 108, 109, 110, 112, 113, 114, 116, 117, 118, 119, 120, 122, 123, 125, 126, 127, 128, 131, 132, 133, 134, 139, 146, 147, 150, 159, 163, 173, 175, 176, 178, 179, 181, 189, 190, 193, 195, 196, 204, 208, 216, 218, 219, 220, 226, 229, 233, 237, 238, 240, 244, 245, 246, 248, 249, 279, 289, 291, 293, 344, 363, 364, 378, 395, 426, 456, 461, 462, 468, 478, 479, 480, 491, 512, 520, 523, 525, 527, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 544, 545, 547, 550, 554, 555, 569, 570, 571, 577, 585, 586, 587, 588, 589, 591, 592, 593, 594, 597, 598, 599, 602, 605, 622, 626, 628, 630, 632, 636, 641, 642, 644, 649, 650, 652, 653, 654, 658, 664, 665, 667, 670, 678, 681, 682, 683, 687, 692, 693, 695, 696, 705, 722, 727, 728, 732, 734, 743, 744, 746, 747, 751, 752, 757, 761, 769, 771, 775, 777, 780, 786, 787, 789, 796, 799, 804, 816, 819, 823, 824, 825, 826, 859, 871, 880, 903, 904, 918, 931, 939, 941, 942, 968, 969, 971, 998, 1003, 1004, 1010, 1018, 1036, 1038, 1040, 1042, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1058, 1059, 1063, 1065, 1069, 1073, 1074, 1088, 1089, 1090, 1096, 1104, 1105, 1106, 1107, 1108, 1110, 1111, 1112, 1113, 1116, 1117, 1118, 1121, 1124, 1131, 1136, 1141, 1148, 1150, 1160, 1167], "instead": [31, 37, 38, 57, 61, 72, 79, 80, 108, 109, 110, 113, 119, 120, 122, 127, 128, 138, 173, 175, 190, 193, 196, 204, 206, 216, 217, 218, 219, 222, 223, 226, 227, 241, 250, 254, 255, 279, 303, 324, 325, 336, 367, 370, 371, 378, 389, 461, 478, 520, 531, 534, 535, 536, 537, 538, 540, 541, 542, 547, 548, 573, 574, 577, 585, 591, 592, 593, 594, 597, 599, 605, 632, 636, 637, 649, 650, 651, 652, 653, 654, 664, 665, 678, 681, 687, 692, 693, 696, 705, 728, 737, 743, 752, 771, 773, 774, 775, 777, 778, 789, 792, 793, 796, 816, 819, 835, 860, 861, 871, 907, 910, 911, 918, 1003, 1036, 1061, 1062, 1065, 1066, 1092, 1093, 1096, 1104, 1110, 1111, 1112, 1113, 1116, 1118, 1124, 1142, 1160, 1167], "whether": [31, 51, 101, 103, 140, 143, 150, 224, 244, 279, 289, 291, 354, 372, 431, 432, 485, 486, 546, 705, 722, 756, 757, 776, 781, 786, 816, 819, 823, 824, 851, 854, 890, 912, 973, 974, 1160, 1167], "header": [31, 34, 39, 51, 53, 104, 108, 109, 113, 122, 160, 208, 245, 279, 816], "field": [31, 33, 51, 64, 93, 95, 100, 240, 247, 279, 468, 479, 529, 569, 570, 571, 588, 589, 607, 644, 645, 669, 687, 705, 788, 816, 871, 1010, 1036, 1044, 1089, 1105, 1107, 1108, 1127, 1129, 1160], "symbol": [31, 51, 279, 705, 816], "end": [31, 34, 51, 108, 109, 120, 122, 175, 279, 311, 314, 315, 342, 371, 389, 410, 462, 561, 566, 569, 579, 586, 590, 632, 649, 650, 652, 653, 656, 664, 665, 692, 693, 695, 705, 743, 748, 755, 766, 816, 819, 845, 878, 911, 946, 1004, 1085, 1088, 1098, 1105, 1109, 1160], "byte": [31, 51, 53, 108, 109, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 161, 279, 573, 575, 816, 925, 1092, 1094, 1160], "quot": [31, 32, 51, 108, 109, 122, 279, 816], "specifi": [31, 34, 51, 72, 84, 93, 95, 113, 119, 138, 150, 151, 157, 161, 162, 165, 174, 175, 176, 177, 178, 179, 192, 206, 216, 217, 219, 222, 223, 224, 226, 230, 244, 247, 254, 255, 258, 279, 323, 386, 387, 388, 389, 394, 479, 512, 526, 534, 535, 536, 537, 538, 540, 541, 542, 547, 557, 635, 638, 639, 640, 649, 650, 652, 653, 656, 684, 687, 692, 693, 705, 722, 724, 731, 735, 738, 742, 743, 744, 745, 746, 747, 751, 771, 773, 774, 776, 777, 781, 786, 788, 792, 793, 797, 816, 859, 925, 926, 927, 928, 934, 1065, 1160], "defin": [31, 34, 42, 51, 110, 135, 136, 138, 147, 151, 159, 162, 175, 176, 178, 179, 196, 204, 207, 216, 249, 260, 265, 279, 293, 410, 467, 480, 516, 520, 530, 531, 534, 535, 536, 537, 538, 540, 541, 542, 630, 649, 650, 652, 653, 667, 670, 687, 692, 693, 705, 724, 732, 735, 743, 744, 746, 747, 765, 771, 789, 799, 804, 816, 819, 826, 946, 1009, 1018, 1036, 1045, 1160], "chrono": [31, 51, 279, 374, 377, 597, 598, 599, 602, 816, 914, 917, 1116, 1117, 1118, 1121], "rust": [31, 39, 51, 90, 110, 114, 116, 120, 196, 265, 279, 570, 816, 1018, 1089, 1160], "crate": [31, 51, 279, 561, 562, 563, 568, 569, 570, 582, 583, 597, 598, 599, 602, 816, 819, 1080, 1081, 1082, 1087, 1088, 1089, 1101, 1102, 1116, 1117, 1118, 1121], "fraction": [31, 51, 131, 132, 133, 134, 220, 279, 372, 456, 513, 544, 597, 599, 705, 816, 912, 998, 1032, 1058, 1116, 1118, 1160], "second": [31, 51, 131, 132, 133, 134, 137, 175, 193, 216, 250, 279, 367, 371, 378, 531, 534, 535, 536, 537, 538, 540, 541, 542, 597, 599, 649, 650, 651, 652, 653, 654, 691, 692, 693, 695, 705, 743, 752, 771, 816, 819, 907, 911, 918, 1116, 1118, 1168], "infer": [31, 51, 97, 99, 100, 101, 102, 103, 108, 109, 110, 113, 117, 118, 122, 126, 127, 147, 196, 279, 527, 571, 597, 598, 599, 600, 602, 681, 705, 816, 1042, 1090, 1116, 1117, 1118, 1119, 1121, 1160], "timeunit": [31, 42, 44, 51, 279, 343, 344, 376, 381, 599, 649, 650, 651, 652, 653, 654, 816, 819, 879, 880, 916, 921, 1118], "frame": [31, 32, 34, 51, 57, 58, 59, 60, 61, 62, 72, 79, 80, 100, 109, 113, 119, 131, 132, 138, 151, 152, 190, 191, 196, 201, 204, 207, 217, 218, 219, 241, 248, 249, 279, 724, 725, 762, 765, 789, 816, 819, 858, 1160, 1167, 1168], "datetim": [31, 33, 34, 51, 72, 104, 113, 138, 151, 156, 173, 175, 176, 178, 179, 191, 193, 216, 250, 279, 342, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 436, 531, 534, 535, 536, 537, 538, 540, 541, 542, 597, 599, 616, 649, 650, 652, 653, 654, 660, 667, 692, 693, 705, 724, 743, 744, 746, 747, 752, 771, 816, 819, 877, 878, 879, 880, 881, 882, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 965, 978, 979, 980, 1027, 1028, 1062, 1116, 1118, 1143, 1160], "float64": [31, 34, 51, 100, 108, 138, 160, 161, 169, 221, 241, 254, 279, 295, 296, 297, 298, 299, 300, 318, 326, 327, 328, 337, 372, 389, 419, 421, 522, 552, 553, 614, 615, 656, 678, 681, 696, 705, 733, 772, 792, 816, 819, 912, 1142, 1147, 1160], "repres": [31, 34, 51, 55, 70, 97, 99, 101, 102, 103, 110, 113, 231, 251, 257, 279, 419, 421, 478, 559, 623, 626, 641, 654, 656, 667, 669, 670, 682, 683, 686, 694, 701, 705, 782, 790, 816, 1062, 1077, 1149, 1160], "null": [31, 33, 51, 59, 72, 80, 100, 108, 109, 118, 122, 128, 146, 150, 152, 156, 159, 165, 169, 170, 185, 192, 198, 199, 205, 208, 210, 226, 227, 230, 231, 232, 236, 241, 244, 247, 249, 251, 254, 261, 279, 289, 291, 292, 293, 303, 310, 312, 323, 329, 331, 334, 338, 340, 341, 349, 353, 357, 359, 361, 366, 367, 373, 385, 386, 387, 388, 389, 392, 393, 394, 400, 409, 419, 421, 422, 423, 429, 431, 432, 439, 441, 444, 445, 449, 450, 457, 458, 459, 460, 461, 467, 468, 479, 480, 508, 509, 510, 513, 524, 529, 530, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 551, 556, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 574, 579, 580, 581, 586, 588, 589, 590, 605, 606, 607, 616, 626, 627, 628, 629, 638, 639, 640, 642, 647, 656, 667, 672, 676, 682, 683, 687, 689, 695, 705, 722, 725, 732, 738, 750, 751, 764, 775, 777, 778, 781, 786, 788, 789, 792, 794, 800, 816, 823, 824, 826, 835, 843, 858, 859, 873, 875, 876, 885, 889, 896, 898, 901, 906, 913, 926, 927, 928, 932, 934, 939, 945, 961, 962, 970, 973, 974, 981, 983, 992, 1000, 1002, 1003, 1009, 1010, 1018, 1031, 1032, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1060, 1065, 1066, 1070, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1098, 1099, 1100, 1105, 1107, 1108, 1109, 1124, 1139, 1141, 1142, 1143, 1150, 1160, 1167, 1168], "necessari": [31, 51, 63, 82, 113, 279, 816], "non_numer": [31, 51, 279, 816], "never": [31, 51, 110, 217, 279, 816], "strategi": [31, 51, 72, 80, 108, 135, 136, 137, 138, 140, 165, 175, 178, 192, 193, 203, 249, 279, 293, 394, 468, 480, 705, 738, 743, 746, 751, 752, 789, 816, 934, 1010, 1160], "put": [31, 51, 279, 816], "around": [31, 51, 279, 816], "thei": [31, 33, 34, 51, 63, 79, 80, 81, 82, 100, 122, 144, 194, 219, 279, 705, 728, 816, 819], "record": [31, 36, 51, 116, 128, 193, 240, 279, 752, 816], "termin": [31, 51, 279, 816], "also": [31, 34, 51, 62, 63, 100, 110, 113, 119, 122, 136, 137, 138, 139, 140, 144, 160, 174, 175, 176, 178, 179, 201, 204, 216, 218, 222, 230, 249, 254, 279, 331, 334, 367, 370, 410, 480, 523, 534, 535, 536, 537, 538, 540, 541, 542, 557, 592, 593, 644, 645, 649, 658, 660, 680, 695, 704, 705, 711, 742, 743, 744, 746, 747, 762, 771, 773, 781, 789, 792, 794, 816, 819, 910, 946, 1038, 1081, 1082, 1111, 1160], "indistinguish": [31, 51, 279, 816], "even": [31, 51, 108, 279, 516, 520, 705, 816, 1036, 1160], "invalid": [31, 51, 108, 109, 122, 279, 571, 572, 581, 618, 705, 816, 1090, 1091, 1100], "g": [31, 51, 107, 108, 109, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 125, 128, 146, 175, 193, 216, 240, 248, 250, 279, 286, 293, 367, 371, 378, 389, 480, 531, 534, 535, 536, 537, 538, 540, 541, 542, 549, 649, 650, 652, 653, 656, 692, 693, 705, 730, 743, 752, 768, 769, 771, 816, 907, 911, 918, 1060, 1141, 1160, 1168], "numer": [31, 34, 51, 151, 157, 193, 200, 208, 248, 279, 286, 323, 399, 410, 473, 495, 497, 517, 526, 549, 570, 605, 608, 618, 705, 717, 724, 731, 752, 761, 816, 819, 859, 872, 946, 963, 1060, 1067, 1089, 1124, 1141, 1160, 1168], "doe": [31, 33, 51, 72, 80, 91, 97, 99, 100, 101, 103, 104, 108, 109, 110, 112, 113, 117, 118, 122, 123, 126, 128, 153, 163, 191, 192, 217, 218, 219, 246, 254, 279, 317, 381, 468, 479, 620, 657, 666, 701, 705, 726, 736, 751, 757, 787, 792, 816, 825, 862, 921, 931, 939, 1017, 1068, 1150, 1160], "pars": [31, 51, 57, 108, 109, 113, 118, 122, 125, 126, 150, 174, 177, 222, 223, 226, 230, 244, 254, 255, 258, 279, 323, 410, 479, 512, 557, 571, 581, 600, 627, 629, 635, 638, 639, 640, 647, 660, 672, 676, 684, 685, 687, 689, 695, 705, 722, 742, 745, 773, 774, 777, 781, 786, 792, 793, 797, 816, 859, 946, 1065, 1090, 1100, 1118, 1119, 1160], "valid": [31, 34, 42, 51, 57, 110, 114, 116, 120, 140, 144, 161, 192, 279, 335, 561, 562, 563, 568, 569, 570, 572, 582, 583, 695, 705, 751, 816, 819, 870, 925, 939, 1080, 1081, 1082, 1087, 1088, 1089, 1091, 1101, 1102, 1160], "integ": [31, 33, 34, 47, 48, 49, 50, 51, 66, 67, 68, 69, 129, 136, 138, 139, 141, 159, 175, 216, 238, 279, 290, 322, 372, 398, 399, 511, 520, 525, 531, 534, 535, 536, 537, 538, 539, 540, 541, 542, 581, 625, 632, 660, 664, 665, 681, 705, 732, 743, 771, 816, 819, 856, 912, 937, 956, 1036, 1040, 1053, 1062, 1100, 1160, 1167, 1168], "aren": [31, 51, 279, 816], "t": [31, 51, 59, 60, 80, 108, 113, 119, 122, 175, 196, 207, 246, 248, 279, 293, 335, 342, 350, 370, 383, 386, 387, 388, 442, 480, 512, 516, 568, 594, 597, 599, 695, 705, 743, 765, 787, 816, 819, 870, 910, 924, 926, 927, 928, 984, 1018, 1060, 1087, 1112, 1113, 1116, 1118, 1141, 1150, 1160], "strictli": [31, 51, 63, 82, 279, 736, 816], "table_nam": [32, 34, 279], "connect": [32, 108, 110, 111, 114, 116, 120, 125, 127, 128, 279, 718], "if_exist": [32, 279], "dbwritemod": [32, 279], "fail": [32, 33, 98, 112, 114, 118, 123, 127, 131, 132, 146, 246, 279, 304, 375, 468, 597, 598, 599, 602, 705, 787, 816, 1018, 1116, 1117, 1118, 1121, 1160], "dbwriteengin": [32, 279], "sqlalchemi": [32, 110, 130, 279], "databas": [32, 110, 111, 279, 717], "creat": [32, 34, 63, 82, 97, 101, 103, 110, 111, 123, 124, 136, 137, 138, 139, 140, 141, 152, 153, 175, 176, 179, 205, 208, 216, 250, 254, 279, 344, 371, 378, 468, 524, 531, 534, 535, 537, 540, 541, 542, 586, 639, 648, 649, 650, 651, 652, 653, 654, 691, 692, 693, 701, 705, 725, 726, 734, 743, 744, 747, 771, 792, 816, 858, 862, 871, 880, 911, 918, 1029, 1036, 1039, 1105, 1141, 1160, 1167, 1168], "append": [32, 33, 138, 163, 192, 193, 279, 524, 695, 705, 751, 752, 816, 931, 1160], "your": [32, 34, 63, 72, 82, 108, 109, 110, 113, 128, 190, 196, 218, 219, 222, 237, 254, 258, 265, 279, 293, 480, 570, 597, 598, 599, 605, 670, 705, 748, 755, 757, 773, 792, 797, 804, 816, 1018, 1089, 1116, 1117, 1118, 1124, 1160, 1168], "special": [32, 108, 109, 122, 279, 533, 569, 705, 826, 1018, 1047, 1088, 1160], "uri": [32, 33, 110, 111, 112, 123, 124, 279], "postgresql": [32, 110, 111, 279, 512, 705], "user": [32, 110, 111, 147, 196, 207, 260, 265, 279, 293, 478, 480, 516, 546, 630, 670, 705, 765, 799, 804, 816, 826, 1018, 1063, 1160], "pass": [32, 33, 34, 39, 60, 72, 99, 110, 111, 113, 122, 127, 128, 131, 133, 136, 138, 140, 150, 155, 157, 174, 175, 178, 181, 195, 206, 207, 216, 222, 226, 230, 233, 244, 250, 254, 258, 279, 293, 351, 367, 370, 392, 408, 461, 480, 512, 516, 534, 535, 536, 537, 538, 540, 541, 542, 547, 557, 592, 593, 594, 626, 635, 649, 660, 687, 695, 701, 705, 722, 731, 742, 743, 744, 746, 747, 749, 756, 757, 765, 771, 773, 777, 779, 781, 786, 792, 797, 804, 816, 826, 887, 910, 932, 941, 971, 1003, 1018, 1065, 1111, 1112, 1113, 1131, 1160], "server": [32, 110, 111, 279], "port": [32, 108, 110, 111, 114, 116, 120, 125, 279], "sqlite": [32, 110, 279], "db": [32, 111, 279], "replac": [32, 33, 108, 109, 122, 164, 165, 214, 245, 254, 255, 279, 344, 370, 479, 583, 705, 737, 792, 793, 816, 880, 910, 1017, 1061, 1062, 1102, 1160], "insert": [32, 108, 109, 114, 116, 120, 122, 125, 126, 127, 184, 213, 245, 247, 279, 545, 560, 605, 705, 788, 816, 1059, 1079, 1124, 1160], "mode": [32, 33, 51, 52, 53, 57, 131, 133, 208, 279, 569, 678, 681, 696, 705, 727, 816, 1088, 1160, 1167], "new": [32, 33, 34, 113, 122, 144, 183, 184, 196, 204, 205, 212, 213, 234, 245, 247, 248, 249, 254, 255, 279, 288, 344, 391, 409, 477, 500, 582, 583, 588, 589, 606, 607, 613, 701, 705, 717, 769, 785, 788, 789, 792, 793, 799, 804, 816, 822, 880, 930, 1029, 1041, 1101, 1102, 1107, 1108, 1125, 1127, 1133, 1138, 1160, 1167], "alreadi": [32, 33, 279, 335, 442, 622, 705, 870, 984, 1148, 1160], "adbc": [32, 110, 111, 279], "deltalak": [33, 112, 123, 130, 279], "deltat": [33, 279], "ignor": [33, 137, 138, 140, 198, 232, 249, 279, 289, 291, 338, 370, 386, 387, 388, 439, 505, 506, 626, 628, 705, 823, 824, 873, 910, 926, 927, 928, 981, 1027, 1028, 1160], "overwrite_schema": [33, 279], "storage_opt": [33, 108, 112, 114, 116, 120, 123, 124, 125, 127, 279], "delta_write_opt": [33, 279], "delta": [33, 44, 112, 123, 231, 251, 279, 540, 542, 559, 623, 641, 682, 683, 686, 694, 705, 717, 782, 790, 816, 1054, 1056, 1077, 1149, 1160], "object": [33, 34, 35, 36, 62, 80, 98, 99, 104, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 136, 138, 140, 146, 174, 175, 177, 178, 193, 194, 216, 219, 240, 241, 279, 649, 650, 652, 653, 667, 692, 693, 717, 730, 743, 744, 746, 747, 752, 768, 771, 816, 819, 849, 877, 972, 1078, 1136, 1160], "handl": [33, 80, 104, 108, 109, 122, 128, 279, 338, 439, 605, 705, 727, 816, 873, 981, 1124, 1160], "throw": [33, 151, 279, 318, 571, 572, 705, 724, 816, 848, 1090, 1091, 1160], "add": [33, 34, 109, 163, 175, 178, 196, 254, 255, 256, 279, 336, 501, 502, 518, 520, 609, 654, 658, 695, 705, 743, 746, 751, 792, 793, 794, 795, 816, 825, 931, 1160], "anyth": [33, 217, 279], "updat": [33, 279, 816], "extra": [33, 39, 53, 108, 109, 112, 113, 114, 116, 120, 122, 123, 124, 125, 163, 175, 279, 743, 816, 825, 931, 1160], "storag": [33, 108, 112, 114, 116, 120, 123, 124, 125, 127, 279], "backend": [33, 110, 111, 112, 123, 124, 279], "cloud": [33, 110, 112, 123, 124, 127, 128, 279], "configur": [33, 112, 123, 124, 144, 279], "authent": [33, 112, 123, 124, 279], "see": [33, 34, 35, 36, 42, 110, 111, 112, 113, 123, 124, 127, 131, 132, 133, 134, 138, 140, 155, 175, 192, 207, 208, 279, 323, 394, 426, 478, 554, 561, 568, 569, 582, 649, 650, 652, 653, 680, 692, 693, 701, 705, 727, 743, 816, 819, 853, 859, 969, 1073, 1080, 1087, 1088, 1101, 1160, 1168], "here": [33, 34, 39, 97, 99, 100, 101, 103, 110, 111, 112, 117, 118, 123, 124, 126, 127, 136, 138, 140, 279, 480, 570, 572, 705, 816, 1091], "gc": [33, 112, 123, 124, 279], "azur": [33, 112, 123, 124, 127, 279], "keyword": [33, 60, 112, 120, 123, 155, 207, 217, 222, 223, 254, 255, 258, 279, 516, 684, 687, 705, 765, 773, 774, 792, 793, 797, 816, 1160], "argument": [33, 39, 82, 108, 112, 120, 122, 123, 155, 157, 162, 174, 175, 176, 177, 178, 179, 198, 206, 207, 208, 216, 222, 223, 224, 230, 232, 241, 247, 250, 254, 255, 258, 279, 371, 378, 389, 410, 512, 516, 531, 534, 535, 536, 537, 538, 540, 541, 542, 557, 592, 593, 594, 626, 633, 634, 635, 638, 639, 640, 649, 656, 681, 684, 687, 692, 705, 731, 735, 742, 743, 744, 745, 746, 747, 765, 771, 773, 774, 776, 781, 788, 792, 793, 797, 816, 825, 911, 918, 946, 1111, 1112, 1113, 1142, 1160], "while": [33, 79, 109, 112, 113, 123, 138, 140, 144, 190, 200, 245, 249, 279, 574, 728, 761, 789, 816, 939, 1093, 1160], "lake": [33, 112, 123, 279, 717], "typeerror": [33, 279], "unsupport": [33, 279], "arrowinvaliderror": [33, 279], "could": [33, 70, 85, 151, 279, 318, 644, 654, 658, 705, 724, 732, 816, 848, 939, 1160], "primit": [33, 279, 415, 705, 1141, 1160], "categor": [33, 63, 81, 82, 98, 131, 132, 133, 134, 192, 238, 239, 279, 319, 320, 336, 479, 520, 616, 705, 819, 849, 850, 851, 852, 853, 854, 871, 1036, 1143, 1160], "protocol": [33, 98, 111, 146, 279], "associ": [33, 34, 58, 60, 72, 111, 137, 219, 279], "affect": [33, 279], "follow": [33, 34, 39, 77, 108, 109, 112, 122, 123, 124, 131, 175, 193, 196, 207, 216, 250, 279, 367, 371, 378, 516, 523, 531, 534, 535, 536, 537, 538, 539, 540, 541, 542, 607, 618, 649, 650, 652, 653, 670, 692, 693, 695, 697, 698, 700, 705, 706, 707, 710, 712, 713, 714, 743, 752, 765, 771, 816, 907, 911, 918, 1038, 1061, 1062, 1152, 1154, 1156, 1160, 1161, 1164, 1165, 1166, 1168], "unsign": [33, 66, 67, 68, 69, 279, 525, 705, 819, 956, 1040, 1160], "millisecond": [33, 175, 193, 216, 250, 279, 367, 371, 378, 531, 534, 535, 536, 537, 538, 540, 541, 542, 649, 650, 652, 653, 654, 692, 693, 705, 743, 752, 771, 816, 819, 907, 911, 918], "nanosecond": [33, 175, 193, 216, 250, 279, 367, 371, 372, 378, 531, 534, 535, 536, 537, 538, 540, 541, 542, 649, 650, 652, 653, 654, 692, 693, 705, 743, 752, 771, 816, 907, 911, 912, 918], "zone": [33, 42, 279, 342, 345, 370, 599, 649, 650, 651, 652, 653, 819, 878, 881, 910, 1118], "binari": [33, 35, 110, 113, 279, 311, 313, 314, 315, 819, 842, 845, 846], "nullabl": [33, 279], "To": [33, 79, 164, 279, 323, 340, 341, 394, 561, 568, 569, 582, 603, 649, 705, 737, 816, 859, 875, 876, 939, 1080, 1087, 1088, 1101, 1122, 1141, 1160], "pyarrow": [33, 39, 97, 98, 102, 108, 111, 112, 114, 116, 120, 123, 128, 130, 235, 240, 241, 279, 718, 1136, 1140, 1141, 1142, 1160], "ha": [33, 34, 72, 79, 110, 113, 122, 146, 147, 149, 175, 176, 177, 178, 179, 216, 250, 260, 279, 293, 316, 317, 335, 413, 417, 420, 437, 440, 447, 451, 465, 469, 476, 489, 531, 532, 534, 535, 536, 537, 538, 540, 541, 542, 562, 575, 576, 577, 578, 584, 585, 591, 617, 630, 668, 701, 705, 721, 728, 743, 744, 745, 746, 747, 756, 768, 771, 796, 799, 804, 816, 826, 847, 858, 870, 872, 939, 951, 953, 957, 979, 982, 989, 993, 1007, 1011, 1046, 1081, 1094, 1095, 1096, 1097, 1103, 1104, 1110, 1144, 1160], "last": [33, 131, 132, 133, 134, 150, 181, 193, 195, 208, 219, 230, 233, 244, 246, 273, 279, 303, 335, 348, 363, 368, 379, 417, 418, 425, 445, 466, 499, 501, 502, 503, 504, 518, 556, 589, 609, 611, 649, 690, 705, 722, 752, 781, 784, 786, 787, 812, 816, 819, 835, 870, 884, 903, 908, 919, 941, 957, 958, 971, 987, 1008, 1108, 1131, 1160], "filesystem": [33, 112, 123, 124, 279], "table_path": [33, 112, 123, 124, 279], "match": [33, 34, 42, 80, 91, 97, 99, 100, 101, 103, 117, 118, 126, 131, 132, 133, 134, 165, 193, 217, 249, 279, 486, 539, 561, 562, 563, 566, 568, 569, 571, 572, 582, 583, 590, 597, 598, 599, 705, 738, 752, 789, 816, 819, 956, 965, 1053, 1080, 1081, 1082, 1085, 1087, 1088, 1090, 1091, 1101, 1102, 1109, 1116, 1117, 1118, 1160], "version": [33, 77, 82, 112, 113, 123, 130, 146, 147, 149, 175, 176, 177, 178, 179, 227, 260, 279, 293, 317, 324, 325, 363, 364, 370, 378, 413, 417, 420, 437, 440, 447, 451, 465, 469, 476, 532, 548, 562, 575, 576, 577, 578, 584, 585, 591, 597, 599, 630, 637, 649, 651, 668, 680, 681, 692, 705, 721, 741, 743, 744, 745, 746, 747, 756, 768, 778, 796, 799, 816, 825, 826, 860, 861, 871, 903, 904, 910, 918, 951, 957, 979, 982, 989, 993, 1007, 1011, 1036, 1046, 1066, 1081, 1094, 1095, 1096, 1097, 1103, 1104, 1110, 1116, 1118, 1160], "old": [33, 212, 279, 769, 816], "existing_table_path": [33, 279], "store": [33, 108, 120, 124, 163, 190, 218, 279, 319, 825, 850, 931, 1160], "like": [33, 79, 98, 107, 108, 109, 110, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 131, 132, 133, 134, 175, 186, 188, 192, 240, 279, 329, 342, 429, 442, 450, 492, 523, 568, 622, 701, 705, 728, 730, 743, 768, 816, 825, 878, 970, 984, 992, 1038, 1087, 1148, 1160], "bucket": [33, 112, 123, 124, 127, 279, 371, 378, 911, 918, 942, 1160], "prefix": [33, 144, 279, 288, 315, 477, 500, 502, 503, 504, 590, 595, 605, 609, 705, 819, 846, 1109, 1114, 1124], "aws_region": [33, 123, 127, 279], "the_aws_region": [33, 279], "aws_access_key_id": [33, 112, 123, 127, 279], "the_aws_access_key_id": [33, 112, 123, 124, 279], "aws_secret_access_kei": [33, 112, 123, 127, 279], "the_aws_secret_access_kei": [33, 112, 123, 124, 279], "pa": [33, 97, 128, 279], "workbook": [34, 113, 279], "worksheet": [34, 113, 119, 279], "posit": [34, 157, 162, 174, 177, 206, 222, 223, 224, 226, 230, 247, 254, 255, 258, 279, 386, 387, 388, 389, 461, 512, 520, 547, 557, 570, 581, 633, 634, 635, 638, 639, 640, 656, 684, 687, 705, 731, 735, 742, 745, 773, 774, 776, 777, 781, 788, 792, 793, 797, 816, 926, 927, 928, 1003, 1036, 1065, 1089, 1100, 1160], "tupl": [34, 111, 113, 119, 147, 190, 196, 217, 218, 219, 225, 257, 279, 527, 705, 766, 779, 816, 819, 1042, 1160], "a1": [34, 73, 75, 279], "table_styl": [34, 279], "column_format": [34, 279], "columnformatdict": [34, 279], "dtype_format": [34, 279], "oneormoredatatyp": [34, 136, 279, 965, 1160], "conditional_format": [34, 279], "conditionalformatdict": [34, 279], "header_format": [34, 279], "column_tot": [34, 279], "columntotalsdefinit": [34, 279], "column_width": [34, 279], "columnwidthsdefinit": [34, 279], "row_tot": [34, 279], "rowtotalsdefinit": [34, 279], "row_height": [34, 279], "sparklin": [34, 279], "sequenc": [34, 64, 72, 78, 79, 97, 99, 100, 101, 103, 108, 109, 110, 113, 117, 118, 119, 122, 126, 136, 137, 138, 150, 156, 162, 163, 192, 193, 200, 204, 206, 207, 208, 219, 230, 238, 244, 248, 249, 250, 279, 336, 415, 468, 476, 478, 516, 520, 557, 607, 630, 635, 644, 645, 658, 660, 668, 669, 670, 680, 685, 705, 722, 735, 751, 752, 761, 765, 781, 786, 789, 816, 825, 871, 872, 874, 931, 1010, 1036, 1062, 1127, 1160], "formula": [34, 279, 383, 705, 924, 1160], "autofilt": [34, 279], "autofit": [34, 279], "hidden_column": [34, 279], "selectortyp": [34, 279, 819], "hide_gridlin": [34, 279], "sheet_zoom": [34, 279], "freeze_pan": [34, 279], "excel": [34, 113, 279], "open": [34, 107, 108, 109, 113, 114, 115, 116, 117, 118, 119, 120, 121, 125, 127, 279, 730, 768, 816], "xlsxwriter": [34, 130, 279], "close": [34, 110, 175, 176, 178, 179, 216, 279, 336, 410, 473, 520, 531, 534, 535, 536, 537, 538, 540, 541, 542, 554, 649, 650, 652, 653, 692, 693, 705, 743, 744, 746, 747, 771, 816, 871, 946, 1036, 1073, 1160], "xlsx": [34, 113, 279], "work": [34, 43, 98, 109, 128, 213, 223, 255, 279, 289, 291, 293, 309, 322, 323, 389, 398, 442, 470, 480, 512, 530, 573, 574, 619, 705, 774, 793, 816, 819, 823, 824, 841, 856, 859, 937, 984, 1012, 1092, 1093, 1145, 1160], "directori": [34, 39, 120, 127, 279], "sheet1": [34, 279], "medium": [34, 279], "kei": [34, 72, 77, 80, 124, 127, 175, 190, 192, 193, 201, 206, 208, 212, 215, 218, 219, 249, 279, 480, 687, 705, 736, 743, 751, 752, 762, 769, 770, 789, 816], "first_column": [34, 279], "last_column": [34, 279], "banded_column": [34, 279], "banded_row": [34, 279], "sheet": [34, 113, 119, 279], "chart": [34, 279, 766, 816], "subsequ": [34, 62, 211, 241, 279, 468, 695, 734, 816], "colnam": [34, 122, 138, 160, 279, 733, 816], "given": [34, 57, 58, 72, 97, 99, 100, 101, 103, 108, 109, 110, 111, 113, 117, 118, 119, 122, 126, 127, 133, 134, 135, 136, 138, 139, 140, 141, 147, 150, 161, 162, 164, 175, 176, 178, 179, 189, 196, 206, 207, 216, 217, 219, 226, 227, 230, 244, 249, 279, 323, 342, 345, 374, 376, 377, 383, 410, 436, 461, 468, 471, 480, 512, 516, 523, 526, 527, 531, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 545, 547, 548, 569, 570, 579, 580, 597, 599, 605, 607, 630, 656, 668, 669, 670, 681, 682, 683, 705, 722, 735, 743, 744, 746, 747, 756, 757, 765, 771, 777, 778, 781, 786, 789, 799, 804, 816, 819, 826, 859, 878, 881, 914, 916, 917, 924, 925, 942, 946, 968, 978, 1003, 1010, 1013, 1016, 1018, 1029, 1038, 1042, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1059, 1065, 1066, 1088, 1089, 1098, 1099, 1116, 1118, 1124, 1147, 1151, 1160, 1167, 1168], "dd": [34, 279], "mm": [34, 279], "yyyi": [34, 279], "00": [34, 138, 175, 193, 250, 279, 342, 343, 345, 349, 350, 352, 353, 356, 357, 359, 360, 361, 363, 364, 366, 367, 370, 371, 372, 373, 374, 377, 378, 381, 534, 535, 537, 540, 541, 542, 597, 599, 602, 652, 654, 692, 693, 705, 743, 752, 816, 819, 878, 879, 881, 882, 883, 885, 886, 887, 888, 889, 894, 895, 896, 898, 900, 901, 903, 904, 905, 906, 907, 910, 911, 913, 915, 916, 918, 921, 1116, 1118, 1121], "overridden": [34, 97, 99, 101, 103, 117, 118, 142, 279, 816], "basi": [34, 138, 279], "param": [34, 97, 99, 100, 101, 103, 108, 109, 117, 118, 122, 137, 138, 140, 217, 279, 816], "It": [34, 63, 82, 201, 207, 265, 279, 317, 488, 530, 701, 705, 756, 757, 762, 804, 816, 1061, 1062, 1160], "group": [34, 39, 53, 57, 109, 174, 175, 176, 177, 178, 179, 191, 204, 206, 208, 216, 219, 248, 250, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 279, 287, 335, 391, 397, 403, 442, 480, 488, 490, 512, 523, 530, 531, 556, 557, 561, 568, 569, 570, 582, 612, 622, 670, 705, 742, 743, 744, 745, 746, 747, 771, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 816, 819, 870, 984, 1045, 1080, 1087, 1088, 1089, 1101, 1148, 1160], "float_dtyp": [34, 279], "simplifi": [34, 51, 52, 53, 78, 79, 279, 727, 728, 734, 736, 766, 779, 816], "uniform": [34, 279, 520, 705, 1036, 1160], "condit": [34, 159, 166, 217, 279, 566, 590, 636, 658, 695, 732, 739, 816], "suppli": [34, 97, 99, 100, 101, 103, 110, 117, 118, 126, 166, 217, 279, 516, 705, 739, 816], "typenam": [34, 279], "3_color_scal": [34, 279], "data_bar": [34, 279], "make": [34, 64, 80, 97, 102, 108, 109, 114, 116, 120, 125, 201, 204, 211, 250, 279, 387, 388, 479, 503, 504, 512, 526, 588, 705, 762, 816, 927, 928, 942, 1017, 1107, 1160, 1168], "icon": [34, 279], "multipl": [34, 60, 78, 79, 80, 108, 109, 113, 119, 122, 125, 126, 127, 136, 140, 150, 157, 161, 163, 166, 174, 175, 183, 191, 206, 208, 219, 222, 224, 230, 244, 249, 254, 258, 279, 467, 485, 489, 496, 497, 512, 527, 530, 534, 535, 536, 537, 538, 540, 541, 542, 557, 635, 644, 645, 658, 668, 669, 671, 675, 680, 685, 688, 695, 701, 705, 722, 727, 728, 731, 739, 742, 743, 773, 776, 781, 786, 789, 792, 797, 804, 816, 825, 925, 931, 1009, 1023, 1042, 1160], "singl": [34, 58, 72, 79, 80, 108, 109, 110, 111, 113, 120, 122, 127, 136, 151, 157, 158, 159, 163, 171, 189, 192, 196, 206, 217, 219, 230, 279, 293, 323, 367, 395, 403, 437, 438, 467, 478, 480, 524, 527, 557, 560, 612, 624, 630, 635, 639, 640, 665, 669, 670, 685, 693, 705, 724, 727, 731, 732, 751, 781, 816, 825, 859, 907, 931, 979, 980, 1009, 1039, 1042, 1079, 1136, 1160], "across": [34, 72, 279, 627, 629, 647, 672, 676, 689], "effect": [34, 169, 175, 178, 240, 279, 350, 480, 649, 650, 705, 743, 746, 795, 816, 878, 886], "heatmap": [34, 279], "min": [34, 39, 53, 156, 165, 208, 216, 279, 325, 332, 394, 512, 523, 531, 537, 676, 684, 705, 738, 771, 816, 861, 867, 872, 934, 1038, 1051, 1160, 1168], "entir": [34, 279, 727, 816], "made": [34, 110, 279, 1141, 1160], "up": [34, 64, 111, 190, 193, 218, 219, 237, 279, 293, 322, 480, 705, 751, 752, 757, 816, 819, 856, 1160], "abov": [34, 131, 208, 279, 695], "order": [34, 51, 52, 53, 57, 59, 72, 78, 100, 110, 129, 131, 132, 150, 159, 166, 174, 175, 176, 177, 178, 179, 192, 206, 207, 208, 216, 220, 224, 230, 240, 244, 246, 250, 279, 303, 309, 320, 340, 341, 395, 441, 456, 463, 470, 523, 531, 535, 536, 537, 538, 540, 542, 544, 545, 546, 556, 557, 607, 619, 620, 622, 635, 705, 716, 722, 732, 739, 742, 743, 744, 745, 746, 747, 751, 761, 771, 776, 781, 786, 787, 816, 835, 841, 852, 854, 875, 876, 935, 964, 983, 998, 1005, 1012, 1038, 1043, 1058, 1059, 1063, 1075, 1127, 1145, 1146, 1148, 1160, 1168], "than": [34, 51, 52, 53, 96, 101, 103, 108, 109, 110, 113, 119, 122, 128, 138, 140, 152, 174, 177, 190, 193, 196, 206, 217, 218, 220, 248, 265, 279, 402, 404, 428, 456, 475, 480, 491, 520, 530, 544, 554, 573, 579, 580, 589, 605, 641, 649, 670, 705, 727, 742, 745, 752, 804, 816, 998, 1018, 1036, 1045, 1058, 1073, 1092, 1098, 1099, 1108, 1124, 1160, 1168], "bold": [34, 279], "font_color": [34, 279], "702963": [34, 279], "total": [34, 161, 279, 925, 1160], "export": [34, 190, 191, 218, 219, 237, 240, 279, 701], "sum": [34, 57, 161, 169, 174, 175, 189, 208, 216, 258, 279, 333, 334, 383, 395, 468, 480, 488, 490, 491, 492, 531, 534, 537, 541, 624, 626, 644, 646, 647, 658, 670, 680, 689, 705, 727, 728, 730, 734, 736, 742, 743, 764, 766, 771, 775, 779, 797, 816, 819, 868, 869, 924, 925, 1048, 1049, 1051, 1054, 1055, 1056, 1160], "must": [34, 98, 99, 112, 123, 124, 128, 156, 162, 175, 176, 178, 179, 193, 201, 216, 217, 279, 336, 468, 478, 520, 531, 534, 535, 536, 537, 538, 540, 541, 542, 695, 705, 735, 743, 744, 746, 747, 752, 756, 757, 762, 771, 816, 871, 872, 1036, 1160], "funcnam": [34, 279], "averag": [34, 279, 386, 387, 388, 523, 705, 926, 927, 928, 1038, 1160], "count_num": [34, 279], "count": [34, 57, 108, 109, 114, 116, 120, 122, 125, 126, 127, 128, 148, 149, 156, 175, 193, 204, 205, 208, 216, 245, 249, 250, 256, 265, 270, 279, 294, 330, 367, 429, 437, 438, 480, 488, 490, 498, 510, 531, 534, 535, 536, 537, 538, 540, 541, 542, 562, 563, 620, 622, 631, 677, 705, 720, 721, 743, 752, 764, 771, 795, 804, 809, 816, 872, 907, 942, 979, 980, 1025, 1031, 1081, 1082, 1146, 1148, 1160], "std_dev": [34, 279], "var": [34, 141, 279, 542, 705, 816, 1160], "pixel": [34, 279], "unit": [34, 42, 44, 131, 132, 133, 134, 138, 140, 161, 279, 343, 344, 351, 376, 381, 474, 489, 597, 599, 621, 649, 650, 651, 652, 653, 654, 660, 705, 766, 816, 819, 879, 880, 887, 916, 921, 925, 1016, 1116, 1118, 1147, 1160, 1168], "hand": [34, 108, 109, 122, 279, 457, 458, 459, 460, 999, 1000, 1001, 1002], "side": [34, 175, 176, 178, 179, 216, 279, 410, 457, 458, 459, 460, 531, 534, 535, 536, 537, 538, 540, 541, 542, 545, 649, 650, 652, 653, 692, 693, 705, 743, 744, 746, 747, 771, 816, 946, 999, 1000, 1001, 1002, 1059, 1160], "call": [34, 61, 63, 82, 109, 110, 131, 132, 133, 134, 138, 140, 144, 174, 175, 178, 194, 196, 216, 278, 279, 293, 331, 334, 425, 480, 499, 501, 502, 503, 504, 518, 550, 609, 701, 705, 718, 742, 743, 744, 746, 747, 771, 815, 816, 819, 826, 1018, 1069, 1160], "ad": [34, 100, 113, 175, 178, 245, 249, 254, 255, 279, 292, 392, 644, 645, 705, 743, 746, 789, 792, 793, 816, 871, 932, 1036, 1160], "wise": [34, 72, 110, 169, 279, 295, 296, 297, 298, 299, 300, 326, 327, 328, 390, 472, 551, 552, 553, 614, 615, 644, 645, 658, 680, 705, 827, 828, 829, 830, 831, 832, 863, 864, 865, 929, 1014, 1015, 1070, 1071, 1072, 1134, 1135, 1160], "particip": [34, 279], "distinct": [34, 140, 206, 279, 309, 413, 414, 417, 418, 470, 523, 654, 705, 841, 951, 952, 957, 958, 1012, 1038, 1160, 1168], "referenc": [34, 279, 607], "differ": [34, 108, 128, 131, 133, 163, 175, 190, 216, 218, 219, 237, 245, 279, 338, 348, 367, 368, 370, 379, 385, 439, 457, 459, 465, 479, 480, 505, 506, 508, 597, 620, 657, 660, 666, 705, 734, 743, 771, 816, 819, 825, 853, 873, 884, 907, 908, 910, 919, 931, 981, 999, 1001, 1007, 1018, 1027, 1028, 1060, 1116, 1160], "row_index": [34, 279], "height": [34, 159, 279], "provid": [34, 60, 108, 109, 111, 112, 122, 123, 124, 127, 138, 140, 166, 189, 279, 312, 313, 389, 468, 478, 480, 564, 565, 568, 571, 572, 660, 687, 705, 717, 739, 816, 843, 844, 942, 968, 1018, 1083, 1084, 1087, 1090, 1091, 1160, 1167, 1168], "intersect": [34, 279, 458, 819, 1000], "bodi": [34, 279], "start": [34, 107, 108, 109, 110, 111, 114, 116, 119, 120, 122, 125, 126, 127, 142, 174, 175, 177, 178, 194, 229, 250, 256, 279, 311, 314, 315, 348, 362, 368, 371, 378, 379, 389, 410, 462, 534, 535, 537, 540, 541, 542, 555, 561, 566, 569, 580, 586, 590, 605, 632, 644, 649, 650, 652, 653, 656, 658, 664, 665, 692, 693, 695, 705, 742, 743, 745, 746, 766, 780, 795, 816, 819, 846, 879, 881, 884, 887, 888, 895, 897, 900, 902, 905, 908, 911, 916, 918, 919, 946, 1004, 1074, 1085, 1088, 1099, 1105, 1109, 1124, 1160, 1168], "zero": [34, 97, 98, 107, 108, 109, 114, 116, 120, 137, 146, 165, 190, 217, 235, 240, 241, 279, 394, 468, 473, 545, 554, 605, 618, 705, 725, 738, 816, 858, 934, 1010, 1073, 1124, 1136, 1141, 1142, 1160], "unless": [34, 72, 99, 241, 279, 592, 593, 681, 816, 1111, 1142, 1150, 1160], "marker": [34, 279], "compliant": [34, 279], "case": [34, 63, 72, 79, 97, 99, 100, 101, 103, 110, 117, 118, 126, 127, 142, 147, 163, 175, 176, 178, 179, 190, 196, 216, 218, 219, 237, 279, 342, 477, 478, 488, 489, 500, 531, 561, 569, 582, 705, 728, 743, 744, 746, 747, 771, 816, 819, 825, 878, 931, 1080, 1088, 1101, 1160], "three": [34, 243, 279, 336, 468, 520, 545, 705, 871, 1010, 1036, 1160], "avail": [34, 106, 110, 111, 112, 123, 124, 136, 144, 208, 278, 279, 523, 697, 698, 700, 704, 705, 706, 707, 710, 711, 712, 713, 714, 717, 718, 736, 815, 816, 819, 1038, 1152, 1154, 1156, 1160, 1161, 1164, 1165, 1166], "insert_befor": [34, 279], "insert_aft": [34, 279], "respect": [34, 279, 819], "direct": [34, 111, 120, 124, 127, 131, 226, 248, 279, 461, 547, 705, 777, 816, 1003, 1065, 1160], "far": [34, 279], "strongli": [34, 142, 196, 217, 265, 279, 480, 705, 1018, 1160], "advis": [34, 63, 82, 194, 279], "structur": [34, 88, 92, 94, 163, 207, 219, 240, 279, 516, 705, 765, 816, 825, 931, 1160], "wherev": [34, 196, 265, 279, 480, 705, 1018, 1160], "possibl": [34, 108, 150, 174, 177, 190, 196, 218, 244, 246, 265, 279, 474, 480, 488, 533, 589, 621, 705, 722, 742, 745, 781, 786, 787, 816, 1018, 1047, 1108, 1160], "simpl": [34, 140, 204, 279], "colx": [34, 62, 279, 503, 504, 819, 1168], "coli": [34, 279, 503, 504, 819, 1168], "after": [34, 62, 80, 100, 107, 108, 109, 114, 116, 120, 122, 125, 126, 127, 163, 247, 278, 279, 389, 479, 512, 523, 605, 705, 788, 816, 825, 931, 1017, 1038, 1124, 1160], "befor": [34, 108, 110, 113, 122, 128, 131, 132, 133, 134, 142, 144, 163, 175, 178, 193, 247, 279, 333, 334, 335, 479, 512, 513, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 605, 610, 682, 683, 705, 743, 746, 749, 752, 788, 816, 825, 868, 869, 870, 931, 1017, 1032, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1124, 1130, 1160], "most": [34, 59, 97, 108, 109, 111, 122, 131, 132, 133, 134, 279, 489, 496, 513, 589, 705, 1023, 1032, 1108, 1160, 1167], "mandatori": [34, 279], "return_dtyp": [34, 147, 196, 279, 293, 476, 478, 479, 480, 630, 668, 669, 670, 705, 826, 1017, 1018, 1160], "latter": [34, 163, 279, 825, 931, 1160], "appropri": [34, 128, 240, 279, 523, 705, 1038, 1160], "pure": [34, 279, 1141, 1160], "actual": [34, 100, 138, 140, 219, 279, 1068, 1160], "indic": [34, 107, 108, 109, 110, 114, 116, 120, 122, 135, 136, 140, 175, 176, 178, 179, 193, 216, 219, 224, 226, 238, 250, 279, 304, 367, 371, 378, 411, 412, 413, 414, 416, 417, 418, 419, 421, 422, 423, 461, 467, 484, 487, 531, 534, 535, 536, 537, 538, 540, 541, 542, 545, 547, 551, 612, 635, 636, 649, 650, 652, 653, 692, 693, 705, 743, 744, 746, 747, 752, 771, 776, 777, 816, 819, 907, 911, 918, 950, 951, 952, 955, 957, 958, 959, 960, 961, 962, 1003, 1009, 1059, 1065, 1070, 1132, 1137, 1160, 1168], "calcul": [34, 72, 175, 231, 251, 279, 338, 386, 387, 388, 426, 439, 457, 474, 539, 554, 559, 621, 623, 641, 682, 683, 686, 694, 705, 743, 782, 790, 816, 873, 926, 927, 928, 969, 981, 999, 1053, 1073, 1077, 1149, 1160], "individu": [34, 53, 138, 144, 216, 240, 279, 480, 569, 705, 727, 771, 816, 857, 1088, 1160], "gridlin": [34, 279], "zoom": [34, 279], "level": [34, 39, 53, 122, 125, 126, 127, 138, 169, 196, 204, 279, 395, 705, 748, 755, 816], "freez": [34, 279], "pane": [34, 279], "top": [34, 150, 244, 279, 722, 786, 816], "index": [34, 98, 102, 105, 130, 146, 167, 175, 176, 178, 179, 184, 189, 190, 193, 208, 214, 216, 217, 218, 226, 229, 240, 242, 249, 250, 256, 279, 287, 301, 302, 303, 305, 367, 403, 433, 434, 445, 461, 462, 467, 468, 531, 534, 535, 536, 537, 538, 540, 541, 542, 545, 547, 555, 568, 586, 612, 705, 743, 744, 746, 747, 752, 771, 777, 780, 789, 795, 816, 833, 834, 835, 836, 837, 907, 968, 975, 976, 987, 1003, 1004, 1009, 1010, 1029, 1059, 1062, 1065, 1074, 1087, 1105, 1132, 1160], "thu": [34, 163, 279, 641, 825, 931, 1160], "altern": [34, 279, 701, 1141, 1160], "a2": [34, 73, 75, 279], "occur": [34, 78, 79, 279, 437, 438, 496, 523, 705, 727, 728, 734, 736, 766, 779, 816, 979, 980, 1023, 1038, 1160], "equival": [34, 97, 99, 100, 101, 103, 112, 117, 118, 126, 175, 189, 204, 279, 286, 290, 384, 385, 399, 402, 404, 428, 475, 495, 497, 507, 508, 511, 517, 574, 608, 618, 625, 705, 743, 816, 968, 1093, 1120, 1122, 1123, 1160], "top_row": [34, 279], "top_col": [34, 279], "base": [34, 40, 159, 166, 175, 176, 178, 179, 216, 279, 342, 350, 383, 386, 387, 388, 471, 472, 520, 531, 581, 705, 732, 739, 743, 744, 746, 747, 771, 816, 819, 878, 886, 924, 926, 927, 928, 942, 1013, 1014, 1036, 1100, 1151, 1160, 1168], "scroll": [34, 279], "region": [34, 124, 279], "initit": [34, 279], "5th": [34, 279], "properti": [34, 146, 154, 160, 168, 182, 221, 225, 253, 279, 729, 733, 772, 791, 816, 819, 1168], "readthedoc": [34, 279], "io": [34, 124, 279, 730, 775, 816], "html": [34, 35, 36, 98, 110, 146, 155, 279], "definit": [34, 136, 279, 426, 705, 969, 1160], "take": [34, 113, 119, 138, 144, 169, 175, 178, 201, 207, 208, 234, 240, 279, 367, 557, 613, 649, 650, 655, 657, 666, 705, 743, 746, 762, 785, 816, 907, 1133, 1151, 1160], "care": [34, 279, 293, 480, 546, 705, 1063, 1160], "rel": [34, 111, 112, 123, 124, 131, 132, 133, 134, 279, 367, 386, 387, 388, 536, 538, 540, 542, 705, 907, 926, 927, 928, 1160], "working_with_conditional_format": [34, 279], "similarli": [34, 100, 175, 193, 216, 250, 279, 367, 371, 378, 531, 534, 535, 536, 537, 538, 540, 541, 542, 649, 650, 652, 653, 692, 693, 705, 743, 752, 771, 816, 907, 911, 918], "well": [34, 108, 109, 110, 122, 208, 279, 410, 705, 946, 1160], "adjac": [34, 279], "two": [34, 62, 63, 81, 82, 99, 101, 103, 111, 169, 200, 201, 208, 243, 259, 265, 279, 287, 339, 344, 403, 468, 520, 556, 612, 633, 634, 641, 643, 682, 683, 705, 761, 762, 798, 804, 816, 874, 880, 1010, 1036, 1160], "help": [34, 131, 132, 133, 134, 279, 736, 816], "where": [34, 57, 72, 110, 111, 137, 159, 163, 175, 190, 200, 218, 231, 249, 251, 279, 304, 380, 383, 385, 508, 526, 545, 554, 557, 559, 623, 636, 641, 682, 683, 686, 694, 695, 705, 732, 743, 761, 782, 789, 790, 816, 825, 836, 920, 924, 931, 1059, 1073, 1077, 1149, 1151, 1160, 1167], "appear": [34, 100, 279, 620, 705, 1146, 1160], "working_with_sparklin": [34, 279], "inject": [34, 72, 279], "locat": [34, 163, 214, 242, 247, 279, 545, 705, 788, 816, 825, 931, 1059, 1062, 1132, 1160], "syntax": [34, 166, 196, 204, 279, 561, 568, 569, 582, 701, 739, 779, 816, 1080, 1087, 1088, 1101, 1160], "ensur": [34, 111, 137, 138, 140, 174, 177, 206, 217, 279, 410, 705, 742, 745, 756, 757, 816, 819, 1141, 1160], "correctli": [34, 113, 279], "microsoft": [34, 279], "com": [34, 111, 279, 386, 387, 388, 568, 569, 570, 705, 926, 927, 928, 1087, 1088, 1089, 1160], "u": [34, 42, 44, 60, 127, 279, 343, 344, 351, 376, 381, 597, 599, 649, 650, 651, 652, 653, 654, 660, 819, 879, 880, 887, 916, 921, 1116, 1118], "offic": [34, 279], "f5ed2452": [34, 279], "2337": [34, 279], "4f71": [34, 279], "bed3": [34, 279], "c8ae6d2b276": [34, 279], "instanti": [34, 110, 222, 254, 279, 773, 792, 816], "basic": [34, 279, 1168], "random": [34, 35, 129, 136, 138, 140, 180, 220, 279, 405, 456, 523, 544, 550, 622, 705, 717, 940, 998, 1038, 1058, 1069, 1148, 1160], "date": [34, 42, 72, 108, 109, 111, 113, 119, 122, 128, 131, 132, 133, 134, 138, 151, 156, 173, 175, 176, 178, 179, 191, 193, 216, 250, 279, 343, 344, 345, 348, 349, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 436, 531, 534, 535, 536, 537, 538, 540, 541, 542, 597, 598, 616, 649, 650, 652, 653, 660, 667, 691, 692, 693, 705, 724, 743, 744, 746, 747, 752, 771, 816, 819, 879, 880, 881, 884, 885, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 918, 919, 920, 922, 965, 978, 979, 980, 1027, 1028, 1062, 1116, 1117, 1143, 1160], "dtm": [34, 279, 344, 819, 880], "2023": [34, 104, 130, 191, 279, 344, 654, 667, 819, 880], "500": [34, 190, 249, 279, 736, 789, 816, 895, 897, 905, 1048, 1049, 1051, 1160], "val": [34, 215, 279, 320, 480, 516, 616, 695, 705, 770, 816, 852], "10_000": [34, 279], "20_000": [34, 279], "30_000": [34, 279], "increas": [34, 72, 108, 120, 279, 335, 705, 870, 1160], "b4": [34, 279], "light": [34, 279], "twice": [34, 113, 279], "titl": [34, 57, 279], "explicit": [34, 110, 122, 136, 249, 279, 680, 789, 816], "integr": [34, 279, 1168], "multi_fram": [34, 279], "wb": [34, 279], "coordin": [34, 279], "advanc": [34, 113, 208, 279, 468, 1010, 1168], "min_color": [34, 279], "76933c": [34, 279], "mid_color": [34, 279], "c4d79b": [34, 279], "max_color": [34, 279], "ebf1d": [34, 279], "data_bar_2010": [34, 279], "bar_color": [34, 279], "9bbb59": [34, 279], "bar_negative_color_sam": [34, 279], "bar_negative_border_color_sam": [34, 279], "000": [34, 279, 1168], "white": [34, 279], "w": [34, 59, 60, 175, 178, 219, 279, 563, 568, 570, 627, 629, 743, 746, 816, 819, 1082, 1087, 1089, 1112], "get_worksheet_by_nam": [34, 279], "fmt_titl": [34, 279], "add_format": [34, 279], "4f6228": [34, 279], "font_siz": [34, 279], "12": [34, 72, 104, 137, 138, 149, 175, 193, 216, 227, 250, 279, 288, 324, 325, 333, 342, 344, 348, 352, 360, 362, 363, 364, 367, 368, 369, 371, 378, 379, 380, 513, 522, 531, 541, 548, 549, 563, 576, 584, 600, 637, 645, 648, 649, 650, 651, 652, 653, 669, 692, 693, 705, 721, 741, 743, 748, 752, 755, 768, 771, 778, 779, 784, 796, 816, 819, 860, 861, 878, 880, 902, 911, 918, 1018, 1057, 1066, 1082, 1095, 1103, 1119, 1160, 1168], "ital": [34, 279], "customis": [34, 279], "trend": [34, 279], "win_loss": [34, 279], "subtl": [34, 279], "tone": [34, 279], "hidden": [34, 279], "id": [34, 80, 124, 245, 265, 279, 530, 582, 583, 620, 705, 804, 1045, 1146, 1160, 1168], "q1": [34, 279], "55": [34, 74, 279], "20": [34, 138, 163, 183, 184, 201, 207, 209, 213, 214, 279, 301, 302, 303, 338, 371, 378, 405, 409, 516, 534, 535, 537, 660, 667, 692, 705, 762, 765, 816, 819, 873, 918, 1160], "35": [34, 279, 338, 705, 873, 1160], "q2": [34, 279], "30": [34, 163, 175, 183, 207, 213, 214, 236, 254, 279, 301, 302, 303, 338, 344, 349, 352, 360, 362, 363, 369, 370, 371, 378, 379, 405, 549, 667, 692, 705, 743, 765, 792, 816, 819, 873, 880, 885, 903, 910, 911, 918, 1160, 1168], "15": [34, 130, 137, 175, 184, 196, 216, 279, 335, 338, 352, 360, 364, 371, 378, 516, 531, 541, 645, 681, 692, 705, 743, 771, 816, 870, 873, 911, 918, 1160], "60": [34, 163, 279, 372, 373, 541, 597, 705, 908, 912, 913, 1116], "q3": [34, 279], "40": [34, 163, 207, 279, 371, 378, 405, 600, 705, 765, 816, 891, 918, 1119], "80": [34, 279], "q4": [34, 279], "75": [34, 156, 279, 290, 511, 520, 534, 535, 536, 537, 540, 541, 542, 670, 705, 872, 942, 1036, 1160, 1168], "account": [34, 104, 111, 124, 279, 367, 386, 387, 388, 705, 907, 926, 927, 928, 1160], "flavour": [34, 110, 279], "integer_dtyp": [34, 222, 279, 773, 816, 819], "0_": [34, 279], "just": [34, 122, 200, 279, 761, 816], "unifi": [34, 279, 819], "multi": [34, 108, 109, 279, 389, 568, 705, 1087], "2_color_scal": [34, 279], "95b3d7": [34, 279], "ffffff": [34, 279], "standardis": [34, 279], "z": [34, 59, 80, 104, 136, 138, 161, 186, 188, 192, 200, 218, 219, 248, 279, 286, 288, 290, 320, 405, 435, 477, 480, 500, 501, 502, 503, 504, 511, 518, 526, 569, 597, 599, 609, 627, 629, 647, 672, 676, 681, 689, 705, 751, 761, 780, 816, 819, 852, 934, 1088, 1116, 1118, 1160, 1167], "score": [34, 279], "conjunct": [34, 81, 113, 119, 279], "a123": [34, 279], "b345": [34, 279], "c567": [34, 279], "d789": [34, 279], "e101": [34, 279], "45": [34, 130, 216, 279, 344, 352, 360, 371, 378, 531, 541, 563, 569, 633, 634, 667, 692, 705, 771, 816, 819, 880, 911, 918, 1082, 1088, 1168], "85": [34, 279, 1168], "font": [34, 279], "consola": [34, 279], "standard": [34, 231, 240, 279, 355, 387, 540, 554, 559, 572, 686, 701, 705, 782, 816, 891, 927, 1073, 1077, 1091, 1160, 1168], "stdev": [34, 279], "ipccompress": [35, 36, 279], "arrow": [35, 36, 52, 97, 98, 110, 111, 114, 116, 125, 190, 218, 219, 235, 237, 279, 816, 1136, 1141, 1160], "ipc": [35, 36, 52, 114, 115, 116, 125, 128, 279, 717, 816], "feather": [35, 114, 125, 279, 717], "access": [35, 73, 74, 75, 76, 124, 127, 146, 190, 217, 218, 279, 479, 570, 705, 794, 816, 1089, 1168], "doc": [35, 36, 111, 131, 133, 155, 279], "python": [35, 36, 56, 98, 108, 109, 110, 130, 131, 133, 146, 190, 196, 218, 219, 237, 265, 279, 293, 344, 476, 478, 480, 570, 649, 650, 652, 653, 692, 693, 695, 705, 711, 804, 826, 880, 892, 893, 894, 899, 1018, 1089, 1140, 1160], "lz4": [35, 36, 39, 52, 53, 279, 816], "zstd": [35, 36, 39, 52, 53, 279, 816], "batch": [36, 106, 109, 110, 116, 126, 128, 279, 727, 756, 757, 816], "pretti": [37, 279], "row_ori": [37, 279], "iobas": [37, 38, 117, 118, 279, 493, 730, 768, 775, 796, 816], "serial": [37, 38, 279, 730, 796, 816], "represent": [37, 38, 239, 279, 320, 348, 352, 355, 356, 358, 360, 362, 365, 368, 369, 372, 379, 380, 382, 616, 705, 734, 754, 816, 852, 853, 884, 888, 890, 891, 895, 897, 900, 902, 905, 908, 909, 912, 919, 920, 922, 1139, 1143, 1160], "orient": [37, 73, 75, 101, 103, 279, 816], "slower": [37, 101, 103, 113, 174, 177, 196, 206, 250, 265, 279, 480, 670, 705, 742, 745, 804, 816, 1018, 1160], "common": [37, 72, 78, 79, 80, 249, 279, 477, 500, 705, 711, 727, 728, 734, 736, 766, 779, 789, 816], "write_ndjson": [37, 279], "bit_set": [37, 279, 775, 816], "newlin": [38, 118, 126, 279], "delimit": [38, 51, 118, 126, 208, 238, 279, 560, 816, 1079, 1137, 1160], "parquetcompress": [39, 279], "compression_level": [39, 53, 279, 816], "statist": [39, 53, 108, 109, 120, 127, 156, 279, 387, 388, 426, 534, 535, 536, 537, 538, 539, 540, 541, 542, 554, 705, 816, 872, 927, 928, 969, 1053, 1073, 1160], "row_group_s": [39, 53, 279, 816], "use_pyarrow": [39, 108, 114, 116, 120, 279, 1140, 1141, 1160], "pyarrow_opt": [39, 112, 120, 123, 279], "parquet": [39, 53, 120, 121, 127, 279, 717, 816], "gzip": [39, 53, 279, 816], "lzo": [39, 53, 279, 816], "brotli": [39, 53, 279, 816], "choos": [39, 52, 53, 175, 208, 279, 743, 816], "good": [39, 52, 53, 190, 279, 816], "perform": [39, 52, 53, 72, 88, 98, 108, 109, 110, 114, 120, 122, 125, 126, 127, 146, 150, 174, 175, 176, 177, 178, 179, 193, 196, 211, 216, 219, 244, 265, 279, 293, 480, 512, 531, 573, 574, 597, 598, 599, 705, 722, 743, 744, 746, 747, 752, 771, 781, 786, 795, 816, 1018, 1092, 1093, 1116, 1117, 1118, 1160], "fast": [39, 52, 53, 139, 141, 279, 392, 546, 705, 816, 932, 1063, 1160, 1168], "decompress": [39, 52, 53, 279, 816], "backward": [39, 53, 165, 193, 279, 310, 364, 394, 705, 738, 752, 816, 904, 934, 1160], "guarante": [39, 53, 98, 108, 109, 246, 279, 736, 787, 816, 939, 1160], "deal": [39, 53, 190, 279, 289, 291, 370, 371, 378, 523, 597, 599, 626, 628, 651, 705, 816, 823, 824, 910, 911, 918, 1038, 1116, 1118, 1160], "older": [39, 53, 279, 816], "reader": [39, 53, 106, 108, 109, 114, 116, 120, 279, 718, 816], "higher": [39, 53, 210, 271, 279, 521, 538, 679, 705, 767, 810, 816, 1037, 1052, 1160], "mean": [39, 53, 108, 109, 114, 120, 122, 156, 165, 174, 175, 193, 208, 216, 250, 258, 279, 367, 371, 378, 391, 394, 531, 534, 535, 536, 537, 538, 540, 541, 542, 554, 568, 637, 649, 650, 652, 653, 654, 692, 693, 695, 705, 738, 742, 743, 752, 756, 757, 771, 797, 816, 872, 907, 911, 918, 930, 934, 939, 1049, 1073, 1087, 1160], "smaller": [39, 53, 161, 279, 736, 816, 925, 1160], "disk": [39, 51, 52, 53, 114, 279, 779, 816], "11": [39, 53, 98, 130, 138, 216, 279, 288, 363, 364, 367, 371, 378, 409, 513, 523, 531, 533, 541, 555, 625, 688, 693, 705, 727, 728, 748, 755, 766, 771, 784, 816, 819, 907, 911, 918, 1018, 1047, 1160], "22": [39, 53, 130, 137, 279, 348, 368, 371, 378, 380, 381, 533, 534, 535, 537, 540, 541, 542, 597, 705, 816, 819, 911, 918, 921, 1047, 1116, 1160, 1168], "comput": [39, 53, 78, 80, 85, 161, 174, 193, 241, 246, 258, 271, 279, 285, 295, 296, 297, 298, 299, 300, 306, 307, 308, 321, 326, 327, 328, 330, 331, 332, 333, 334, 339, 383, 390, 426, 440, 447, 452, 453, 454, 457, 458, 459, 460, 465, 469, 471, 472, 473, 496, 512, 513, 519, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 551, 552, 553, 554, 558, 614, 615, 622, 627, 629, 633, 634, 635, 641, 643, 655, 682, 683, 695, 705, 727, 742, 749, 751, 752, 787, 794, 797, 810, 816, 821, 827, 828, 829, 830, 831, 832, 838, 839, 840, 855, 863, 864, 865, 866, 867, 868, 869, 874, 924, 925, 929, 969, 982, 989, 994, 995, 996, 999, 1000, 1001, 1002, 1007, 1011, 1013, 1014, 1015, 1023, 1032, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1070, 1071, 1072, 1073, 1076, 1134, 1135, 1142, 1148, 1160], "512": [39, 110, 279, 517, 705, 1032, 1160], "implement": [39, 98, 110, 146, 196, 265, 279, 425, 480, 499, 501, 502, 503, 504, 518, 609, 670, 705, 804, 1018, 1061, 1062, 1160], "v": [39, 59, 60, 161, 279, 545, 705, 1059, 1160], "At": [39, 279], "moment": [39, 155, 279, 426, 554, 705, 969, 1073, 1160], "write_t": [39, 279], "partition_col": [39, 111, 279], "write_to_dataset": [39, 279], "similar": [39, 142, 169, 193, 226, 279, 374, 377, 461, 512, 530, 547, 695, 705, 736, 752, 777, 816, 914, 917, 1003, 1045, 1065, 1160], "spark": [39, 279], "partit": [39, 111, 112, 120, 123, 127, 128, 191, 206, 279], "we": [39, 107, 108, 109, 110, 113, 114, 115, 116, 117, 118, 119, 121, 122, 127, 175, 193, 216, 250, 279, 367, 371, 378, 442, 478, 480, 531, 534, 535, 536, 537, 538, 540, 541, 542, 570, 581, 649, 650, 652, 653, 667, 692, 693, 695, 705, 730, 743, 752, 756, 757, 768, 771, 816, 826, 907, 911, 918, 942, 984, 1018, 1089, 1100, 1160], "use_pyarrow_write_to_dataset": [39, 279], "first": [39, 72, 108, 109, 113, 117, 122, 126, 131, 132, 133, 134, 137, 147, 173, 175, 178, 181, 193, 195, 196, 203, 207, 208, 233, 238, 239, 245, 246, 250, 263, 279, 303, 305, 335, 338, 364, 367, 371, 406, 413, 414, 430, 439, 442, 445, 446, 468, 479, 489, 516, 545, 557, 568, 571, 572, 582, 583, 638, 644, 658, 662, 695, 705, 727, 743, 746, 748, 752, 755, 765, 787, 794, 802, 816, 819, 835, 870, 872, 873, 904, 907, 911, 941, 951, 952, 971, 981, 984, 987, 988, 1010, 1017, 1059, 1087, 1089, 1090, 1091, 1101, 1102, 1131, 1139, 1160, 1168], "watermark": [39, 279], "partitioned_object": [39, 279], "calendar": [41, 42, 175, 193, 216, 250, 279, 355, 367, 371, 378, 382, 531, 534, 535, 536, 537, 538, 540, 541, 542, 649, 650, 652, 653, 654, 692, 693, 705, 743, 752, 771, 816, 891, 907, 911, 918, 922], "time_unit": [42, 44, 343, 344, 351, 376, 381, 599, 649, 650, 651, 652, 653, 654, 660, 819, 879, 880, 887, 916, 921, 1118], "time_zon": [42, 345, 370, 378, 599, 649, 650, 651, 652, 653, 819, 878, 881, 886, 910, 918, 1118], "timezon": [42, 819], "m": [42, 44, 60, 192, 279, 342, 343, 344, 350, 351, 374, 376, 377, 381, 568, 597, 598, 599, 602, 649, 650, 651, 652, 653, 654, 660, 751, 816, 819, 878, 879, 880, 886, 887, 914, 916, 917, 921, 1087, 1116, 1117, 1118, 1121], "zoneinfo": [42, 819], "run": [42, 51, 52, 53, 78, 79, 139, 141, 174, 177, 194, 196, 208, 223, 246, 255, 265, 279, 293, 335, 442, 480, 529, 530, 574, 684, 705, 727, 728, 734, 736, 742, 745, 756, 757, 761, 766, 774, 779, 787, 793, 816, 819, 870, 984, 1018, 1044, 1045, 1093, 1160, 1167, 1168], "available_timezon": [42, 819], "check": [42, 108, 109, 122, 131, 132, 133, 134, 143, 170, 175, 176, 178, 179, 187, 189, 192, 216, 279, 311, 314, 315, 410, 415, 436, 531, 561, 566, 590, 705, 743, 744, 746, 747, 751, 756, 757, 771, 816, 842, 845, 846, 947, 949, 953, 954, 956, 963, 964, 965, 967, 968, 978, 1060, 1080, 1085, 1109, 1160], "128": [43, 74, 1032, 1160], "bit": [43, 45, 46, 47, 48, 49, 50, 66, 67, 68, 69, 525, 561, 705, 1040, 1080, 1160], "scale": [43, 161, 279, 480, 516, 600, 705, 925, 1119, 1160], "experiment": [43, 79, 128, 222, 248, 249, 254, 279, 335, 371, 480, 534, 535, 536, 537, 538, 540, 541, 542, 705, 728, 773, 792, 816, 854, 870, 911, 942, 1036, 1160], "progress": 43, "expect": [43, 89, 91, 96, 108, 110, 122, 480, 667, 705, 754, 756, 757, 816], "32": [45, 48, 67, 74, 189, 216, 279, 497, 531, 549, 705, 771, 816, 874, 908, 1032, 1052, 1160], "sign": [47, 48, 49, 50, 367, 525, 605, 705, 819, 907, 956, 1040, 1124, 1160], "maintain_ord": [51, 52, 53, 150, 174, 177, 206, 208, 244, 246, 250, 259, 261, 262, 264, 266, 267, 268, 269, 270, 271, 272, 279, 287, 309, 403, 470, 480, 612, 619, 642, 705, 722, 728, 734, 736, 742, 745, 766, 779, 781, 786, 787, 798, 800, 801, 803, 805, 806, 807, 808, 809, 810, 811, 816, 841, 1012, 1145, 1160], "type_coercion": [51, 52, 53, 78, 79, 727, 728, 734, 736, 766, 779, 816], "predicate_pushdown": [51, 52, 53, 78, 79, 727, 728, 734, 736, 756, 757, 766, 779, 816], "projection_pushdown": [51, 52, 53, 78, 79, 727, 728, 734, 736, 756, 757, 766, 779, 816], "simplify_express": [51, 52, 53, 78, 79, 727, 728, 734, 736, 766, 779, 816], "slice_pushdown": [51, 52, 53, 78, 79, 727, 728, 734, 736, 756, 757, 766, 779, 816], "no_optim": [51, 52, 53, 78, 79, 727, 728, 736, 756, 757, 766, 816], "evalu": [51, 52, 53, 164, 166, 193, 279, 290, 304, 335, 408, 431, 432, 468, 479, 511, 626, 628, 632, 636, 649, 650, 652, 653, 655, 664, 665, 678, 681, 687, 692, 693, 695, 696, 705, 727, 739, 749, 751, 752, 816, 836, 870, 973, 974, 1151, 1160], "queri": [51, 52, 53, 57, 59, 78, 79, 110, 111, 114, 122, 125, 126, 127, 163, 194, 207, 279, 478, 479, 480, 572, 705, 727, 728, 734, 736, 748, 755, 766, 779, 795, 799, 804, 816, 825, 931, 1018, 1091, 1160, 1167], "larger": [51, 52, 53, 641, 727, 816], "ram": [51, 52, 53, 816], "maintain": [51, 52, 53, 150, 244, 279, 309, 470, 545, 619, 705, 722, 781, 786, 816, 841, 1012, 1059, 1145, 1160], "slightli": [51, 52, 53, 113, 816], "faster": [51, 52, 53, 110, 163, 240, 248, 279, 293, 480, 620, 705, 816, 825, 826, 931, 1018, 1160], "coercion": [51, 52, 53, 78, 79, 526, 705, 727, 728, 734, 736, 766, 779, 816], "optim": [51, 52, 53, 78, 79, 120, 122, 125, 126, 127, 190, 194, 207, 211, 218, 246, 279, 727, 728, 734, 736, 756, 757, 766, 779, 787, 795, 804, 816, 855, 1160], "predic": [51, 52, 53, 78, 79, 122, 125, 126, 127, 128, 166, 189, 217, 279, 395, 624, 658, 705, 727, 728, 734, 736, 739, 756, 757, 766, 769, 779, 795, 816, 935, 1061, 1062, 1160], "pushdown": [51, 52, 53, 78, 79, 727, 728, 734, 736, 756, 757, 766, 769, 779, 795, 816, 1061, 1062, 1160], "project": [51, 52, 53, 78, 79, 122, 124, 125, 126, 127, 293, 556, 557, 705, 727, 728, 734, 736, 756, 757, 766, 769, 775, 779, 816], "slice": [51, 52, 53, 73, 78, 79, 161, 181, 191, 233, 279, 446, 466, 480, 488, 490, 532, 534, 535, 536, 537, 538, 540, 541, 542, 705, 727, 728, 734, 736, 756, 757, 766, 779, 816, 925, 941, 988, 1008, 1046, 1048, 1049, 1050, 1051, 1052, 1054, 1055, 1056, 1131, 1160], "turn": [51, 52, 53, 78, 79, 108, 109, 122, 603, 727, 728, 734, 736, 756, 757, 766, 816, 1122], "off": [51, 52, 53, 78, 79, 108, 109, 122, 727, 728, 734, 736, 756, 757, 766, 816], "certain": [51, 52, 53, 79, 87, 112, 123, 184, 250, 279, 727, 728, 766, 816, 1160], "lf": [51, 52, 53, 720, 722, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 742, 743, 748, 749, 750, 751, 753, 754, 755, 757, 758, 759, 760, 761, 763, 764, 765, 766, 767, 769, 770, 772, 773, 775, 777, 779, 780, 781, 782, 783, 784, 785, 786, 787, 789, 790, 791, 792, 794, 795, 816, 1167, 1168], "scan_csv": [51, 52, 53, 108, 109, 816], "my_larger_than_ram_fil": [51, 52, 53, 816], "data_pagesize_limit": [53, 816], "reduc": [53, 108, 109, 120, 122, 125, 126, 127, 266, 267, 269, 272, 549, 658, 705, 805, 806, 808, 811, 816, 1020, 1035, 1067, 1130, 1160], "pressur": [53, 108, 109, 120, 122, 126, 127, 549, 705, 816, 1067, 1160], "improv": [53, 114, 125, 816], "speed": [53, 293, 480, 705, 816, 1168], "page": [53, 114, 120, 125, 127, 279, 705, 717, 816, 1160], "integer_list": 54, "float_list": 54, "wrap": [56, 104, 410, 705], "arbitrari": [56, 138, 819], "eager": [57, 58, 59, 60, 61, 62, 175, 208, 248, 279, 343, 345, 348, 349, 351, 353, 356, 357, 359, 361, 363, 364, 366, 367, 368, 370, 371, 373, 376, 378, 380, 381, 534, 535, 537, 540, 541, 542, 632, 636, 649, 650, 652, 653, 660, 664, 665, 678, 681, 687, 692, 693, 696, 704, 705, 743, 757, 816, 878, 879, 881, 884, 885, 886, 887, 888, 889, 894, 895, 896, 897, 898, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 913, 916, 918, 919, 920, 1167], "against": [57, 110, 442, 816, 984, 1167, 1168], "eagerli": [57, 468], "unset": [57, 137, 370, 468, 910], "init": [57, 144], "eager_execut": [57, 1167], "itself": [57, 136, 480, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 682, 683, 705, 754, 816, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1160, 1167], "impact": [57, 175, 178, 279, 743, 746, 816, 1167], "declar": [57, 97, 99, 100, 101, 103, 110, 117, 118, 126, 279, 816], "godfath": 57, "1972": 57, "6_000_000": 57, "134_821_952": 57, "dark": 57, "knight": 57, "2008": 57, "185_000_000": 57, "533_316_061": 57, "schindler": 57, "1993": 57, "22_000_000": 57, "96_067_179": 57, "pulp": 57, "fiction": 57, "1994": 57, "8_000_000": 57, "107_930_000": 57, "shawshank": 57, "redempt": 57, "25_000_000": 57, "28_341_469": 57, "release_year": 57, "budget": 57, "gross": 57, "imdb_scor": 57, "ctx": [57, 58, 59, 60, 61, 62], "film": 57, "1990": 57, "BY": [57, 59], "desc": [57, 59], "AS": [57, 685, 1167], "decad": 57, "total_gross": 57, "n_film": 57, "2000": [57, 354, 356, 363, 364, 367, 372, 819, 890, 903, 904, 907, 912], "533316061": 57, "232338648": 57, "1970": [57, 128], "134821952": 57, "register_glob": [58, 60, 62, 1167], "register_mani": [58, 59, 62], "unregist": [58, 59, 60, 1167], "frame_data": [58, 61], "execut": [58, 59, 61, 63, 80, 110, 194, 279, 317, 442, 622, 705, 723, 756, 757, 766, 816, 984, 1148, 1160, 1167], "collect": [58, 59, 62, 75, 78, 79, 122, 123, 124, 128, 138, 140, 157, 159, 194, 208, 235, 246, 247, 279, 317, 389, 415, 480, 639, 656, 660, 687, 705, 720, 722, 724, 728, 730, 731, 732, 735, 736, 737, 738, 739, 740, 742, 743, 748, 750, 751, 752, 753, 755, 757, 758, 759, 760, 761, 762, 763, 764, 765, 767, 769, 770, 771, 773, 775, 777, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 794, 795, 797, 798, 800, 801, 803, 804, 805, 806, 807, 808, 809, 810, 811, 816, 819, 954, 1160, 1167, 1168], "global": [59, 63, 81, 82, 129, 138, 143, 240, 279, 479, 705, 851, 853, 1167], "scope": [59, 62, 144, 716, 819, 1167], "automat": [59, 62, 97, 99, 100, 101, 103, 104, 108, 109, 110, 111, 113, 117, 118, 122, 126, 138, 140, 142, 222, 254, 279, 317, 479, 592, 593, 594, 705, 773, 792, 816, 1017, 1111, 1112, 1113, 1160, 1167], "map": [59, 60, 99, 100, 108, 109, 110, 111, 114, 115, 120, 121, 122, 125, 151, 160, 168, 190, 196, 212, 217, 218, 219, 236, 279, 288, 371, 378, 477, 478, 479, 480, 512, 530, 622, 669, 705, 724, 733, 769, 816, 819, 872, 911, 918, 1017, 1018, 1045, 1148, 1160, 1167], "recent": [59, 131, 132, 133, 134, 513, 705, 1032, 1160, 1167], "df1": [59, 61, 62, 72, 80, 131, 132, 163, 170, 201, 241, 252, 279, 762, 816], "x": [59, 60, 72, 80, 98, 104, 108, 109, 111, 122, 136, 138, 146, 161, 183, 186, 188, 192, 200, 208, 218, 219, 248, 279, 286, 288, 290, 337, 384, 385, 399, 402, 404, 405, 428, 435, 448, 473, 475, 477, 478, 480, 495, 497, 500, 501, 502, 503, 504, 507, 508, 511, 517, 518, 526, 530, 551, 554, 588, 608, 609, 616, 618, 625, 627, 629, 633, 634, 644, 645, 647, 658, 667, 669, 672, 676, 680, 689, 705, 751, 757, 761, 780, 816, 819, 853, 934, 967, 1018, 1070, 1073, 1107, 1143, 1160, 1167], "df2": [59, 61, 62, 72, 80, 131, 132, 163, 170, 241, 252, 279], "join": [59, 63, 72, 78, 79, 80, 82, 193, 249, 279, 409, 512, 705, 727, 728, 734, 736, 752, 766, 779, 789, 794, 816], "named_fram": [60, 1167], "lf1": [60, 62], "o": [60, 114, 125, 316, 335, 567, 617, 705, 847, 870, 1086, 1111, 1144, 1160], "lf2": [60, 62, 816], "p": [60, 74, 207, 279, 516, 687, 705, 765, 816], "q": [60, 219, 279, 687], "r": [60, 108, 109, 122, 516, 563, 567, 568, 569, 570, 582, 705, 819, 1082, 1086, 1087, 1088, 1089, 1101], "lf3": [60, 816], "lf4": [60, 816], "either": [60, 138, 189, 193, 194, 198, 206, 216, 217, 232, 240, 279, 520, 531, 597, 626, 635, 687, 705, 752, 754, 771, 816, 819, 1036, 1116, 1160, 1168], "tbl1": [60, 62], "tbl2": [60, 62], "tbl3": 60, "tbl4": 60, "statement": [61, 695], "hello_world": 61, "baz": [61, 184, 185, 208, 247, 279, 570, 587, 589, 701, 750, 788, 816, 819, 1089, 1108], "hello_data": 61, "foo_bar": [61, 484, 487, 587, 667], "registr": [62, 717], "lifetim": [62, 144, 716], "context": [62, 63, 81, 82, 142, 204, 261, 279, 287, 293, 317, 329, 395, 429, 442, 450, 478, 480, 488, 556, 557, 622, 630, 642, 657, 660, 666, 670, 681, 684, 704, 705, 716, 717, 794, 800, 816, 970, 984, 992, 1148, 1160, 1167], "manag": [62, 63, 81, 82, 716, 717, 1167], "often": [62, 144, 175, 176, 178, 179, 216, 279, 437, 438, 526, 531, 705, 743, 744, 746, 747, 771, 816, 979, 980], "want": [62, 79, 100, 163, 196, 204, 279, 378, 395, 478, 479, 480, 530, 534, 535, 536, 537, 538, 540, 541, 542, 573, 644, 649, 658, 678, 681, 696, 705, 728, 748, 755, 816, 819, 825, 918, 931, 1018, 1045, 1092, 1141, 1160], "df0": [62, 201, 279, 762, 816], "exit": [62, 63, 81, 144, 1167], "construct": [62, 63, 81, 82, 97, 99, 100, 101, 102, 103, 110, 279, 401, 479, 678, 681, 696, 701, 705, 730, 741, 768, 816, 851, 1160], "persist": 62, "through": [62, 98, 110, 701, 819, 1160], "tbl0": 62, "remain": [62, 108, 109, 122, 159, 161, 166, 279, 340, 341, 395, 441, 588, 589, 705, 732, 739, 756, 757, 816, 875, 876, 925, 935, 983, 1107, 1108, 1160], "text": [62, 110, 573, 574, 582, 583, 685, 1092, 1093, 1168], "misc": 62, "testing1234": 62, "test1": 62, "test2": 62, "test3": 62, "disabl": [63, 81, 82, 190, 279, 727, 816], "cach": [63, 78, 79, 81, 82, 114, 122, 125, 127, 131, 132, 133, 134, 143, 479, 534, 535, 536, 537, 538, 540, 541, 542, 597, 598, 599, 602, 705, 716, 727, 728, 734, 736, 766, 779, 816, 851, 1116, 1117, 1118, 1121], "under": [63, 73, 74, 75, 76, 81, 82, 697, 698, 700, 701, 706, 707, 710, 712, 713, 714, 1152, 1154, 1156, 1161, 1164, 1165, 1166], "physic": [63, 82, 108, 109, 193, 279, 320, 616, 705, 723, 751, 752, 816, 852, 853, 1143, 1160], "equal": [63, 82, 108, 109, 110, 122, 131, 132, 133, 134, 150, 170, 175, 178, 193, 201, 244, 279, 317, 336, 384, 385, 402, 428, 468, 508, 520, 526, 532, 533, 534, 535, 536, 537, 538, 540, 541, 542, 579, 580, 605, 682, 683, 701, 705, 722, 743, 746, 752, 762, 781, 786, 816, 871, 1010, 1036, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1054, 1055, 1056, 1060, 1098, 1099, 1124, 1160, 1168], "concaten": [63, 80, 81, 82, 169, 207, 279, 516, 639, 640, 705, 765, 816, 857, 1024, 1160], "introduc": [63, 82, 597, 598, 599, 1116, 1117, 1118], "overhead": [63, 82, 122, 125, 126, 127], "amount": [63, 82, 293, 480, 654, 705], "depend": [63, 77, 82, 110, 130, 433, 434, 480, 488, 520, 523, 654, 657, 660, 666, 705, 975, 976, 1036, 1038, 1160, 1168], "categori": [63, 82, 238, 279, 319, 320, 336, 520, 705, 850, 852, 871, 942, 1036, 1160], "nest": [63, 104, 120, 127, 161, 279, 717, 925, 1160, 1167, 1168], "clear": [63, 81, 153, 279, 726, 816, 862, 1160], "outermost": 63, "s1": [63, 81, 82, 133, 134, 169, 279, 968, 1010, 1142, 1151, 1160], "color": [63, 81, 82, 265, 311, 313, 314, 315, 622, 705, 804, 1148, 1160], "red": [63, 81, 82, 265, 622, 705, 804, 1148, 1160], "green": [63, 81, 82, 265, 622, 705, 804, 1148, 1160], "blue": [63, 81, 82, 311, 313, 314, 315, 622, 705, 1148, 1160], "concat": [63, 81, 82, 109, 857, 1024, 1160], "cat": [63, 81, 82, 239, 279, 336, 520, 561, 563, 601, 604, 616, 640, 700, 705, 819, 871, 942, 1036, 1080, 1082, 1120, 1123, 1156, 1160], "decor": [63, 73, 74, 75, 76, 138, 140, 196, 279, 480, 705, 716, 717, 1018, 1160], "dure": [63, 108, 109, 122, 144, 163, 279, 825, 931, 1160], "afterward": [63, 695], "construct_categor": 63, "composit": [64, 137, 1168], "schemadict": [64, 97, 99, 100, 101, 102, 103, 108, 110, 111, 113, 119, 122, 221, 279, 687, 756, 757, 772, 799, 804, 816], "struct_seri": [64, 804], "dai": [65, 175, 178, 191, 193, 216, 250, 279, 363, 364, 367, 368, 371, 378, 380, 531, 534, 535, 536, 537, 538, 540, 541, 542, 648, 649, 650, 651, 652, 653, 654, 692, 693, 705, 743, 746, 752, 771, 816, 819, 903, 904, 907, 908, 911, 918, 920], "static": [70, 799, 804], "utf": 71, "frametyp": [72, 1167], "joinstrategi": [72, 192, 279, 751, 816], "outer": [72, 80, 192, 249, 279, 751, 789, 816], "descend": [72, 150, 224, 230, 244, 279, 303, 463, 523, 546, 556, 557, 622, 635, 705, 722, 776, 781, 786, 816, 835, 964, 1005, 1038, 1063, 1075, 1148, 1160], "fill": [72, 80, 152, 164, 165, 226, 227, 248, 279, 310, 331, 334, 393, 394, 400, 409, 534, 535, 537, 541, 547, 548, 576, 584, 659, 678, 681, 696, 705, 737, 738, 777, 778, 794, 816, 933, 934, 945, 1029, 1048, 1049, 1051, 1054, 1055, 1056, 1065, 1066, 1095, 1103, 1160], "sort": [72, 73, 131, 132, 137, 150, 175, 176, 178, 179, 193, 201, 207, 208, 216, 224, 244, 250, 263, 273, 279, 303, 320, 395, 480, 512, 531, 535, 536, 537, 538, 540, 542, 546, 557, 622, 624, 635, 670, 705, 722, 734, 743, 744, 746, 747, 752, 762, 765, 766, 771, 776, 779, 786, 802, 812, 816, 819, 835, 852, 964, 1063, 1145, 1148, 1160, 1168], "origin": [72, 108, 109, 122, 159, 166, 246, 279, 340, 341, 370, 395, 425, 441, 479, 499, 512, 525, 526, 527, 562, 563, 568, 572, 633, 634, 705, 732, 739, 787, 816, 871, 875, 876, 910, 935, 983, 1017, 1036, 1042, 1081, 1082, 1087, 1091, 1160], "In": [72, 79, 110, 112, 123, 124, 127, 138, 140, 144, 161, 163, 175, 176, 178, 179, 196, 204, 216, 240, 279, 480, 531, 649, 705, 728, 743, 744, 746, 747, 771, 816, 825, 925, 931, 1039, 1160], "duplic": [72, 86, 186, 192, 193, 246, 249, 279, 288, 411, 425, 499, 520, 705, 751, 752, 787, 789, 816, 948, 1036, 1160], "behaviour": [72, 80, 159, 279, 561, 568, 569, 582, 618, 705, 732, 816, 1080, 1087, 1088, 1101], "suitabl": [72, 80, 110, 136, 196, 279, 480, 545, 705, 1018, 1059, 1160, 1168], "get": [72, 79, 105, 115, 121, 128, 142, 150, 154, 160, 168, 171, 172, 175, 176, 178, 179, 181, 182, 186, 188, 189, 195, 203, 208, 216, 217, 221, 225, 229, 233, 244, 253, 263, 273, 279, 287, 301, 302, 303, 305, 309, 319, 330, 331, 332, 333, 334, 351, 396, 406, 424, 427, 430, 444, 449, 470, 481, 482, 483, 488, 490, 494, 505, 506, 514, 515, 521, 529, 531, 555, 559, 610, 611, 612, 619, 623, 649, 657, 662, 666, 670, 671, 672, 673, 674, 675, 676, 686, 690, 694, 705, 722, 728, 729, 733, 740, 743, 744, 746, 747, 748, 753, 755, 771, 772, 780, 784, 786, 791, 802, 812, 816, 833, 834, 835, 836, 837, 841, 850, 857, 866, 867, 868, 869, 887, 938, 941, 946, 948, 966, 971, 986, 991, 1012, 1019, 1021, 1022, 1024, 1027, 1028, 1033, 1034, 1037, 1044, 1074, 1077, 1131, 1136, 1137, 1145, 1149, 1150, 1160], "speedup": [72, 190, 196, 279, 480, 705, 1018, 1160], "receiv": [72, 110, 122, 196, 207, 265, 279, 480, 516, 705, 765, 816, 1168], "now": [72, 216, 279, 317, 705, 771, 816, 1118], "One": [72, 156, 204, 208, 279, 290, 511, 685, 705, 819, 872, 1160], "whose": [72, 193, 208, 279, 389, 656, 705, 752, 816], "uniqu": [72, 135, 136, 137, 140, 148, 149, 188, 192, 204, 208, 219, 270, 279, 294, 305, 336, 424, 498, 520, 597, 598, 599, 602, 620, 622, 631, 677, 705, 720, 721, 751, 809, 816, 837, 871, 872, 966, 1025, 1036, 1116, 1117, 1118, 1121, 1146, 1148, 1160], "post": 72, "constrain": [72, 159, 279, 732, 816], "newli": 72, "boolean": [72, 150, 166, 169, 194, 230, 244, 279, 289, 290, 291, 311, 314, 315, 354, 395, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 431, 432, 436, 509, 511, 514, 515, 557, 571, 624, 625, 635, 636, 687, 695, 705, 722, 726, 739, 754, 781, 786, 816, 819, 823, 824, 836, 842, 844, 890, 935, 946, 947, 948, 950, 951, 952, 954, 955, 957, 958, 959, 960, 961, 962, 966, 973, 974, 978, 1030, 1033, 1034, 1061, 1080, 1141, 1151, 1160], "know": [72, 110, 208, 279, 468, 1141, 1150, 1160], "2022": [72, 151, 156, 173, 175, 193, 216, 250, 279, 344, 352, 360, 367, 371, 378, 531, 534, 535, 536, 537, 538, 540, 541, 542, 597, 649, 650, 652, 653, 654, 660, 692, 693, 705, 724, 743, 752, 771, 816, 819, 880, 891, 907, 911, 918, 1116], "y": [72, 80, 98, 104, 136, 138, 146, 161, 186, 188, 192, 200, 208, 218, 219, 248, 279, 286, 288, 290, 374, 377, 384, 385, 402, 404, 428, 435, 448, 475, 477, 480, 500, 501, 502, 503, 504, 507, 508, 511, 518, 526, 530, 597, 598, 599, 609, 618, 625, 627, 629, 633, 634, 647, 654, 667, 672, 676, 689, 705, 751, 761, 780, 816, 819, 853, 914, 917, 1116, 1117, 1118], "df3": [72, 279], "set_tbl_format": 72, "09": [72, 130, 138, 216, 279, 344, 363, 364, 531, 600, 649, 693, 705, 771, 816, 819, 1119], "01": [72, 138, 151, 156, 173, 175, 216, 250, 279, 342, 343, 344, 345, 349, 351, 352, 353, 355, 356, 357, 359, 360, 361, 362, 363, 364, 366, 367, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 381, 382, 531, 534, 535, 537, 540, 541, 542, 597, 598, 599, 602, 649, 650, 652, 654, 705, 724, 743, 771, 816, 819, 879, 880, 881, 882, 883, 885, 887, 888, 889, 894, 895, 896, 898, 900, 901, 903, 904, 905, 906, 907, 910, 911, 913, 914, 915, 916, 917, 918, 921, 1116, 1117, 1118, 1121], "02": [72, 151, 173, 175, 193, 216, 250, 279, 343, 344, 351, 353, 361, 363, 364, 367, 370, 371, 373, 376, 378, 381, 531, 534, 535, 536, 537, 538, 540, 541, 542, 543, 597, 598, 599, 602, 649, 650, 652, 653, 654, 692, 693, 705, 724, 743, 752, 771, 816, 819, 879, 880, 882, 883, 887, 888, 889, 894, 895, 900, 901, 903, 904, 905, 907, 910, 911, 913, 915, 916, 918, 1010, 1116, 1117, 1118, 1121], "03": [72, 104, 151, 175, 216, 250, 279, 343, 344, 345, 349, 351, 353, 361, 363, 364, 367, 370, 371, 372, 373, 374, 376, 377, 378, 381, 531, 534, 535, 537, 540, 541, 542, 598, 602, 649, 650, 652, 654, 705, 724, 743, 771, 816, 879, 880, 881, 885, 887, 888, 889, 894, 895, 901, 903, 904, 905, 910, 911, 913, 914, 916, 917, 1117, 1121], "af1": 72, "af2": 72, "af3": 72, "keep": [72, 108, 109, 122, 246, 249, 250, 279, 425, 479, 492, 638, 705, 787, 789, 816, 1017, 1160], "easili": [72, 110, 222, 254, 258, 279, 687, 773, 792, 797, 816], "dot": [72, 705, 779, 816, 1160], "product": [72, 155, 279, 333, 339, 705, 736, 816, 868, 874, 1160], "fill_nul": [72, 164, 279, 705, 737, 794, 816, 1160], "sum_horizont": [72, 688], "167": 72, "47": 72, "callabl": [73, 74, 75, 76, 122, 147, 169, 196, 207, 260, 265, 279, 293, 468, 476, 477, 478, 480, 500, 516, 532, 533, 630, 644, 645, 658, 668, 669, 670, 680, 705, 756, 757, 765, 799, 804, 816, 826, 1010, 1018, 1046, 1047, 1160], "by_first_letter_of_column_nam": 73, "f": [73, 109, 156, 173, 191, 235, 245, 248, 279, 286, 468, 549, 567, 597, 599, 630, 639, 668, 705, 1010, 1086, 1116, 1118], "fromkei": [73, 75], "by_first_letter_of_column_valu": 73, "starts_with": [73, 311, 314, 561, 566, 819, 1085], "to_seri": [73, 171, 279, 597, 636, 681, 1116], "xx": [73, 75, 137, 140, 819], "xy": [73, 75], "yy": [73, 75, 137, 140, 819], "yz": [73, 75], "b1": [73, 75], "b2": [73, 75], "pow_n": 74, "powersofn": 74, "next": [74, 175, 193, 216, 250, 279, 310, 367, 371, 378, 523, 531, 534, 535, 536, 537, 538, 540, 541, 542, 649, 650, 652, 653, 692, 693, 705, 743, 752, 771, 816, 907, 911, 918, 1038, 1160], "ceil": [74, 705, 1160], "previou": [74, 144, 501, 502, 513, 518, 607, 609, 705, 825, 1032, 1160], "floor": [74, 705, 1160], "nearest": [74, 193, 210, 271, 279, 322, 398, 409, 521, 538, 679, 705, 752, 767, 810, 816, 856, 937, 945, 1037, 1052, 1160], "24": [74, 130, 161, 175, 193, 196, 216, 250, 279, 333, 335, 348, 353, 367, 368, 371, 378, 380, 497, 531, 534, 535, 536, 537, 538, 540, 541, 542, 649, 650, 652, 653, 654, 692, 693, 705, 743, 752, 771, 816, 870, 889, 907, 911, 918, 968, 1160], "001": [74, 356, 357, 359, 366, 605, 654, 896, 898, 906, 1124], "next_pow2": 74, "prev_pow2": 74, "nearest_pow2": 74, "split_by_column_dtyp": 75, "collect_al": [75, 79, 727, 728, 816], "31": [76, 138, 344, 348, 349, 352, 360, 363, 367, 597, 648, 649, 651, 660, 667, 819, 878, 880, 884, 885, 903, 1116, 1168], "42": [76, 180, 201, 216, 279, 531, 705, 762, 771, 816, 940, 1160], "961": 76, "1764": 76, "4160": 76, "build": [77, 98, 819, 1168], "wa": [77, 131], "compil": [77, 433, 434, 975, 976], "gate": 77, "info": [77, 112, 123, 124, 130], "otherwis": [77, 110, 113, 137, 142, 196, 201, 219, 222, 265, 279, 312, 323, 336, 386, 387, 388, 468, 480, 488, 516, 520, 525, 535, 536, 537, 538, 540, 542, 561, 564, 626, 670, 695, 705, 762, 773, 804, 816, 843, 859, 871, 926, 927, 928, 1010, 1018, 1036, 1040, 1061, 1062, 1080, 1083, 1160], "host": [77, 108, 114, 116, 120, 125], "git": 77, "lazy_fram": [78, 79], "comm_subplan_elim": [78, 79, 727, 728, 734, 736, 766, 779, 816], "comm_subexpr_elim": [78, 79, 317, 705, 727, 728, 734, 736, 766, 779, 816], "graph": [78, 194, 279, 727, 749, 794, 816], "parallel": [78, 80, 106, 111, 120, 127, 175, 178, 193, 194, 207, 223, 255, 279, 335, 442, 622, 695, 705, 717, 743, 746, 751, 752, 774, 793, 804, 816, 870, 984, 1148, 1160], "threadpool": [78, 142], "Will": [78, 79, 727, 728, 734, 736, 766, 779, 816, 1160], "try": [78, 79, 92, 94, 108, 109, 114, 120, 122, 125, 127, 727, 728, 734, 736, 766, 779, 816], "branch": [78, 79, 727, 728, 734, 736, 766, 779, 816], "subplan": [78, 79, 727, 728, 734, 736, 766, 779, 816], "union": [78, 79, 80, 460, 727, 728, 734, 736, 766, 779, 816, 819, 1002], "subexpress": [78, 79, 727, 728, 734, 736, 766, 779, 816], "reus": [78, 79, 727, 728, 734, 736, 766, 779, 816], "part": [78, 79, 97, 113, 138, 569, 588, 589, 728, 734, 736, 766, 779, 794, 816, 1088, 1107, 1108], "fashion": [78, 79, 192, 279, 728, 734, 736, 766, 779, 816], "alpha": [78, 79, 293, 386, 387, 388, 705, 727, 728, 734, 736, 766, 779, 816, 926, 927, 928, 1160], "gevent": [79, 130, 728, 816], "_geventdataframeresult": [79, 728, 816], "await": [79, 728, 816], "asynchron": [79, 728, 816], "them": [79, 97, 99, 100, 101, 103, 117, 118, 119, 122, 126, 127, 162, 163, 175, 193, 201, 216, 250, 279, 410, 448, 505, 506, 512, 531, 639, 649, 650, 652, 653, 692, 693, 705, 728, 735, 743, 752, 762, 771, 816, 819, 825, 931, 990, 1027, 1028, 1160], "schedul": [79, 728, 816], "insid": [79, 728, 816], "almost": [79, 196, 265, 279, 597, 598, 599, 728, 816, 1018, 1116, 1117, 1118, 1160], "instantli": [79, 728, 816], "asyncio": [79, 728, 816], "releas": [79, 293, 480, 705, 728, 816, 1168], "greenlet": [79, 728, 816], "task": [79, 728, 816], "wrapper": [79, 728, 816], "event": [79, 728, 816], "asyncresult": [79, 728, 816], "timeout": [79, 728, 816], "break": [79, 128, 248, 249, 279, 293, 335, 336, 371, 534, 535, 536, 537, 538, 540, 541, 542, 705, 728, 816, 854, 870, 871, 911, 942, 1036, 1160], "collect_async": [79, 816], "set_except": [79, 728, 816], "futur": [79, 146, 649, 728, 816], "rerais": [79, 728, 816], "iter": [80, 97, 110, 139, 141, 150, 166, 174, 175, 176, 177, 178, 179, 190, 191, 216, 217, 218, 219, 222, 223, 224, 230, 244, 245, 254, 255, 257, 258, 279, 335, 512, 557, 627, 629, 635, 638, 639, 640, 647, 672, 676, 684, 687, 689, 701, 705, 722, 739, 742, 743, 744, 745, 746, 747, 771, 773, 774, 776, 781, 786, 792, 793, 797, 816, 870, 1160, 1168], "polarstyp": 80, "concatmethod": 80, "vertic": [80, 163, 248, 252, 279, 560, 1079], "rechunk": [80, 97, 102, 108, 109, 114, 116, 120, 122, 125, 126, 127, 163, 279, 705, 825, 857, 931, 1024, 1160], "combin": [80, 92, 94, 166, 175, 180, 193, 216, 250, 279, 290, 304, 378, 511, 531, 577, 585, 591, 592, 593, 594, 649, 650, 652, 653, 692, 693, 705, 743, 752, 771, 779, 816, 911, 918, 1096, 1104, 1110, 1111, 1112, 1113], "vertical_relax": 80, "diagon": [80, 245, 279], "diagonal_relax": 80, "vstack": [80, 163, 279], "addition": [80, 217, 279], "coerc": [80, 526, 705], "supertyp": [80, 165, 279, 292, 705, 738, 816], "mismatch": [80, 92, 118, 131, 133], "find": [80, 167, 279, 545, 705, 1059, 1160], "miss": [80, 108, 109, 122, 164, 279, 310, 386, 387, 388, 400, 419, 421, 705, 737, 816, 926, 927, 928, 1150, 1160], "stack": [80, 183, 252, 279], "don": [80, 175, 196, 246, 248, 279, 293, 335, 442, 480, 512, 705, 743, 787, 816, 819, 870, 984, 1018, 1060, 1150, 1160], "auto": [80, 97, 99, 100, 101, 103, 117, 118, 120, 126, 127, 245, 279, 816, 1168], "logic": [80, 131, 132, 133, 134, 196, 265, 279, 289, 291, 480, 616, 626, 628, 670, 705, 730, 741, 751, 768, 775, 796, 804, 816, 823, 824, 1018, 1143, 1160], "align_fram": 80, "pattern": [80, 108, 109, 122, 125, 126, 127, 190, 279, 486, 561, 562, 563, 568, 569, 570, 582, 583, 804, 819, 1061, 1062, 1080, 1081, 1082, 1087, 1088, 1089, 1101, 1102, 1160], "collis": 80, "need": [80, 104, 108, 109, 111, 175, 176, 178, 179, 216, 219, 228, 240, 279, 468, 479, 531, 549, 600, 654, 678, 681, 696, 705, 743, 744, 746, 747, 771, 816, 1067, 1119, 1160, 1168], "sure": [80, 97, 102, 108, 109, 114, 116, 120, 175, 176, 178, 179, 211, 216, 279, 531, 705, 743, 744, 746, 747, 771, 816], "contigu": [80, 97, 102, 108, 109, 114, 116, 120, 122, 125, 126, 127, 211, 279], "relev": 80, "df_h1": 80, "l1": 80, "l2": 80, "df_h2": 80, "r1": 80, "r2": 80, "r3": 80, "df_d1": 80, "df_d2": 80, "df_a1": 80, "df_a2": 80, "df_a3": 80, "enable_string_cach": 81, "stringcach": [81, 82, 192, 279, 717, 851, 853], "reliabl": [81, 82], "wai": [81, 82, 97, 99, 100, 101, 103, 117, 118, 126, 174, 191, 207, 230, 258, 279, 512, 516, 557, 568, 701, 705, 742, 765, 781, 797, 804, 816, 1087], "until": [81, 194, 279, 579, 580, 605, 1098, 1099, 1124], "deprec": [82, 83, 147, 149, 175, 176, 177, 178, 179, 227, 260, 279, 293, 317, 324, 325, 370, 378, 413, 417, 420, 437, 440, 447, 451, 465, 469, 476, 532, 548, 562, 575, 576, 577, 578, 584, 585, 591, 597, 599, 630, 637, 649, 651, 668, 681, 692, 705, 721, 741, 743, 744, 745, 746, 747, 756, 768, 778, 796, 799, 816, 825, 826, 860, 861, 871, 910, 918, 951, 957, 979, 982, 989, 993, 1007, 1011, 1036, 1046, 1066, 1081, 1094, 1095, 1096, 1097, 1103, 1104, 1110, 1116, 1118, 1160], "sinc": [82, 112, 123, 147, 149, 150, 175, 176, 177, 178, 179, 227, 244, 260, 279, 293, 317, 324, 325, 351, 370, 378, 413, 417, 420, 437, 440, 447, 451, 465, 469, 476, 532, 548, 562, 575, 576, 577, 578, 584, 585, 591, 597, 599, 630, 637, 649, 651, 660, 668, 681, 692, 705, 721, 722, 741, 743, 744, 745, 746, 747, 756, 768, 778, 781, 786, 796, 799, 816, 825, 826, 860, 861, 871, 887, 910, 918, 951, 957, 979, 982, 989, 993, 1007, 1011, 1036, 1046, 1066, 1081, 1094, 1095, 1096, 1097, 1103, 1104, 1110, 1116, 1118, 1160], "19": [82, 113, 130, 147, 175, 176, 177, 178, 179, 193, 216, 227, 260, 279, 293, 324, 325, 370, 371, 378, 413, 417, 420, 437, 451, 476, 531, 532, 535, 537, 548, 562, 575, 576, 577, 578, 584, 585, 591, 597, 599, 600, 630, 649, 651, 668, 705, 743, 744, 745, 746, 747, 752, 756, 771, 778, 799, 816, 826, 860, 861, 871, 910, 911, 918, 951, 957, 979, 993, 1036, 1046, 1066, 1081, 1094, 1095, 1096, 1097, 1103, 1104, 1110, 1116, 1118, 1119, 1160], "longer": [82, 108, 122], "accept": [82, 107, 108, 109, 112, 114, 116, 120, 150, 174, 177, 222, 223, 226, 230, 244, 254, 255, 258, 279, 286, 323, 389, 410, 479, 512, 557, 625, 627, 629, 635, 638, 639, 640, 647, 656, 672, 676, 684, 687, 689, 695, 705, 722, 742, 745, 773, 774, 777, 781, 786, 792, 793, 797, 816, 859, 946, 1065, 1160], "disable_string_cach": 82, "finish": [85, 163, 279, 825, 931, 1160], "least": [89, 138, 513, 705, 1032, 1160], "unexpect": [90, 279, 478, 480, 705, 1018, 1160], "caus": [90, 98, 108, 109, 122, 131, 146, 163, 279, 825, 931, 1160], "panic": 90, "incompat": 94, "arrai": [97, 101, 108, 109, 120, 161, 235, 240, 241, 279, 306, 307, 308, 309, 324, 325, 330, 331, 332, 333, 334, 435, 452, 453, 454, 455, 464, 472, 534, 535, 537, 541, 546, 655, 705, 816, 838, 839, 840, 841, 860, 861, 866, 867, 868, 869, 874, 925, 977, 994, 995, 996, 997, 1005, 1006, 1014, 1015, 1048, 1049, 1051, 1054, 1055, 1056, 1063, 1068, 1136, 1141, 1142, 1150, 1160], "chunkedarrai": [97, 203, 279, 874, 1160], "recordbatch": [97, 191, 279], "schemadefinit": [97, 99, 100, 101, 103, 117, 118, 126, 279, 816], "schema_overrid": [97, 99, 100, 101, 102, 103, 110, 111, 113, 117, 118, 119, 191, 240, 279, 309, 816, 819, 841], "copi": [97, 98, 146, 152, 153, 191, 235, 240, 241, 254, 279, 392, 705, 725, 726, 792, 816, 858, 862, 932, 1136, 1141, 1142, 1160], "closest": 97, "pair": [97, 99, 100, 101, 103, 117, 118, 126, 137, 212, 279, 769, 816, 1168], "sever": [97, 99, 100, 101, 103, 117, 118, 126, 279, 816, 1168], "form": [97, 99, 100, 101, 103, 117, 118, 126, 190, 218, 248, 279, 513, 705, 816, 1032, 1160], "dimens": [97, 99, 101, 103, 117, 118, 126, 279, 527, 705, 816, 1042, 1160], "supportsinterchang": 98, "allow_copi": [98, 146], "interchang": [98, 146], "__dataframe__": 98, "convers": [98, 113, 146, 190, 191, 218, 219, 237, 241, 279, 597, 598, 599, 602, 717, 939, 1116, 1117, 1118, 1121, 1140, 1141, 1142, 1160], "detail": [98, 110, 111, 131, 133, 146, 279, 816, 1168], "latest": [98, 112, 123, 146, 370, 371, 378, 400, 489, 597, 599, 651, 705, 910, 911, 918, 1116, 1118], "from_panda": 98, "from_arrow": 98, "effici": [98, 110, 113, 191, 279], "reli": 98, "therefor": [98, 161, 279, 480, 695, 705, 925, 1160], "becaus": [98, 118, 161, 175, 178, 194, 196, 248, 265, 279, 442, 743, 746, 804, 816, 826, 925, 984, 1018, 1160], "convert": [98, 102, 112, 113, 119, 123, 146, 236, 237, 238, 239, 240, 243, 279, 337, 345, 374, 377, 468, 477, 500, 522, 570, 581, 597, 598, 599, 600, 602, 705, 741, 816, 853, 881, 914, 917, 1010, 1089, 1100, 1116, 1117, 1118, 1119, 1121, 1129, 1139, 1140, 1141, 1142, 1150, 1160], "panda": [98, 102, 130, 175, 241, 279, 363, 364, 616, 705, 743, 816, 903, 904, 1142, 1143, 1160], "pd": [98, 102, 616, 705, 1142, 1143, 1160], "df_pd": 98, "dfi": [98, 146], "clone": [99, 100, 101, 102, 103, 152, 240, 241, 279, 725, 816, 858, 1140, 1141, 1142, 1150, 1160], "dimension": [99, 101, 103, 240, 279, 816, 1160], "infer_schema_length": [100, 103, 108, 109, 113, 117, 122, 126, 279, 571, 816, 1090], "NOT": [100, 487, 1167], "typic": [100, 110, 196, 279, 350, 819, 886, 1018, 1160], "clearer": 100, "_partial_": [100, 279, 816], "omit": [100, 104, 136, 138, 140, 144, 204, 219, 279, 692, 693, 819], "mani": [100, 103, 110, 111, 163, 279, 571, 825, 931, 1090, 1160], "scan": [100, 103, 108, 109, 122, 123, 124, 125, 126, 127, 128, 175, 176, 178, 179, 216, 279, 531, 705, 736, 743, 744, 746, 747, 748, 755, 771, 816], "slow": [100, 103, 108, 109, 122, 293, 335, 480, 533, 705, 804, 870, 1047, 1160], "partial": [100, 108, 122], "present": [100, 138, 415, 705, 736, 816, 1150, 1160], "np": [101, 166, 240, 279, 612, 705, 739, 816, 950, 955, 959, 960, 1132, 1160], "ndarrai": [101, 166, 240, 279, 612, 705, 739, 816, 874, 1059, 1062, 1132, 1141, 1160], "numpi": [101, 130, 155, 190, 218, 219, 237, 240, 241, 279, 505, 506, 533, 705, 816, 950, 955, 959, 960, 1027, 1028, 1047, 1141, 1142, 1150, 1160], "columnar": [101, 103, 190, 218, 279], "interpret": [101, 103, 108, 109, 122, 279, 816], "yield": [101, 103, 108, 109, 110, 122, 161, 163, 245, 279, 512, 705, 816, 825, 925, 931, 1160], "conclus": [101, 103, 279, 816], "nan_to_nul": [102, 279, 816, 1160], "include_index": 102, "instal": [102, 108, 109, 111, 114, 116, 120, 130, 155, 240, 241, 279, 779, 816, 1142, 1160], "nan": [102, 131, 132, 133, 134, 138, 146, 164, 241, 279, 340, 341, 384, 385, 393, 402, 404, 409, 419, 421, 422, 423, 428, 475, 481, 494, 505, 506, 507, 508, 533, 618, 641, 705, 737, 816, 828, 832, 875, 876, 933, 959, 960, 1027, 1028, 1047, 1141, 1142, 1160, 1168], "pd_df": 102, "pd_seri": 102, "tbl": [104, 106, 109], "reconstruct": 104, "repr": [104, 138, 140], "trim": 104, "whitespac": [104, 577, 585, 591, 592, 593, 594, 1096, 1104, 1110, 1111, 1112, 1113], "prompt": 104, "extract": [104, 346, 348, 349, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 365, 366, 368, 369, 372, 373, 375, 379, 380, 382, 516, 569, 570, 571, 572, 705, 882, 883, 884, 885, 888, 889, 891, 895, 896, 897, 898, 900, 901, 902, 905, 906, 908, 909, 912, 913, 915, 919, 920, 922, 1088, 1089, 1090, 1091], "to_init_repr": [104, 279, 1160], "truncat": [104, 108, 122, 173, 175, 178, 190, 218, 219, 237, 279, 743, 746, 766, 816], "identifi": [104, 200, 206, 246, 279, 761, 787, 816], "compound": [104, 219, 279, 819], "struct": [104, 204, 222, 243, 247, 254, 279, 336, 468, 479, 520, 529, 530, 570, 571, 588, 589, 622, 644, 645, 647, 669, 705, 773, 788, 792, 804, 816, 871, 1010, 1036, 1044, 1089, 1090, 1105, 1107, 1108, 1160], "neither": [104, 113, 119, 220, 279, 468, 1010], "source_ac": 104, "source_cha": 104, "ident": [104, 152, 153, 279, 374, 529, 530, 705, 725, 726, 816, 858, 862, 914, 1044, 1045, 1160], "timestamp": [104, 175, 178, 279, 370, 660, 743, 746, 816, 910], "tor_id": 104, "nnel_id": 104, "\u03bc": [104, 138, 175, 190, 193, 216, 218, 219, 237, 250, 279, 342, 343, 344, 345, 349, 350, 352, 353, 356, 357, 359, 360, 361, 363, 364, 366, 367, 370, 371, 372, 373, 374, 377, 378, 381, 531, 534, 535, 537, 540, 541, 542, 597, 599, 652, 654, 660, 705, 743, 752, 771, 816, 819, 878, 879, 880, 881, 882, 883, 885, 886, 887, 888, 889, 894, 895, 896, 898, 900, 901, 903, 904, 905, 906, 907, 910, 911, 913, 915, 916, 918, 921, 1116, 1118], "asia": [104, 819, 882, 883, 915], "tokyo": [104, 819], "123456780": 104, "9876543210": 104, "56": [104, 614, 705], "59": [104, 137, 344, 352, 360, 372, 651, 691, 692, 693, 819, 880, 900, 912], "663053": 104, "jst": [104, 819], "803065983": 104, "2055938745": 104, "38": [104, 138], "18": [104, 149, 201, 216, 279, 317, 334, 371, 378, 381, 409, 425, 440, 447, 465, 469, 499, 531, 637, 649, 692, 705, 721, 741, 762, 766, 768, 771, 796, 816, 819, 825, 921, 982, 989, 1007, 1011, 1118, 1160], "050545": 104, "source_actor_id": 104, "source_channel_id": 104, "to_list": [104, 216, 279, 1080, 1160], "datatypeclass": 105, "uint32": [105, 130, 151, 161, 279, 303, 348, 352, 356, 358, 360, 362, 365, 368, 369, 372, 379, 380, 403, 433, 434, 450, 526, 562, 563, 573, 574, 612, 616, 705, 724, 816, 819, 836, 848, 884, 888, 895, 897, 900, 902, 905, 908, 909, 912, 919, 920, 925, 956, 975, 976, 992, 1060, 1081, 1082, 1092, 1093, 1143, 1160], "regular": [105, 190, 217, 218, 250, 279, 329, 389, 429, 450, 561, 562, 563, 568, 569, 570, 582, 583, 656, 705, 819, 970, 992, 1080, 1081, 1082, 1087, 1088, 1089, 1101, 1102, 1160], "uint64": [105, 180, 279, 405, 433, 434, 525, 705, 940, 975, 976, 1040, 1160], "bigidx": 105, "read": [106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 163, 279, 401, 478, 695, 705, 730, 736, 741, 768, 816, 825, 931, 1160], "over": [106, 108, 109, 110, 112, 122, 138, 147, 163, 190, 191, 196, 217, 218, 219, 245, 257, 260, 265, 279, 293, 335, 394, 477, 478, 480, 488, 490, 491, 492, 500, 523, 534, 535, 536, 537, 538, 540, 541, 542, 630, 644, 645, 658, 668, 669, 670, 680, 705, 799, 804, 819, 825, 826, 870, 931, 1018, 1048, 1049, 1051, 1055, 1160], "fetch": [106, 122, 194, 279, 725, 727, 748, 755, 816], "ideal": 106, "read_csv_batch": [106, 718], "tpch": [106, 109], "tables_scale_100": [106, 109], "lineitem": [106, 109, 111], "try_parse_d": [106, 108, 109, 122], "n_row": [107, 108, 109, 114, 116, 120, 122, 125, 126, 127, 191, 279, 736, 816], "handler": [107, 108, 109, 113, 114, 115, 116, 117, 118, 119, 121, 730, 768, 816], "builtin": [107, 108, 109, 113, 114, 115, 116, 117, 118, 119, 121, 730, 768, 816], "stop": [107, 108, 109, 114, 116, 120, 122, 125, 126, 127, 534, 535, 537, 540, 541, 542, 705, 879, 881, 887, 888, 895, 897, 900, 905, 911, 916], "textio": 108, "new_column": [108, 109, 113, 122, 213, 279], "comment_char": [108, 109, 122], "skip_row": [108, 109, 122], "missing_utf8_is_empty_str": [108, 109, 122], "ignore_error": [108, 109, 118, 122], "n_thread": [108, 109], "8192": 108, "csvencod": [108, 109, 122], "low_memori": [108, 109, 120, 122, 126, 127], "skip_rows_after_head": [108, 109, 122], "row_count_nam": [108, 109, 114, 116, 120, 122, 125, 126, 127], "row_count_offset": [108, 109, 114, 116, 120, 122, 125, 126, 127], "sample_s": [108, 109], "eol_char": [108, 109, 122], "raise_if_empti": [108, 109, 113, 119, 122], "truncate_ragged_lin": [108, 122], "fsspec": [108, 109, 114, 116, 120, 123, 124, 125, 127, 130], "remot": [108, 109, 114, 116, 120], "autogener": [108, 109, 122], "column_x": [108, 109, 122], "enumer": [108, 109, 122, 191, 279], "shorter": [108, 109, 122], "comment": [108, 109, 122], "instanc": [108, 109, 122, 127, 138, 140, 144, 151, 163, 169, 279, 318, 489, 534, 535, 536, 537, 538, 540, 541, 542, 644, 658, 701, 705, 724, 757, 795, 816, 825, 848, 931, 1160], "escap": [108, 109, 122], "doesn": [108, 122, 175, 279, 383, 705, 743, 816, 924, 1150, 1160], "complet": [108, 110, 122, 1141, 1160], "wherea": [108, 110, 122, 505, 506, 705, 748, 755, 816, 1027, 1028, 1160], "would": [108, 109, 122, 303, 445, 480, 488, 523, 635, 705, 835, 987, 1038, 1141, 1160], "prefer": [108, 109, 112, 122, 141, 163, 190, 196, 217, 218, 265, 279, 389, 480, 705, 816, 825, 931, 1018, 1160, 1168], "treat": [108, 109, 122, 329, 429, 450, 561, 563, 582, 583, 705, 970, 992, 1080, 1082, 1101, 1102, 1160], "10000": [108, 191, 279], "might": [108, 109, 122, 142, 150, 240, 244, 279, 293, 480, 620, 705, 722, 781, 786, 816, 1142, 1160], "issu": [108, 109, 113, 122, 333, 334, 610, 705, 868, 869, 1130, 1160], "iso8601": [108, 109, 122], "succe": [108, 109, 122], "cpu": [108, 109], "system": [108, 109], "wrongli": 108, "done": [108, 109, 122, 128, 144, 148, 151, 193, 279, 292, 294, 318, 512, 631, 705, 720, 724, 752, 816, 848, 1160], "buffer": [108, 109, 110, 161, 190, 279, 925, 1160], "modifi": [108, 109, 122, 142, 144, 163, 183, 190, 252, 279, 304, 370, 381, 561, 568, 569, 582, 705, 825, 910, 921, 931, 1080, 1087, 1088, 1101, 1120, 1122, 1123, 1160], "upper": [108, 109, 110, 161, 175, 178, 279, 323, 324, 410, 468, 621, 632, 649, 650, 652, 653, 664, 665, 692, 693, 705, 743, 746, 816, 859, 860, 925, 946, 1016, 1147, 1160], "bound": [108, 109, 161, 175, 178, 279, 323, 324, 325, 410, 445, 467, 468, 474, 621, 632, 649, 650, 652, 653, 664, 665, 692, 693, 705, 743, 746, 816, 859, 860, 861, 925, 946, 987, 1009, 1016, 1147, 1160], "lossi": [108, 109, 122], "decod": [108, 109], "expens": [108, 109, 120, 122, 126, 127, 139, 141, 175, 176, 178, 179, 190, 196, 216, 217, 218, 219, 245, 246, 279, 293, 480, 531, 705, 743, 744, 746, 747, 771, 787, 816, 825, 931, 1018, 1160, 1168], "aggreg": [108, 109, 120, 169, 174, 175, 177, 178, 197, 198, 199, 202, 204, 208, 209, 210, 216, 231, 232, 248, 251, 258, 259, 262, 264, 279, 287, 395, 407, 476, 478, 480, 512, 532, 533, 534, 535, 536, 537, 538, 540, 541, 542, 626, 627, 628, 629, 644, 645, 646, 647, 658, 663, 671, 672, 675, 676, 680, 688, 689, 705, 743, 744, 746, 747, 757, 758, 759, 760, 763, 764, 767, 771, 782, 783, 790, 797, 798, 801, 803, 816, 943, 1046, 1047, 1048, 1049, 1051, 1054, 1055, 1056, 1160], "nativ": [108, 110, 113, 114, 116, 120, 136, 190, 196, 218, 219, 237, 265, 279, 480, 670, 705, 711, 804, 1018, 1160, 1168], "parser": 108, "regard": [108, 641], "sens": [108, 114, 116, 120, 125, 201, 250, 279, 512, 705, 762, 816], "particular": [108, 114, 116, 120, 125, 161, 279, 925, 1160], "usernam": [108, 111, 114, 116, 120, 125], "password": [108, 111, 114, 116, 120, 125], "skip": [108, 109, 113, 120, 122, 127, 248, 279, 826, 1018, 1160], "offset": [108, 109, 113, 114, 116, 120, 122, 125, 126, 127, 175, 176, 178, 179, 216, 229, 250, 256, 279, 342, 350, 363, 364, 367, 371, 378, 462, 531, 555, 586, 705, 743, 744, 746, 747, 771, 780, 795, 816, 878, 886, 903, 904, 907, 911, 918, 1004, 1074, 1105, 1118, 1160], "row_count": [108, 109, 114, 116, 120, 122, 125, 126, 127], "sampl": [108, 109, 265, 279, 554, 705, 804, 1073, 1160], "estim": [108, 109, 148, 161, 279, 294, 387, 388, 426, 631, 705, 720, 816, 925, 927, 928, 969, 1160], "alloc": [108, 109, 161, 211, 279, 925, 1160], "encount": [108, 109, 122, 175, 178, 279, 505, 506, 571, 572, 641, 644, 658, 705, 743, 746, 816, 1027, 1028, 1090, 1091, 1160], "window": [108, 109, 122, 175, 176, 178, 179, 216, 279, 335, 371, 378, 386, 387, 388, 478, 480, 512, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 639, 682, 683, 705, 743, 744, 746, 747, 771, 816, 870, 911, 918, 926, 927, 928, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1160], "rn": [108, 109, 122], "go": [108, 109, 122, 566, 1085], "nodataerror": [108, 109, 113, 119, 122, 717], "lazili": [108, 109, 122, 123, 124, 125, 126, 127, 479, 705, 728, 816], "glob": [108, 109, 122, 125, 126, 127], "continu": [108, 120, 336, 520, 554, 705, 871, 1036, 1073, 1160], "benchmark": [108, 120], "50000": 109, "batchedcsvread": [109, 717], "upon": 109, "creation": 109, "gather": 109, "next_batch": 109, "big": 109, "interest": 109, "seen_group": 109, "big_fil": 109, "df_current_batch": 109, "partition_df": 109, "partition_bi": [109, 191, 279], "as_dict": [109, 206, 279], "fh": 109, "write_csv": [109, 122, 279], "els": [109, 695], "connectionorcursor": 110, "iter_batch": 110, "cursor": 110, "client": 110, "odbc": 110, "driver": [110, 111], "packag": [110, 113], "establish": 110, "resultset": 110, "manner": 110, "veri": [110, 190, 245, 279, 480, 705, 804], "poor": 110, "trip": 110, "still": [110, 111], "intern": [110, 129, 190, 279], "exact": [110, 136, 138, 140, 228, 279, 597, 598, 599, 618, 705, 1116, 1117, 1118], "incom": 110, "execute_opt": 110, "read_arrow_batches_from_odbc": 110, "read_database_uri": 110, "wide": [110, 173, 200, 248, 279, 761, 816], "snowflak": [110, 111], "variou": [110, 279, 705, 816, 819, 1160], "facil": 110, "initialis": [110, 144, 816, 1167], "flight": 110, "flightsql": 110, "flight_sql": 110, "about": [110, 554, 561, 568, 569, 582, 705, 1073, 1080, 1087, 1088, 1101, 1160, 1168], "notabl": 110, "dremio": 110, "influxdb": 110, "notic": [110, 279, 816, 1160], "dbapi2": 110, "connectorx": [110, 111, 130], "optimis": [110, 196, 219, 265, 279, 816, 1018, 1061, 1062, 1160, 1168], "translat": 110, "conn": 110, "url": [110, 127, 568, 570, 1087, 1089], "test_data": 110, "user_conn": 110, "normalised_scor": 110, "uint8": [110, 135, 137, 151, 239, 240, 248, 279, 333, 334, 479, 610, 625, 705, 724, 816, 819, 868, 869, 1130, 1160, 1168], "parameteris": 110, "metric": 110, "alchemy_conn": 110, "qmark": 110, "variad": 110, "1000": [110, 113, 161, 239, 279, 356, 357, 896, 1139, 1160, 1168], "localhost": 110, "5432": 110, "uid": 110, "usr": 110, "pwd": 110, "max_text_s": 110, "max_binary_s": 110, "do_someth": 110, "partition_on": 111, "partition_rang": 111, "partition_num": 111, "dbreadengin": 111, "raw": 111, "warehous": 111, "role": 111, "transfer": 111, "document": [111, 113, 374, 377, 572, 597, 598, 599, 602, 701, 853, 914, 917, 1091, 1116, 1117, 1118, 1121], "redshift": 111, "mysql": 111, "mariadb": 111, "clickhous": 111, "oracl": 111, "bigqueri": 111, "pleas": [111, 175, 279, 649, 654, 743, 816], "github": 111, "sfu": 111, "connector": 111, "destin": 111, "develop": [111, 138, 140], "read_databas": 111, "explicitli": [111, 136, 138, 144, 479, 687, 705, 716], "test_tabl": 111, "compani": 111, "testdb": 111, "public": [111, 279, 705, 717, 816, 1160], "myrol": 111, "delta_table_opt": [112, 123], "root": [112, 123, 321, 425, 477, 490, 499, 500, 501, 502, 503, 504, 518, 558, 609, 704, 705, 855, 1076, 1160], "absolut": [112, 123, 124, 131, 132, 133, 134, 285, 386, 387, 388, 705, 821, 926, 927, 928, 1160], "avoid": [112, 218, 279, 288, 705], "year": [112, 123, 175, 193, 216, 250, 279, 354, 355, 367, 368, 371, 378, 379, 531, 534, 535, 536, 537, 538, 540, 541, 542, 648, 649, 650, 651, 652, 653, 692, 693, 705, 743, 752, 771, 816, 890, 891, 907, 908, 911, 918, 919], "2021": [112, 123, 151, 156, 173, 175, 250, 279, 597, 667, 724, 743, 816, 819, 882, 883, 891, 915, 965, 1116, 1160], "aw": [112, 123, 127], "googl": [112, 123, 124], "service_account": [112, 123], "service_account_json_absolute_path": [112, 123], "az": [112, 123, 124], "adl": [112, 123, 124], "abf": [112, 123, 124], "azure_storage_account_nam": [112, 123, 124], "azure_storage_account_kei": [112, 123, 124], "without_fil": [112, 123, 124], "track": [112, 123, 124, 196, 279, 468, 1167], "sheet_id": [113, 119], "sheet_nam": [113, 119], "xlsx2csv": [113, 130], "openpyxl": [113, 130], "pyxlsb": [113, 130], "xlsx2csv_option": 113, "read_csv_opt": 113, "noreturn": [113, 119], "spreadsheet": [113, 119, 208, 279, 717], "xlsb": 113, "sheetnam": [113, 119], "nor": [113, 119, 220, 279], "fastest": 113, "read_csv": [113, 122], "refin": 113, "significantli": [113, 1168], "potenti": [113, 122, 125, 126, 127, 190, 217, 219, 279, 499], "unabl": 113, "julian": 113, "skip_empty_lin": 113, "influenc": [113, 736, 757, 816], "pipelin": 113, "correct": [113, 119, 387, 388, 426, 535, 536, 537, 538, 539, 540, 542, 554, 705, 756, 757, 816, 927, 928, 969, 1053, 1073, 1160], "known": [113, 138, 468, 799, 804, 1010], "better": [113, 196, 240, 265, 279, 480, 574, 705, 804, 1061, 1062, 1093, 1160], "detect": 113, "memory_map": [114, 120, 125], "v2": [114, 125], "greatli": [114, 125], "repeat": [114, 125, 524, 526, 678, 696, 705], "give": [114, 116, 120, 125, 126, 127, 200, 246, 279, 351, 426, 526, 618, 705, 717, 761, 787, 816, 887, 969, 1160], "That": [114, 756, 757, 816], "filenam": 114, "my_fil": 114, "write_ipc": [114, 279], "read_ndjson": 117, "openoffic": 119, "od": 119, "parallelstrategi": [120, 127], "use_statist": [120, 127], "stabl": [120, 150, 155, 220, 244, 279, 473, 705, 722, 761, 781, 786, 816], "row_group": [120, 127], "read_tabl": 120, "scan_parquet": [120, 128], "scan_pyarrow_dataset": [120, 127], "hive": [120, 127], "contribut": [120, 536, 538, 540, 542, 705], "with_column_nam": 122, "push": [122, 125, 126, 127, 128], "down": [122, 125, 126, 127, 128, 398, 705, 937, 1160], "therebi": [122, 125, 126, 127], "realloc": [122, 125, 126, 163, 279, 825, 931, 1160], "headerless": 122, "my_long_fil": 122, "thing": [122, 129, 657, 666], "less": [122, 193, 279, 428, 475, 589, 705, 752, 816, 1108, 1168], "breezah": 122, "languag": [122, 175, 193, 216, 250, 279, 367, 371, 378, 531, 534, 535, 536, 537, 538, 540, 541, 542, 649, 650, 652, 653, 692, 693, 705, 743, 752, 771, 816, 907, 911, 918], "hard": [122, 756, 757, 816], "mydf": 122, "lambda": [122, 147, 169, 196, 207, 208, 265, 279, 293, 386, 387, 388, 468, 476, 477, 478, 480, 500, 644, 645, 658, 669, 670, 680, 705, 756, 757, 765, 804, 816, 826, 926, 927, 928, 1010, 1018, 1160], "lower": [122, 175, 178, 210, 271, 279, 323, 325, 410, 474, 477, 500, 521, 525, 538, 632, 649, 650, 652, 653, 664, 665, 679, 692, 693, 705, 743, 746, 767, 810, 816, 859, 861, 946, 1016, 1037, 1040, 1052, 1147, 1160], "simpli": [122, 512, 644, 658, 705], "idx": [122, 175, 191, 279, 468, 743, 816, 1010, 1062, 1160], "uint16": [122, 333, 334, 610, 705, 819, 868, 869, 1130, 1160], "u16": [122, 138, 1168], "eu": [123, 124], "central": [123, 124, 426, 554, 705, 969, 1073, 1160], "iceberg": [124, 717], "pyiceberg": [124, 130], "metadata": [124, 175, 176, 178, 179, 216, 279, 531, 705, 743, 744, 746, 747, 771, 816], "secret": [124, 127], "adlf": 124, "my": [124, 128, 603, 1122], "gcp": [124, 127], "oauth": 124, "token": 124, "ya29": 124, "dr": 124, "afm": 124, "py": 124, "impl": 124, "fsspecfileio": 124, "hive_partit": 127, "retri": 127, "prune": [127, 757, 816], "read_parquet": 127, "east": 127, "allow_pyarrow_filt": 128, "comparison": 128, "dset": 128, "folder": 128, "05": [128, 131, 132, 133, 134, 138, 151, 193, 250, 279, 344, 345, 349, 370, 372, 374, 377, 649, 652, 724, 752, 816, 819, 880, 881, 882, 883, 885, 910, 911, 914, 915, 917, 918], "04": [128, 151, 175, 250, 279, 344, 345, 349, 353, 361, 363, 364, 370, 371, 373, 374, 377, 381, 597, 652, 654, 724, 743, 816, 819, 881, 885, 889, 895, 900, 901, 903, 904, 905, 910, 913, 914, 917, 921, 1116], "seed": [129, 180, 220, 279, 405, 456, 523, 544, 550, 705, 940, 998, 1038, 1058, 1069, 1160], "shuffl": [129, 220, 265, 279, 456, 544, 705, 804, 998, 1058, 1160], "stdout": [130, 144, 173, 279, 491], "platform": 130, "maco": 130, "13": [130, 138, 152, 153, 164, 165, 172, 184, 194, 203, 216, 254, 261, 262, 264, 266, 267, 268, 269, 270, 271, 272, 279, 288, 488, 490, 531, 600, 639, 644, 647, 658, 689, 694, 705, 725, 726, 737, 738, 754, 771, 792, 800, 801, 803, 805, 806, 807, 808, 809, 810, 811, 816, 911, 918, 919, 1018, 1119, 1160], "arm64": 130, "arm": 130, "64bit": [130, 525, 705, 1040, 1160], "main": [130, 728, 816], "aug": 130, "clang": 130, "14": [130, 138, 196, 261, 262, 264, 266, 267, 268, 269, 270, 271, 272, 279, 342, 409, 523, 692, 705, 800, 801, 803, 805, 806, 807, 808, 809, 810, 811, 819, 878, 911], "1403": 130, "adbc_driver_sqlit": 130, "cloudpickl": 130, "23": [130, 175, 216, 279, 344, 348, 352, 360, 368, 371, 380, 531, 534, 535, 537, 540, 541, 542, 651, 654, 691, 692, 693, 705, 743, 771, 816, 819, 880, 888, 1168], "matplotlib": [130, 766, 779, 816], "26": [130, 350, 379, 886], "pydant": 130, "21": [130, 201, 232, 279, 534, 535, 537, 540, 541, 542, 660, 705, 762, 816, 819], "check_row_ord": [131, 132], "check_column_ord": [131, 132], "check_dtyp": [131, 132, 133, 134], "check_exact": [131, 132, 133, 134], "rtol": [131, 132, 133, 134], "atol": [131, 132, 133, 134], "08": [131, 132, 133, 134, 138, 216, 279, 344, 371, 531, 597, 652, 654, 705, 771, 816, 819, 911, 918, 1116], "categorical_as_str": [131, 132, 133, 134], "nans_compare_equ": [131, 132, 133, 134], "assert": [131, 132, 133, 134, 136, 138, 140, 216, 279, 717, 819], "assertionerror": [131, 132, 133, 134], "compar": [131, 132, 133, 134, 170, 279, 384, 385, 402, 404, 428, 475, 507, 508, 705, 853, 1060, 1160], "unsort": [131, 132], "exactli": [131, 132, 133, 134, 137, 138, 140, 588, 589, 595, 596, 654, 1068, 1107, 1108, 1114, 1115, 1160], "toler": [131, 132, 133, 134, 193, 279, 752, 816], "inexact": [131, 132, 133, 134], "share": [131, 132, 133, 134, 161, 279, 705, 925, 1160], "assert_series_equ": [131, 134, 1168], "assert_frame_not_equ": [131, 134], "pytest": [131, 133], "worthwhil": [131, 133], "shorten": [131, 133], "traceback": [131, 132, 133, 134], "tb": [131, 133, 161, 279, 925, 1160], "short": [131, 133], "tend": [131, 133], "unhelpfulli": [131, 133], "assert_frame_equ": [132, 133, 1168], "assert_series_not_equ": [132, 133], "check_nam": [133, 134], "searchstrategi": [135, 137, 138, 140], "null_prob": [135, 138, 140], "percentag": [135, 138, 140, 513, 705, 1032, 1160], "chanc": [135, 138, 140, 1168], "independ": [135, 136, 138, 140], "flag": [135, 279, 546, 561, 568, 569, 582, 705, 734, 756, 757, 816, 1063, 1080, 1087, 1088, 1101, 1160], "hypothesi": [135, 136, 137, 138, 139, 140, 1168], "sampled_from": [135, 1168], "unique_small_int": 135, "ccy": [135, 1168], "gbp": [135, 1168], "eur": [135, 156, 173, 279, 1168], "jpy": [135, 1168], "min_col": [136, 138], "max_col": [136, 138], "standalon": [136, 138, 819], "mincol": 136, "assign": [136, 175, 279, 468, 512, 523, 588, 589, 705, 743, 816, 1010, 1017, 1038, 1107, 1108, 1160], "minimum": [136, 137, 138, 140, 169, 202, 279, 386, 387, 388, 494, 506, 515, 523, 675, 676, 705, 763, 816, 899, 926, 927, 928, 1028, 1034, 1038, 1160, 1168], "especi": [136, 530, 705, 736, 816, 1045, 1160], "test_unique_xyz": 136, "assert_someth": 136, "punctuat": 136, "test_special_char_colname_init": 136, "inner_dtyp": [137, 140], "select_from": [137, 140], "min_siz": [137, 138, 140, 1168], "max_siz": [137, 138, 140, 1168], "anoth": [137, 174, 279, 335, 343, 467, 484, 487, 705, 742, 794, 816, 870, 879, 931, 1009, 1060, 1160], "randomli": 137, "innermost": 137, "2x": 137, "lst": 137, "11330": 137, "24030": 137, "116": 137, "zz": [137, 140], "uint8_pair": [137, 1168], "uint": [137, 1168], "zip": [137, 1168], "131": 137, "176": 137, "149": [137, 1168], "max_data_s": [138, 140], "include_col": 138, "allow_infin": [138, 140], "allowed_dtyp": [138, 140, 1168], "excluded_dtyp": [138, 140], "describ": [138, 173, 279, 1160], "desir": [138, 468, 1010], "n_chunk": [138, 140, 279, 825, 931, 1160], "randomis": 138, "onto": 138, "pct": 138, "preced": [138, 819], "disallow": [138, 140], "inf": [138, 140, 300, 336, 412, 416, 520, 618, 705, 832, 865, 871, 942, 950, 955, 1016, 1032, 1036, 1147, 1160], "exclud": [138, 140, 175, 279, 331, 334, 410, 705, 743, 816, 946, 965, 1160], "usag": [138, 140, 228, 279, 819, 1068, 1160], "deploi": [138, 140], "characterist": [138, 140], "concret": [138, 140], "test_repr": 138, "isinst": [138, 140, 279], "0x11f561580": 138, "0565": 138, "34715": 138, "5844": 138, "33": [138, 201, 279, 543, 705, 762, 816, 1052, 1160], "076854": 138, "3382": 138, "17": [138, 258, 533, 543, 660, 681, 692, 705, 797, 863, 865, 911, 1047, 1160, 1168], "48662": 138, "7540": 138, "29": [138, 175, 193, 216, 250, 279, 342, 363, 367, 371, 378, 531, 534, 535, 536, 537, 538, 540, 541, 542, 649, 650, 652, 653, 692, 693, 705, 743, 752, 771, 816, 878, 903, 907, 911, 918], "836271": 138, "4063": 138, "06": [138, 151, 250, 279, 344, 362, 369, 370, 379, 724, 816, 819, 910, 911], "39092": 138, "1889": 138, "41": [138, 541, 705, 1168], "874455": 138, "15836": 138, "1755e": 138, "575050513": 138, "profil": [139, 141, 727, 816], "balanc": [139, 141, 1168], "set_environ": 139, "polars_hypothesis_profil": [139, 141], "1500": 139, "constructor": 140, "normal": [140, 175, 279, 383, 426, 554, 705, 743, 816, 924, 969, 1073, 1160], "test_repr_is_valid_str": 140, "experi": 140, "create_list_strategi": [140, 1168], "polars_max_thread": 142, "behind": 142, "lock": 142, "reason": [142, 478, 705], "temporarili": [142, 144, 175, 176, 178, 179, 216, 279, 531, 705, 743, 744, 746, 747, 771, 816], "pyspark": 142, "udf": [142, 147, 196, 207, 260, 265, 279, 293, 480, 516, 630, 670, 705, 765, 799, 804, 816, 826, 1018, 1160], "recommend": [142, 190, 207, 279, 819], "easi": [144, 1168], "restor": 144, "restore_default": 144, "relat": [144, 819], "set_tbl_row": 144, "initi": [144, 644, 658, 695], "whatev": 144, "were": [144, 701], "enter": 144, "advantag": [144, 207, 279], "set_": 144, "set_verbos": 144, "do_various_th": 144, "cleaner": 144, "breviti": 144, "vein": 144, "durat": [144, 193, 250, 279, 342, 349, 350, 353, 357, 359, 361, 366, 373, 381, 616, 649, 650, 652, 653, 692, 693, 705, 752, 816, 819, 878, 885, 886, 889, 896, 898, 901, 906, 913, 918, 921, 1143, 1160], "set_ascii_t": 144, "write_ascii_frame_to_stdout": 144, "sy": 144, "nan_as_nul": 146, "polarsdatafram": 146, "notimplementederror": 146, "num_row": 146, "get_column": [146, 242, 279], "dtypekind": 146, "inference_s": [147, 196, 279], "256": [147, 196, 279, 1032, 1160], "map_row": [147, 279], "tri": [147, 196, 279], "approxim": [148, 149, 279, 294, 631, 705, 720, 721, 816, 1168], "hyperloglog": [148, 279, 294, 631, 705, 720, 816], "algorithm": [148, 279, 294, 631, 705, 720, 816], "cardin": [148, 279, 294, 631, 705, 720, 816], "approx_n_uniqu": [149, 279, 705, 721, 816], "k": [150, 219, 244, 279, 316, 320, 426, 617, 705, 722, 786, 816, 847, 852, 969, 1144, 1160], "intoexpr": [150, 174, 175, 176, 177, 178, 179, 216, 222, 223, 226, 230, 244, 254, 255, 258, 279, 292, 311, 314, 315, 410, 437, 438, 440, 447, 448, 457, 458, 459, 460, 465, 469, 512, 545, 547, 548, 557, 587, 588, 589, 595, 596, 627, 629, 635, 638, 639, 640, 644, 647, 651, 658, 672, 676, 681, 684, 687, 689, 695, 705, 722, 742, 743, 744, 745, 746, 747, 771, 773, 774, 777, 781, 786, 792, 793, 797, 816, 842, 845, 846, 946, 990, 1065, 1106, 1107, 1108, 1114, 1115, 1160], "nulls_last": [150, 230, 244, 279, 303, 556, 705, 722, 781, 786, 816, 835, 1160], "smallest": [150, 244, 279, 316, 705, 722, 786, 816, 847, 1160], "largest": [150, 175, 193, 216, 244, 250, 279, 367, 371, 378, 531, 534, 535, 536, 537, 538, 540, 541, 542, 617, 649, 650, 652, 653, 692, 693, 705, 722, 743, 752, 771, 786, 816, 907, 911, 918, 1144, 1160], "wors": [150, 244, 279, 722, 781, 786, 816], "search": [150, 193, 244, 279, 722, 752, 781, 786, 816], "top_k": [150, 279, 316, 705, 722, 816, 847, 1160], "columnnameorselector": [151, 157, 159, 200, 206, 208, 219, 238, 246, 247, 248, 279, 724, 731, 732, 761, 787, 788, 816], "strict": [151, 279, 312, 318, 561, 564, 581, 597, 598, 599, 602, 705, 724, 816, 843, 848, 1060, 1080, 1083, 1100, 1116, 1117, 1118, 1121, 1160], "due": [151, 175, 193, 216, 219, 250, 279, 288, 318, 350, 367, 371, 378, 425, 499, 501, 502, 503, 504, 518, 531, 534, 535, 536, 537, 538, 540, 541, 542, 609, 649, 650, 652, 653, 692, 693, 705, 724, 743, 752, 771, 816, 848, 886, 907, 911, 918, 1160], "overflow": [151, 279, 318, 333, 334, 581, 610, 705, 724, 816, 848, 868, 869, 1100, 1130, 1160], "2020": [151, 156, 173, 216, 279, 345, 349, 350, 353, 356, 357, 359, 361, 366, 370, 373, 374, 377, 378, 531, 597, 598, 599, 705, 724, 771, 816, 819, 881, 885, 886, 889, 896, 898, 901, 906, 910, 913, 914, 917, 918, 1116, 1117, 1118], "u8": [151, 238, 239, 248, 279, 479, 625, 705, 724, 816, 819, 1137, 1160, 1168], "to_dict": [151, 279, 724, 816], "tempor": [151, 175, 176, 178, 179, 190, 216, 218, 219, 237, 279, 323, 410, 531, 534, 535, 536, 537, 538, 540, 541, 542, 705, 717, 724, 743, 744, 746, 747, 771, 816, 819, 859, 946, 965, 1160], "greater": [152, 193, 279, 402, 404, 554, 579, 580, 589, 605, 705, 752, 816, 1073, 1098, 1099, 1108, 1124, 1160], "cheap": [152, 153, 223, 255, 279, 725, 726, 774, 793, 816, 825, 858, 862, 1160], "deepcopi": [152, 279, 725, 816, 858, 1160], "appl": [154, 183, 192, 212, 214, 236, 261, 262, 264, 266, 267, 268, 269, 270, 271, 272, 279, 528, 566, 590, 705, 751, 769, 800, 801, 803, 805, 806, 807, 808, 809, 810, 811, 816, 1085, 1109], "banana": [154, 236, 261, 262, 264, 266, 267, 268, 269, 270, 271, 272, 279, 528, 566, 590, 705, 800, 801, 803, 805, 806, 807, 808, 809, 810, 811], "orang": [154, 261, 262, 264, 266, 267, 269, 271, 272, 279, 800, 801, 803, 805, 806, 808, 810, 811], "pairwis": [155, 279], "pearson": [155, 279, 426, 554, 641, 705, 969, 1073, 1160], "correl": [155, 279, 641, 682], "coeffici": [155, 279, 554, 705, 1073, 1160], "corrcoef": [155, 279], "percentil": [156, 279, 872, 1160], "summari": [156, 279, 872, 1160], "glimps": [156, 181, 279], "median": [156, 208, 279, 394, 536, 705, 794, 816, 872, 1050, 1160], "usd": [156, 173, 279, 1168], "null_count": [156, 159, 279, 335, 705, 816, 870, 872, 939, 1160], "266667": [156, 279], "666667": [156, 185, 198, 251, 267, 279, 386, 705, 750, 790, 806, 816, 926, 1160], "std": [156, 279, 540, 705, 816, 872, 1054, 1160], "101514": [156, 279], "707107": [156, 279, 387, 540, 705, 927, 1160], "57735": [156, 279], "more_column": [157, 162, 224, 247, 279, 389, 656, 705, 731, 735, 776, 788, 816], "subset": [159, 204, 246, 279, 732, 787, 816], "preserv": [159, 166, 174, 177, 192, 196, 240, 241, 279, 340, 341, 395, 441, 551, 705, 732, 739, 751, 816, 875, 876, 935, 983, 1070, 1142, 1160], "behavior": [159, 279, 467, 732, 816, 825, 871, 1009, 1036, 1160], "all_horizont": [159, 279, 626, 732, 816], "is_nul": [159, 279, 705, 732, 816, 1160], "sizeunit": [161, 279, 925, 1160], "heap": [161, 279, 925, 1160], "its": [161, 279, 344, 371, 378, 557, 695, 705, 853, 880, 911, 918, 925, 1160], "bitmap": [161, 279, 925, 1160], "structarrai": [161, 279, 925, 1160], "constant": [161, 216, 279, 342, 392, 705, 771, 816, 878, 925, 932, 1160], "unchang": [161, 279, 616, 705, 756, 757, 799, 804, 816, 925, 1143, 1160], "capac": [161, 228, 279, 925, 1068, 1160], "ffi": [161, 279, 925, 1160], "kb": [161, 279, 925, 1160], "mb": [161, 279, 925, 1160], "gb": [161, 279, 925, 1160], "revers": [161, 279, 330, 331, 332, 333, 334, 477, 500, 501, 502, 518, 609, 705, 816, 866, 867, 868, 869, 1160], "1_000_000": [161, 279, 925, 1160], "25888898": [161, 279], "689577102661133": [161, 279], "long": [162, 200, 248, 279, 735, 761, 816], "letter": [162, 263, 273, 279, 389, 569, 656, 705, 735, 802, 812, 816, 819, 1088], "onlin": [163, 279, 825, 931, 1160], "rerun": [163, 279, 825, 931, 1160], "conveni": [163, 279, 825, 931, 1160], "Not": [164, 279, 419, 421, 479, 705, 737, 816], "fillnullstrategi": [165, 279, 394, 705, 738, 816, 934, 1160], "matches_supertyp": [165, 279, 738, 816], "forward": [165, 193, 226, 279, 363, 394, 400, 461, 547, 705, 738, 752, 777, 816, 903, 934, 1003, 1065, 1160], "consecut": [165, 279, 310, 394, 400, 560, 705, 738, 816, 934, 1079, 1160], "fill_nan": [165, 279, 705, 816, 1160], "intoexprcolumn": [166, 279, 316, 323, 324, 325, 456, 461, 513, 544, 547, 592, 593, 594, 617, 632, 649, 650, 652, 653, 664, 665, 692, 693, 705, 739, 777, 816, 847, 859, 860, 861, 998, 1003, 1032, 1111, 1112, 1113, 1144, 1160], "constraint": [166, 279, 425, 499, 501, 502, 503, 504, 518, 609, 705, 739, 816], "is_in": [166, 279, 705, 1160], "reduct": [169, 279], "supercast": [169, 279], "parent": [169, 279], "rule": [169, 279], "arithmet": [169, 279], "zip_with": [169, 279, 1160], "foo11": [169, 279], "bar22": [169, 279], "null_equ": [170, 279, 1060, 1160], "retriev": [171, 279, 433, 434, 606, 975, 976, 1125], "max_items_per_column": [173, 279], "max_colname_length": [173, 279], "return_as_str": [173, 279, 491], "preview": [173, 279], "cleanli": [173, 279], "few": [173, 279], "exce": [173, 279], "trail": [173, 279, 585, 591, 592, 593, 1104, 1110, 1111, 1112], "ellipsi": [173, 279], "head": [173, 195, 233, 279, 292, 430, 705, 755, 816, 971, 1131, 1160], "tail": [173, 181, 279, 292, 554, 705, 816, 941, 1073, 1160], "more_bi": [174, 177, 206, 230, 279, 557, 705, 742, 745, 781, 816], "groupbi": [174, 208, 279, 293, 480, 630, 670, 705, 816], "consist": [174, 177, 206, 279, 597, 742, 745, 816, 825, 931, 1116, 1160], "regardless": [174, 177, 279, 572, 695, 1091], "agg": [174, 175, 178, 208, 216, 279, 287, 395, 397, 403, 480, 556, 557, 612, 624, 642, 670, 705, 727, 728, 734, 736, 742, 743, 744, 746, 747, 766, 771, 775, 779, 816, 819], "Or": [174, 175, 193, 216, 230, 250, 258, 279, 512, 531, 557, 649, 650, 652, 653, 692, 693, 695, 705, 742, 743, 752, 771, 781, 797, 816], "index_column": [175, 176, 178, 179, 216, 279, 531, 705, 743, 744, 746, 747, 771, 816], "timedelta": [175, 176, 178, 179, 193, 216, 250, 279, 348, 367, 368, 371, 378, 380, 531, 534, 535, 536, 537, 538, 540, 541, 542, 649, 650, 652, 653, 692, 693, 705, 743, 744, 746, 747, 752, 771, 816, 819, 892, 894, 899, 907, 911, 918, 1027, 1028, 1160], "period": [175, 176, 178, 179, 216, 279, 371, 378, 386, 387, 388, 513, 531, 649, 650, 652, 653, 692, 693, 705, 743, 744, 746, 747, 771, 816, 911, 918, 926, 927, 928, 1032, 1160], "include_boundari": [175, 178, 279, 743, 746, 816], "closedinterv": [175, 176, 178, 179, 216, 279, 410, 531, 534, 535, 536, 537, 538, 540, 541, 542, 649, 650, 652, 653, 692, 693, 705, 743, 744, 746, 747, 771, 816, 946, 1160], "label": [175, 279, 336, 520, 532, 533, 534, 535, 536, 537, 538, 540, 541, 542, 705, 743, 766, 816, 871, 1036, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1054, 1055, 1056, 1160], "start_bi": [175, 178, 279, 743, 746, 816], "startbi": [175, 178, 279, 743, 746, 816], "check_sort": [175, 176, 178, 179, 216, 279, 531, 705, 743, 744, 746, 747, 771, 816], "dynamicgroupbi": [175, 178, 279], "member": [175, 279, 743, 816, 954, 1160], "look": [175, 279, 311, 468, 478, 705, 743, 816, 842], "descript": [175, 279, 743, 816], "ascend": [175, 176, 178, 179, 216, 279, 531, 535, 536, 537, 538, 540, 542, 705, 743, 744, 746, 747, 771, 816], "dynam": [175, 178, 279, 468, 534, 535, 536, 537, 538, 540, 541, 542, 705, 743, 746, 816, 1010], "matter": [175, 176, 178, 179, 190, 216, 218, 219, 237, 279, 531, 705, 743, 744, 746, 747, 771, 816], "interv": [175, 176, 178, 179, 216, 250, 279, 336, 371, 378, 410, 520, 531, 534, 535, 536, 537, 538, 540, 541, 542, 649, 650, 652, 653, 692, 693, 705, 743, 744, 746, 747, 771, 816, 871, 884, 887, 888, 895, 897, 900, 902, 905, 908, 909, 911, 916, 918, 919, 946, 1036, 1160], "_lower_bound": [175, 178, 279, 743, 746, 816], "_upper_bound": [175, 178, 279, 743, 746, 816], "harder": [175, 178, 279, 743, 746, 816], "inclus": [175, 176, 178, 179, 216, 279, 410, 531, 534, 535, 536, 537, 538, 540, 541, 542, 587, 588, 632, 649, 650, 652, 653, 664, 665, 692, 693, 705, 743, 744, 746, 747, 771, 816, 946, 1106, 1107, 1160], "datapoint": [175, 178, 279, 743, 746, 816], "boundari": [175, 279, 323, 324, 325, 378, 705, 743, 816, 859, 860, 861, 918, 942, 1160], "mondai": [175, 178, 279, 378, 380, 743, 746, 816, 918, 920], "tuesdai": [175, 178, 279, 743, 746, 816], "wednesdai": [175, 178, 279, 743, 746, 816], "thursdai": [175, 178, 279, 743, 746, 816], "fridai": [175, 178, 279, 743, 746, 816], "saturdai": [175, 178, 279, 743, 746, 816], "sundai": [175, 178, 279, 380, 743, 746, 816, 920], "earliest": [175, 178, 279, 370, 371, 378, 597, 599, 651, 743, 746, 816, 910, 911, 918, 1116, 1118], "weekli": [175, 178, 279, 378, 743, 746, 816, 918], "week": [175, 178, 193, 216, 250, 279, 367, 371, 378, 380, 531, 534, 535, 536, 537, 538, 540, 541, 542, 649, 650, 652, 653, 654, 692, 693, 705, 743, 746, 752, 771, 816, 819, 907, 911, 918, 920], "sorted": [175, 176, 178, 179, 216, 279, 531, 705, 743, 744, 746, 747, 771, 816], "verifi": [175, 176, 178, 179, 216, 279, 531, 705, 743, 744, 746, 747, 771, 816], "incorrectli": [175, 176, 178, 179, 216, 279, 468, 531, 705, 743, 744, 746, 747, 771, 816], "incorrect": [175, 176, 178, 179, 216, 279, 381, 531, 546, 705, 743, 744, 746, 747, 771, 799, 804, 816, 921, 1063, 1160], "roll": [175, 176, 179, 279, 363, 364, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 639, 682, 683, 705, 743, 744, 747, 816, 903, 904, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1160], "re": [175, 240, 279, 363, 364, 743, 816, 903, 904, 1167], "come": [175, 279, 363, 364, 426, 705, 718, 743, 815, 816, 903, 904, 969, 1160], "1d": [175, 193, 216, 250, 279, 343, 353, 361, 367, 371, 378, 381, 531, 534, 535, 536, 537, 538, 540, 541, 542, 649, 650, 652, 653, 654, 667, 692, 693, 705, 743, 752, 771, 816, 819, 879, 887, 889, 894, 901, 907, 911, 916, 918], "set_index": [175, 279, 743, 816], "resampl": [175, 279, 743, 816], "reset_index": [175, 279, 743, 816], "though": [175, 279, 701, 743, 816], "unlik": [175, 279, 743, 816], "evenli": [175, 279, 743, 816], "upsampl": [175, 279, 743, 816], "1n": [175, 193, 216, 250, 279, 367, 371, 378, 531, 534, 535, 536, 537, 538, 540, 541, 542, 649, 650, 652, 653, 692, 693, 705, 743, 752, 771, 816, 907, 911, 918], "1u": [175, 193, 216, 250, 279, 367, 371, 378, 531, 534, 535, 536, 537, 538, 540, 541, 542, 649, 650, 652, 653, 692, 693, 705, 743, 752, 771, 816, 907, 911, 918], "microsecond": [175, 190, 193, 216, 218, 219, 237, 250, 279, 367, 371, 378, 531, 534, 535, 536, 537, 538, 540, 541, 542, 649, 650, 651, 652, 653, 654, 691, 692, 693, 705, 743, 752, 766, 771, 816, 819, 907, 911, 918], "1m": [175, 193, 216, 250, 279, 356, 357, 359, 366, 367, 371, 373, 378, 531, 534, 535, 536, 537, 538, 540, 541, 542, 649, 650, 652, 653, 692, 693, 705, 743, 752, 771, 816, 896, 898, 906, 907, 911, 913, 918], "minut": [175, 193, 216, 250, 279, 367, 371, 378, 531, 534, 535, 536, 537, 538, 540, 541, 542, 649, 650, 651, 652, 653, 654, 691, 692, 693, 705, 743, 752, 771, 816, 819, 907, 911, 918], "1h": [175, 193, 216, 250, 279, 350, 367, 371, 378, 531, 534, 535, 536, 537, 538, 540, 541, 542, 649, 650, 652, 653, 692, 693, 705, 743, 752, 771, 816, 886, 888, 907, 911, 918], "hour": [175, 193, 216, 250, 279, 367, 371, 378, 531, 534, 535, 536, 537, 538, 540, 541, 542, 649, 650, 651, 652, 653, 654, 691, 692, 693, 705, 743, 752, 771, 816, 819, 907, 911, 918], "1w": [175, 193, 216, 250, 279, 367, 371, 378, 531, 534, 535, 536, 537, 538, 540, 541, 542, 649, 650, 652, 653, 692, 693, 705, 743, 752, 771, 816, 907, 911, 918], "1mo": [175, 193, 216, 250, 279, 345, 349, 363, 364, 367, 370, 371, 378, 531, 534, 535, 536, 537, 538, 540, 541, 542, 649, 650, 652, 653, 692, 693, 705, 743, 752, 771, 816, 881, 885, 902, 903, 904, 907, 908, 909, 910, 911, 918, 919], "month": [175, 193, 216, 250, 279, 348, 363, 364, 367, 371, 378, 531, 534, 535, 536, 537, 538, 540, 541, 542, 648, 649, 650, 651, 652, 653, 654, 692, 693, 705, 743, 752, 771, 816, 884, 903, 904, 907, 911, 918], "1q": [175, 193, 216, 250, 279, 367, 371, 378, 531, 534, 535, 536, 537, 538, 540, 541, 542, 649, 650, 652, 653, 692, 693, 705, 743, 752, 771, 816, 907, 911, 918], "quarter": [175, 193, 216, 250, 279, 367, 371, 378, 531, 534, 535, 536, 537, 538, 540, 541, 542, 649, 650, 652, 653, 692, 693, 705, 743, 752, 771, 816, 907, 911, 918], "1y": [175, 193, 216, 250, 279, 367, 371, 378, 531, 534, 535, 536, 537, 538, 540, 541, 542, 649, 650, 652, 653, 692, 693, 705, 743, 752, 771, 816, 907, 911, 918], "1i": [175, 193, 216, 250, 279, 367, 531, 534, 535, 536, 537, 538, 540, 541, 542, 705, 743, 752, 771, 816, 907], "3d12h4m25": [175, 193, 216, 250, 279, 371, 378, 531, 649, 650, 652, 653, 692, 693, 705, 743, 752, 771, 816, 911, 918], "suffix": [175, 192, 193, 216, 222, 250, 254, 258, 279, 288, 314, 367, 371, 378, 419, 421, 422, 423, 477, 500, 501, 503, 504, 512, 518, 528, 531, 534, 535, 536, 537, 538, 540, 541, 542, 566, 596, 649, 650, 652, 653, 692, 693, 705, 743, 751, 752, 771, 773, 792, 794, 797, 816, 819, 845, 907, 911, 918, 1085, 1115], "_satur": [175, 193, 216, 250, 279, 367, 371, 378, 531, 534, 535, 536, 537, 538, 540, 541, 542, 649, 650, 652, 653, 692, 693, 705, 743, 752, 771, 816, 907, 911, 918], "satur": [175, 193, 216, 250, 279, 367, 371, 378, 531, 534, 535, 536, 537, 538, 540, 541, 542, 649, 650, 652, 653, 692, 693, 705, 743, 752, 771, 816, 907, 911, 918], "28": [175, 193, 216, 236, 250, 279, 286, 367, 370, 371, 378, 381, 531, 534, 535, 536, 537, 538, 540, 541, 542, 649, 650, 652, 653, 692, 693, 705, 743, 752, 771, 816, 907, 910, 911, 918, 921, 1168], "correspond": [175, 193, 216, 240, 250, 279, 355, 367, 371, 378, 480, 523, 530, 531, 534, 535, 536, 537, 538, 540, 541, 542, 649, 650, 652, 653, 692, 693, 705, 727, 743, 752, 771, 816, 891, 907, 911, 918, 1038, 1045, 1160], "daylight": [175, 193, 216, 250, 279, 342, 350, 367, 371, 378, 531, 534, 535, 536, 537, 538, 540, 541, 542, 649, 650, 652, 653, 654, 692, 693, 705, 743, 752, 771, 816, 886, 907, 911, 918], "10i": [175, 216, 279, 531, 705, 743, 771, 816], "datetime_rang": [175, 279, 343, 345, 349, 353, 356, 357, 359, 361, 363, 364, 366, 367, 370, 371, 373, 378, 381, 534, 535, 537, 540, 541, 542, 649, 705, 743, 816, 878, 879, 881, 885, 886, 887, 888, 889, 894, 895, 896, 897, 898, 900, 901, 903, 904, 905, 906, 907, 910, 911, 913, 916, 918], "30m": [175, 279, 371, 378, 743, 816, 911, 918], "_lower_boundari": [175, 279, 743, 816], "_upper_boundari": [175, 279, 743, 816], "lower_bound": [175, 279, 323, 325, 410, 705, 743, 816, 859, 861, 946, 1147, 1160], "upper_bound": [175, 279, 323, 324, 410, 468, 705, 743, 816, 859, 860, 946, 1016, 1160], "bys": [175, 279, 743, 816], "int_rang": [175, 248, 265, 279, 632, 743, 757, 804, 816], "2i": [175, 279, 743, 816], "3i": [175, 279, 743, 816], "a_agg_list": [175, 279, 743, 816], "rollinggroupbi": [176, 179, 216, 279], "group_bi": [177, 204, 208, 278, 279, 287, 395, 397, 403, 478, 480, 556, 557, 612, 624, 642, 670, 705, 727, 728, 734, 736, 745, 766, 779, 815, 816, 819], "group_by_dynam": [178, 216, 279, 746, 771, 816], "seed_1": [180, 279, 405, 705, 940, 1160], "seed_2": [180, 279, 405, 705, 940, 1160], "seed_3": [180, 279, 405, 705, 940, 1160], "hash": [180, 279, 705, 1160], "u64": [180, 279, 405, 525, 705, 766, 816, 940, 1160], "10783150408545073287": [180, 279], "1438741209321515184": [180, 279], "10047419486152048166": [180, 279], "2047317070637311557": [180, 279], "ab": [181, 195, 233, 254, 279, 606, 607, 705, 792, 816, 941, 971, 1131, 1160], "grown": [183, 279], "intermedi": [185, 279, 750, 816, 1168], "linear": [185, 210, 271, 279, 409, 435, 483, 521, 538, 639, 640, 679, 705, 750, 767, 810, 816, 945, 977, 1037, 1052, 1160], "333333": [185, 279, 425, 499, 705, 750, 816, 1032, 1056, 1160], "mask": [186, 188, 279, 312, 411, 413, 414, 417, 418, 424, 514, 515, 561, 564, 705, 843, 935, 939, 946, 948, 951, 952, 957, 958, 966, 1033, 1034, 1061, 1080, 1083, 1151, 1160], "visual": [186, 188, 279], "scalar": [189, 196, 217, 279, 545, 630, 667, 670, 705, 968, 1059, 1160], "With": [189, 226, 279, 461, 534, 535, 536, 537, 538, 540, 541, 542, 547, 705, 777, 816, 968, 1003, 1065, 1160], "buffer_s": [190, 279], "fit": [190, 228, 248, 279, 549, 681, 705, 1067, 1068, 1160], "signific": [190, 196, 279, 293, 480, 705, 1018, 1160], "4x": [190, 279], "materialis": [190, 191, 217, 218, 219, 279], "rows_by_kei": [190, 218, 279], "awar": [190, 218, 219, 237, 279, 736, 816, 1118], "iter_row": [191, 217, 218, 219, 279], "17_500": [191, 279], "klmnoopqrstuvwxyz": [191, 279], "__name__": [191, 279], "7500": [191, 279], "15_000": [191, 279], "record_batch": [191, 279], "to_arrow": [191, 279, 1160], "to_batch": [191, 279], "date32": [191, 279], "large_str": [191, 235, 241, 279], "15000": [191, 279], "2500": [191, 279], "left_on": [192, 193, 249, 279, 751, 752, 789, 816], "right_on": [192, 193, 249, 279, 751, 752, 789, 816], "_right": [192, 193, 279, 751, 752, 816], "joinvalid": [192, 279, 751, 816], "semi": [192, 279, 751, 816], "anti": [192, 279, 751, 804, 816, 1061, 1062, 1160], "cross": [192, 279, 378, 751, 816, 918], "many_to_mani": [192, 279, 751, 816], "one_to_on": [192, 279, 751, 816], "one_to_mani": [192, 279, 751, 816], "many_to_on": [192, 279, 751, 816], "join_asof": [192, 279, 751, 816], "other_df": [192, 279], "by_left": [193, 279, 752, 816], "by_right": [193, 279, 752, 816], "asofjoinstrategi": [193, 279, 752, 816], "allow_parallel": [193, 279, 751, 752, 816], "force_parallel": [193, 279, 751, 752, 816], "asof": [193, 279, 752, 816], "rather": [193, 279, 491, 520, 530, 605, 705, 752, 816, 1036, 1045, 1124, 1160], "asof_join": [193, 279], "distanc": [193, 279, 752, 816, 942, 1160], "plan": [193, 194, 279, 723, 727, 730, 734, 741, 751, 752, 768, 775, 779, 796, 816], "forc": [193, 196, 265, 279, 751, 752, 804, 816, 1018, 1160], "gdp": [193, 279, 752, 816], "2016": [193, 279, 752, 816], "2017": [193, 279, 752, 816], "2018": [193, 279, 370, 752, 816, 910], "2019": [193, 279, 752, 816], "jan": [193, 279, 752, 816], "1st": [193, 279, 752, 816], "4164": [193, 279, 752, 816], "4411": [193, 279, 752, 816], "4566": [193, 279, 752, 816], "4696": [193, 279, 752, 816], "set_sort": [193, 216, 250, 279, 531, 705, 752, 771, 816, 1160], "popul": [193, 279, 752, 816], "12th": [193, 279, 752, 816], "82": [193, 279, 752, 816], "66": [193, 249, 279, 541, 625, 705, 752, 789, 816, 1052, 1160], "83": [193, 279, 752, 816], "52": [193, 254, 279, 379, 543, 705, 752, 792, 816], "request": [194, 279], "describe_plan": [194, 279], "unoptim": [194, 279], "describe_optimized_plan": [194, 279], "show_graph": [194, 279, 816], "un": [194, 279], "graphviz": [194, 279, 779, 816], "much": [196, 248, 265, 279, 335, 467, 480, 573, 574, 670, 705, 804, 870, 1009, 1018, 1092, 1093, 1160], "_significantly_": [196, 265, 279, 1018, 1160], "intens": [196, 265, 279, 512, 705, 1018, 1160], "materi": [196, 265, 279, 727, 766, 804, 816, 819, 1018, 1160], "parallelis": [196, 265, 279, 1018, 1160], "achiev": [196, 265, 279, 480, 574, 705, 871, 1018, 1036, 1093, 1160], "best": [196, 265, 279, 480, 705, 1018, 1160], "black": [196, 279, 311, 313, 314, 315], "arbitrarili": [196, 279], "rearrang": [196, 279], "transform": [196, 279, 478, 601, 603, 604, 705], "lru_cach": [196, 279, 480, 705, 1018, 1160], "column_1": [196, 245, 279], "axi": [197, 198, 200, 202, 232, 279, 633, 634, 761, 816], "null_strategi": [198, 232, 279], "nullstrategi": [198, 232, 279], "propag": [198, 232, 279, 385, 505, 506, 508, 705, 1027, 1028, 1160], "spam": [198, 279, 569, 1088], "id_var": [200, 279, 761, 816], "value_var": [200, 279, 761, 816], "variable_nam": [200, 279, 761, 816], "value_nam": [200, 279, 761, 816], "unpivot": [200, 279, 761, 816], "massag": [200, 279, 761, 816], "measur": [200, 279, 761, 816], "merg": [201, 279, 762, 816], "caller": [201, 279, 468, 757, 762, 799, 804, 816], "respons": [201, 279, 762, 816], "steve": [201, 279, 762, 816], "elis": [201, 279, 762, 816], "bob": [201, 279, 762, 816], "ag": [201, 279, 762, 816], "44": [201, 279, 339, 705, 762, 816], "anna": [201, 279, 762, 816], "megan": [201, 279, 762, 816], "thoma": [201, 279, 762, 816], "what": [204, 279, 1141, 1150, 1160], "pack": [204, 279], "expr_unique_subset": [204, 279], "df_nuniqu": [204, 279], "df_agg_nuniqu": [204, 279], "include_kei": [206, 219, 279], "offer": [207, 279, 516, 705, 765, 816], "fulli": [207, 220, 279], "cast_str_to_int": [207, 279, 765, 816], "col_nam": [207, 279, 765, 816], "tdf": [207, 279, 765, 816], "aggregate_funct": [208, 279], "pivotagg": [208, 279], "sort_column": [208, 279], "section": [208, 279, 561, 568, 569, 582, 649, 650, 652, 653, 692, 693, 1080, 1087, 1088, 1101], "predefin": [208, 279], "predict": [208, 211, 250, 279], "transpos": [208, 279], "discoveri": [208, 279], "col1": [208, 245, 279, 816, 1168], "col2": [208, 245, 279, 816, 1168], "col3": [208, 279, 1168], "tanh": [208, 279, 705, 1160], "998347": [208, 279], "964028": [208, 279], "999954": [208, 279], "unique_column_valu": [208, 279], "interpol": [210, 271, 279, 394, 483, 521, 538, 679, 705, 767, 810, 816, 1037, 1052, 1160], "rollinginterpolationmethod": [210, 271, 279, 521, 538, 679, 705, 767, 810, 816, 1037, 1052, 1160], "midpoint": [210, 271, 279, 521, 538, 679, 705, 767, 810, 816, 1037, 1052, 1160], "t_0": [216, 279, 531, 534, 535, 536, 537, 538, 540, 541, 542, 705, 771, 816], "t_1": [216, 279, 531, 534, 535, 536, 537, 538, 540, 541, 542, 705, 771, 816], "t_n": [216, 279, 531, 534, 535, 536, 537, 538, 540, 541, 542, 705, 771, 816], "43": [216, 279, 334, 531, 541, 705, 771, 816], "strptime": [216, 279, 370, 531, 705, 771, 816, 910], "2d": [216, 240, 279, 367, 531, 667, 705, 771, 816, 878, 884], "sum_a": [216, 279, 531, 705, 771, 816], "min_a": [216, 279, 531, 705, 771, 816], "max_a": [216, 279, 531, 705, 771, 816], "by_pred": [217, 279], "accord": [217, 279, 479, 520, 649, 650, 652, 653, 692, 693, 705, 891, 1036, 1160], "mutual": [217, 279], "exclus": [217, 279, 625, 632, 664, 665, 705], "clariti": [217, 279], "toomanyrowsreturnederror": [217, 279, 717], "norowsreturnederror": [217, 279, 717], "inherit": [217, 279], "rowserror": [217, 279, 717], "high": [219, 279, 520, 705, 1036, 1160], "cost": [219, 279], "reoconstruct": [219, 279], "defaultdict": [219, 279], "assum": [219, 279, 756, 757, 799, 804, 816], "with_replac": [220, 279, 456, 544, 705, 998, 1058, 1160], "ordereddict": [221, 279, 687, 772, 816], "named_expr": [222, 223, 254, 255, 279, 684, 687, 773, 774, 792, 793, 816], "threshold": [222, 279, 773, 816], "set_auto_structifi": [222, 254, 279, 773, 792, 816], "auto_structifi": [222, 254, 279, 773, 792, 816], "is_odd": [222, 279, 773, 816], "_is_odd": [222, 279, 773, 816], "sequenti": [223, 255, 279, 774, 793, 816], "fill_valu": [226, 227, 248, 279, 547, 548, 705, 777, 778, 816, 1065, 1066, 1160], "opposit": [226, 279, 461, 547, 705, 777, 816, 1003, 1065, 1160], "lag": [226, 279, 461, 547, 639, 705, 777, 816, 1003, 1065, 1160], "shift": [227, 279, 338, 439, 513, 548, 639, 705, 778, 816, 873, 981, 1032, 1066, 1160], "shrink": [228, 279, 549, 705, 1067, 1068, 1160], "hold": [228, 279], "ddof": [231, 251, 279, 540, 542, 559, 623, 641, 682, 683, 686, 694, 705, 782, 790, 816, 1054, 1056, 1077, 1149, 1160], "deviat": [231, 279, 387, 540, 559, 686, 705, 782, 816, 927, 1077, 1160], "degre": [231, 251, 279, 522, 540, 542, 559, 623, 634, 641, 682, 683, 686, 694, 705, 782, 790, 816, 1054, 1056, 1077, 1149, 1160], "freedom": [231, 251, 279, 540, 542, 559, 623, 641, 682, 683, 686, 694, 705, 782, 790, 816, 1054, 1056, 1077, 1149, 1160], "divisor": [231, 251, 279, 540, 542, 559, 623, 641, 682, 683, 686, 694, 705, 782, 790, 816, 1054, 1056, 1077, 1149, 1160], "816497": [231, 279], "16a": [232, 279], "27b": [232, 279], "38c": [232, 279], "nth": [234, 279, 589, 613, 705, 785, 816, 1108, 1133, 1160], "mostli": [235, 279, 395, 705], "categoricaltyp": [235, 279], "as_seri": [236, 279, 871, 1036, 1160], "fruit": [236, 279, 528, 566, 590, 705, 1085, 1109], "car": [236, 279, 528, 705], "beetl": [236, 279, 528, 705], "audi": [236, 279, 528, 705], "300": [236, 279, 1048, 1049, 1051, 1160], "drop_first": [238, 279], "dummi": [238, 279, 1137, 1160], "foo_1": [238, 279], "foo_2": [238, 279], "bar_3": [238, 279], "bar_4": [238, 279], "ham_a": [238, 279], "ham_b": [238, 279], "instantiat": [239, 279, 1139, 1160], "from_repr": [239, 279, 1139, 1160], "df_from_str_repr": [239, 279], "eval": [239, 279, 655, 1139, 1160], "indexord": [240, 279], "fortran": [240, 279], "downstream": [240, 279, 546, 705, 1063, 1160], "applic": [240, 279, 480, 534, 535, 536, 537, 538, 540, 541, 542, 705], "prevent": [240, 279, 288, 333, 334, 425, 499, 610, 705, 816, 868, 869, 1130, 1160], "reshap": [240, 279, 443, 705, 985, 1160], "ll": [240, 279], "u1": [240, 279], "f4": [240, 279], "view": [240, 279, 480, 705, 1141, 1160], "recarrai": [240, 279], "rec": [240, 279], "use_pyarrow_extension_arrai": [241, 279, 1142, 1160], "extens": [241, 279, 1142, 1160], "trigger": [241, 279, 705, 1142, 1160], "sent": [241, 279, 1141, 1142, 1160], "pandas_df1": [241, 279], "pandas_df2": [241, 279], "pandas_df2_pa": [241, 279], "na": [241, 279, 590, 1142, 1160], "four": [243, 279], "five": [243, 279, 1168], "bottom_k": [244, 279, 617, 705, 786, 816, 1144, 1160], "include_head": [245, 279], "header_nam": [245, 279], "column_nam": [245, 279], "perhap": [245, 279], "column_2": [245, 279], "name_gener": [245, 279], "base_nam": [245, 279], "my_column_": [245, 279], "my_column_0": [245, 279], "my_column_1": [245, 279], "my_column_2": [245, 279], "new_id": [245, 279], "uniquekeepstrategi": [246, 279, 787, 816], "kept": [246, 279, 787, 816], "decompos": [247, 279, 788, 816], "t_a": [247, 279, 788, 816], "t_b": [247, 279, 788, 816], "t_c": [247, 279, 788, 816], "t_d": [247, 279, 788, 816], "womp": [247, 279, 788, 816], "t_": [247, 279, 788, 816], "t_struct": [247, 279, 788, 816], "step": [248, 279, 632, 664, 665], "unstackdirect": [248, 279], "pivot": [248, 279], "phase": [248, 279], "subject": [248, 279], "ascii_uppercas": [248, 279], "h": [248, 279, 286, 374, 377, 549, 597, 599, 602, 705, 1116, 1118, 1121], "x_0": [248, 279, 386, 387, 388, 705, 926, 927, 928, 1160], "x_1": [248, 279], "y_0": [248, 279, 386, 387, 388, 705, 926, 927, 928, 1160], "y_1": [248, 279], "z_0": [248, 279], "z_1": [248, 279], "include_nul": [249, 279, 789, 816], "ignore_nul": [249, 279, 289, 291, 386, 387, 388, 626, 628, 705, 823, 824, 926, 927, 928, 1150, 1160], "syntact": [249, 279, 626, 628, 646, 656, 657, 661, 666, 671, 675, 678, 679, 684, 688, 696, 789, 816, 1076, 1160], "sugar": [249, 279, 626, 628, 646, 656, 657, 661, 666, 671, 675, 678, 679, 684, 688, 696, 789, 816, 1076, 1160], "coalesc": [249, 279, 597, 789, 816, 1116], "400": [249, 279, 789, 816, 1048, 1049, 1051, 1160], "600": [249, 279, 789, 816, 819], "700": [249, 279, 789, 816], "new_df": [249, 279, 789, 816], "time_column": [250, 279], "frequenc": [250, 279], "date_rang": [250, 279, 348, 351, 368, 376, 380, 884, 902, 908, 909, 919, 920], "forward_fil": [250, 279, 331, 334, 705], "varianc": [251, 279, 388, 426, 542, 623, 694, 705, 790, 816, 928, 969, 1056, 1149, 1160], "grow": [252, 279], "not_": [254, 279, 420, 705, 792, 816, 1160], "not_c": [254, 279, 792, 816], "diff": [254, 279, 349, 353, 357, 359, 361, 366, 373, 457, 705, 792, 816, 885, 889, 896, 898, 901, 906, 913, 999, 1160], "_diff": [254, 279, 792, 816], "row_nr": [256, 279, 479, 534, 535, 537, 540, 541, 542, 705, 795, 816, 1062, 1160], "named_agg": [258, 797], "_sum": [258, 797], "_mean_squar": [258, 797], "b_sum": [258, 797], "c_mean_squar": [258, 797], "sub": [260, 265, 306, 307, 308, 705, 838, 839, 840], "map_group": [260, 630, 799], "deem": [261, 642, 800], "nr": [263, 273, 802, 812], "triangl": [265, 804], "group_df": [265, 804], "maxim": [266, 301, 705, 805, 833, 1160], "833333": [267, 806], "minim": [269, 302, 434, 549, 557, 705, 808, 834, 976, 1022, 1067, 1160], "overview": [279, 705, 717, 816, 1160, 1168], "frameinittyp": [279, 816], "entri": [279, 816, 1167], "mydatafram": 279, "df4": 279, "df5": 279, "df6": 279, "approx_uniqu": [279, 816], "corr": 279, "drop_in_plac": 279, "drop_nul": [279, 340, 705, 816, 875, 1160], "estimated_s": [279, 1160], "explod": [279, 397, 512, 527, 705, 816, 1042, 1160], "find_idx_by_nam": 279, "fold": [279, 489, 638, 644, 645, 680], "frame_equ": [279, 378], "group_by_rol": [279, 816], "groupby_dynam": [279, 816], "groupby_rol": [279, 816], "hash_row": 279, "hstack": 279, "insert_at_idx": 279, "is_dupl": [279, 705, 1160], "is_empti": [279, 1160], "is_uniqu": [279, 705, 1160], "iter_slic": 279, "melt": [279, 816], "merge_sort": [279, 816], "n_uniqu": [279, 705, 1160], "pipe": [279, 705, 816], "quantil": [279, 520, 538, 705, 816, 1036, 1052, 1160], "replace_at_idx": 279, "select_seq": [279, 816], "shift_and_fil": [279, 705, 816, 1160], "shrink_to_fit": [279, 1160], "take_everi": [279, 705, 816, 1160], "to_dummi": [279, 1160], "to_numpi": [279, 478, 705, 1160], "to_panda": [279, 1160], "to_struct": [279, 569], "unnest": [279, 336, 520, 529, 569, 570, 588, 589, 607, 705, 816, 871, 1010, 1036, 1044, 1107, 1108, 1160], "unstack": 279, "with_columns_seq": [279, 816], "write_avro": 279, "write_databas": 279, "write_delta": 279, "write_excel": 279, "write_ipc_stream": 279, "write_json": [279, 816], "write_parquet": 279, "cumprod": [286, 705, 1160], "ghi": [286, 569, 705, 819, 1088], "94": [287, 705], "to_uppercas": [288, 503, 570, 705], "confus": [289, 419, 421, 705], "kleen": [289, 291, 626, 628, 705, 823, 824, 1160], "bitwis": [290, 511, 625, 626, 627, 628, 629, 705], "upcast": [292, 705], "skip_nul": [293, 480, 705, 826, 1018, 1160], "pass_nam": [293, 480, 705], "mapelementsstrategi": [293, 480, 705], "thread_loc": [293, 480, 705], "map_el": [293, 478, 625, 705, 826, 1160], "unknown": [293, 479, 480, 568, 667, 705, 1087], "stage": [293, 705], "code": [293, 311, 313, 314, 315, 480, 546, 705, 736, 754, 816, 1063, 1160], "gil": [293, 480, 705], "invers": [295, 296, 297, 298, 299, 300, 705, 827, 828, 829, 830, 831, 832, 1160], "cosin": [295, 296, 326, 327, 478, 705, 827, 828, 863, 864, 1160], "570796": [295, 297, 705, 827, 829, 1160], "hyperbol": [296, 298, 300, 327, 553, 615, 705, 828, 830, 832, 864, 1072, 1135, 1160], "sine": [297, 298, 478, 552, 553, 705, 829, 830, 1071, 1072, 1160], "881374": [298, 705, 830, 1160], "tangent": [299, 300, 614, 615, 705, 831, 832, 1134, 1135, 1160], "785398": [299, 633, 634, 705, 831, 1160], "arg_wher": [304, 705], "seen": [310, 400, 705], "substr": [311, 314, 315, 561, 566, 582, 583, 587, 588, 589, 590, 819, 842, 845, 846, 1080, 1085, 1101, 1102, 1106, 1107, 1108, 1109], "ends_with": [311, 315, 561, 590, 819, 1109], "yellow": [311, 313, 314, 315], "x00": [311, 313, 314, 315], "xff": [311, 313, 314, 315], "contains_with_lit": 311, "contains_with_expr": 311, "transferencod": [312, 313, 564, 565, 843, 844, 1083, 1084], "hex": [312, 313, 564, 565, 581, 843, 844, 1083, 1084, 1100], "base64": [312, 313, 564, 565, 843, 844, 1083, 1084], "code_encoded_hex": 313, "000000": 313, "ffff00": 313, "0000ff": 313, "anywher": [314, 315, 597, 598, 599, 1116, 1117, 1118], "ends_with_lit": 314, "ends_with_expr": 314, "starts_with_lit": 315, "starts_with_expr": 315, "complex": [316, 335, 617, 705, 847, 870, 1144, 1160], "frac": [316, 386, 387, 388, 554, 617, 705, 847, 926, 927, 928, 1073, 1144, 1160], "supersed": [317, 705], "to_fram": [319, 351, 371, 376, 378, 597, 871, 1036, 1061, 1062, 1107, 1108, 1116, 1160], "categoricalord": [320, 852], "lexic": [320, 819, 852, 854], "259921": [321, 705, 855, 1160], "587401": [321, 705], "numericliter": [323, 324, 325, 705, 859, 860, 861, 1160], "temporalliter": [323, 324, 325, 705, 859, 860, 861, 1160], "outsid": [323, 705, 859, 1160], "clip": [324, 325, 705, 860, 861, 1160], "543081": [327, 705, 864, 1160], "cotang": [328, 705, 865, 1160], "cumul": [330, 331, 332, 333, 334, 644, 645, 646, 647, 705, 866, 867, 868, 869, 1160], "a_revers": [330, 331, 332, 333, 334, 477, 500, 502, 528, 609, 705], "value_cummax": [331, 705], "value_cummax_all_fil": [331, 705], "value_cumsum": [334, 705], "value_cumsum_all_fil": [334, 705], "min_period": [335, 386, 387, 388, 532, 533, 534, 535, 536, 537, 538, 540, 541, 542, 682, 683, 705, 870, 926, 927, 928, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1054, 1055, 1056, 1160], "slide": [335, 705, 870, 1160], "slot": [335, 338, 439, 705, 870, 873, 981, 1160], "realli": [335, 705, 870, 1160], "visit": [335, 705, 870, 1160], "left_clos": [336, 520, 705, 871, 1036, 1160], "include_break": [336, 520, 705, 871, 1036, 1160], "bin": [336, 520, 581, 625, 698, 705, 871, 942, 1036, 1100, 1154, 1160], "discret": [336, 338, 383, 439, 457, 520, 705, 871, 873, 924, 942, 981, 999, 1036, 1160], "plu": [336, 473, 705, 871, 1015, 1036, 1160], "endpoint": [336, 520, 534, 535, 536, 537, 538, 540, 541, 542, 705, 871, 1036, 1160], "observ": [336, 386, 387, 388, 520, 705, 871, 926, 927, 928, 1036, 1160], "fall": [336, 520, 530, 705, 871, 946, 1036, 1045, 1160], "qcut": [336, 705, 871, 1160], "breakpoint": [336, 520, 705, 871, 1036, 1160], "brk": [336, 520, 705], "foo_bin": [336, 520, 705], "radian": [337, 633, 705], "pi": [337, 705, 863, 865, 1071, 1134, 1160], "720": [337, 522, 705], "540": [337, 522, 705], "360": [337, 522, 705], "180": [337, 522, 705], "null_behavior": [338, 439, 705, 873, 981, 1160], "nullbehavior": [338, 439, 705, 873, 981, 1160], "drop_nan": [341, 705, 876, 1160], "utc": [342, 345, 350, 370, 597, 599, 819, 878, 881, 886, 910, 1116, 1118], "usual": [342, 878], "vari": [342, 878, 1168], "rare": [342, 878], "countri": [342, 878], "switch": [342, 878], "samoa": [342, 878], "apia": [342, 878], "did": [342, 878], "2011": [342, 878], "dst_offset": [342, 378, 878, 918], "2012": [342, 878], "replace_time_zon": [342, 350, 882, 883, 915], "pacif": [342, 878], "11h": [342, 878], "13h": [342, 878], "lose": [343, 879], "2001": [343, 348, 351, 352, 354, 360, 362, 367, 368, 369, 371, 376, 378, 379, 380, 381, 534, 535, 537, 540, 541, 542, 597, 705, 819, 879, 884, 887, 888, 890, 892, 893, 894, 895, 897, 899, 900, 902, 905, 907, 908, 909, 911, 916, 918, 919, 920, 921, 922, 1116], "time_unit_m": [343, 879], "time_unit_n": [343, 879], "naiv": [344, 880, 1118], "compon": [344, 372, 597, 599, 654, 880, 912, 1116, 1118], "resolv": 344, "tm": [344, 819], "456000": [344, 880], "101000": 344, "456": [344, 819, 880, 1138, 1160], "07": [344, 370, 371, 378, 597, 649, 652, 660, 819, 880, 910, 1116], "101": [344, 581, 1100, 1168], "d1": 344, "d2": 344, "d3": 344, "europ": [345, 350, 370, 378, 881, 886, 910, 918], "london": [345, 350, 370, 378, 881, 886, 910, 918], "gmt": [345, 350, 370, 378, 881, 886, 910, 918], "bst": [345, 350, 370, 378, 881, 886, 910, 918], "weekdai": [348, 368], "ordinal_dai": [348, 380], "day_of_month": [348, 368, 380], "day_of_year": [348, 368, 380], "356": [348, 368, 380], "357": [348, 368, 380], "358": [348, 368, 380], "359": [348, 368, 380], "days_diff": 349, "base_utc_offset": [350, 886], "0m": [350, 886], "epochtimeunit": [351, 660, 887], "unix": [351, 660, 887], "epoch_n": [351, 887], "epoch_": [351, 887], "978307200000000": [351, 376, 887, 916], "978307200": [351, 887], "978393600000000": [351, 376, 887, 916], "978393600": [351, 887], "978480000000000": [351, 376, 887, 916], "978480000": [351, 887], "2010": [352, 360, 819], "hours_diff": 353, "leap": [354, 367, 890, 907], "2002": [354, 367, 890, 907, 922], "iso": [355, 379, 380, 891, 919, 920], "1977": [355, 382], "1978": [355, 382], "1979": [355, 382], "calendar_year": [355, 382], "1976": [355, 382], "1_001": [356, 357, 359, 366], "002": [356, 357, 359, 366, 654, 896, 898, 906], "003": [356, 357, 359, 366], "3000": 356, "997": [356, 357, 359, 366], "997000": 356, "998": [356, 357, 359, 366], "998000": 356, "999": [356, 357, 359, 366, 819, 1168], "999000": [356, 819], "microseconds_diff": 357, "milliseconds_diff": 359, "minutes_diff": 361, "1440": [361, 901], "think": [363, 364, 903, 904], "vectoris": [363, 364, 903, 904], "tseri": [363, 364, 903, 904], "monthend": [363, 903], "rollforward": [363, 903], "monthbegin": [364, 904], "rollback": [364, 904], "nanoseconds_diff": 366, "minu": [367, 907], "dictat": [367, 907], "2005": [367, 907], "date_plus_1i": [367, 907], "1y2mo": [367, 907], "date_min": 367, "1998": [367, 907], "1999": [367, 819, 907], "2003": [367, 660, 907], "2004": [367, 907], "2006": [367, 907], "new_dat": 367, "ordin": [368, 523, 705, 908, 1038, 1160], "366": [368, 908], "use_earliest": [370, 378, 597, 599, 651, 910, 918, 1116, 1118], "ambigu": [370, 371, 378, 597, 599, 651, 910, 911, 918, 1116, 1118], "convert_time_zon": [370, 910], "london_timezon": [370, 910], "amsterdam": [370, 910], "london_to_amsterdam": [370, 910], "cet": [370, 910], "cest": [370, 910], "ts_local": [370, 910], "brussel": [370, 910], "half": [371, 386, 387, 388, 705, 911, 926, 927, 928, 1160], "225": [371, 378], "10m": [371, 378, 911, 918], "milli": [372, 912], "micro": [372, 912], "456789": [372, 819, 912], "111110": [372, 912], "765431": [372, 912], "11111": [372, 912], "seconds_diff": 373, "to_str": [374, 914], "datetime_str": [374, 377], "timestamp_n": [376, 916], "timestamp_m": 376, "978307200000": 376, "978393600000": 376, "978480000000": 376, "strftime": [377, 917], "offset_bi": [378, 654, 918], "15m": [378, 918], "ambiguous_map": 378, "map_dict": [378, 478, 705, 918, 1160], "53": [379, 919], "time_unit_u": 381, "32971": [381, 921], "32974": [381, 921], "32976": [381, 921], "iso_year": 382, "718281828459045": [383, 471, 705, 924, 1013, 1160], "pk": [383, 705, 924, 1160], "probabl": [383, 520, 705, 924, 1036, 1160], "459148": [383, 705], "754888": [383, 705], "eq": [385, 705, 1160], "span": [386, 387, 388, 705, 926, 927, 928, 1160], "half_lif": [386, 387, 388, 705, 926, 927, 928, 1160], "adjust": [386, 387, 388, 554, 705, 926, 927, 928, 1073, 1160], "exponenti": [386, 387, 388, 390, 517, 705, 926, 927, 928, 929, 1160], "weight": [386, 387, 388, 532, 533, 534, 535, 536, 537, 538, 540, 541, 542, 554, 705, 926, 927, 928, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1054, 1055, 1056, 1073, 1160], "decai": [386, 387, 388, 705, 926, 927, 928, 1160], "term": [386, 387, 388, 705, 926, 927, 928, 1160], "mass": [386, 387, 388, 705, 926, 927, 928, 1160], "gamma": [386, 387, 388, 705, 926, 927, 928, 1160], "foral": [386, 387, 388, 705, 926, 927, 928, 1160], "geq": [386, 387, 388, 705, 926, 927, 928, 1160], "theta": [386, 387, 388, 705, 926, 927, 928, 1160], "life": [386, 387, 388, 705, 926, 927, 928, 1160], "exp": [386, 387, 388, 705, 926, 927, 928, 1160], "ln": [386, 387, 388, 705, 926, 927, 928, 1160], "smooth": [386, 387, 388, 705, 926, 927, 928, 1160], "factor": [386, 387, 388, 616, 705, 926, 927, 928, 1143, 1160], "leq": [386, 387, 388, 705, 926, 927, 928, 1160], "imbal": [386, 387, 388, 705, 926, 927, 928, 1160], "ew": [386, 387, 388, 705, 926, 927, 928, 1160], "w_i": [386, 387, 388, 705, 926, 927, 928, 1160], "recurs": [386, 387, 388, 705, 926, 927, 928, 1160], "y_t": [386, 387, 388, 705, 926, 927, 928, 1160], "y_": [386, 387, 388, 705, 926, 927, 928, 1160], "x_t": [386, 387, 388, 705, 926, 927, 928, 1160], "x_2": [386, 387, 388, 705, 926, 927, 928, 1160], "428571": [386, 705, 926, 1160], "bia": [387, 388, 426, 539, 554, 705, 927, 928, 969, 1053, 1073, 1160], "unbias": [387, 388, 705, 927, 928, 1160], "963624": [387, 705, 927, 1160], "928571": [388, 705, 928, 1160], "wildcard": [389, 644, 645, 658, 680, 705], "regex": [389, 486, 561, 562, 563, 566, 568, 569, 570, 582, 583, 590, 656, 705, 819, 1080, 1081, 1082, 1085, 1087, 1088, 1089, 1101, 1102, 1109], "aa": [389, 561, 656, 705, 1080], "ba": [389, 590, 656, 705, 819], "cc": [389, 656, 705], "718282": [390, 705], "389056": [390, 705], "54": [390, 705, 1168], "59815": [390, 705], "expand": [391, 485, 486, 526, 705, 819, 930, 1160], "pythonliter": [392, 705, 932, 1019, 1022, 1160], "extrem": [392, 533, 705, 932, 1047, 1160], "group_col": [395, 624, 705], "g1": [395, 624, 705], "g2": [395, 624, 705], "lt": [395, 624, 705, 1160], "gte": [395, 624, 705], "exprlistnamespac": [397, 705], "divis": [399, 618, 705], "truediv": [399, 705], "9774092659964970114": [405, 705], "13614470193936745724": [405, 705], "1101441246220388612": [405, 705], "11638928888656214026": [405, 705], "13382926553367784577": [405, 705], "cumsum": [408, 608, 647, 705, 749, 816, 968, 1160], "interpolationmethod": [409, 705, 945, 1160], "regrid": [409, 705], "grid": [409, 705], "df_original_grid": [409, 705], "grid_point": [409, 705], "df_new_grid": [409, 705], "conflat": [410, 705], "finit": [412, 618, 641, 705, 950, 1160], "occurr": [413, 414, 417, 418, 622, 705, 942, 951, 952, 957, 958, 1148, 1160], "is_first_distinct": [413, 705, 951, 1160], "optional_memb": [415, 705, 954, 1160], "infinit": [416, 618, 705, 955, 1160], "is_last_distinct": [417, 705, 957, 1160], "_isnan": [419, 705], "b_isnan": [419, 705], "negat": [420, 509, 705, 1030, 1160], "_is_not_nan": [421, 705], "b_is_not_nan": [421, 705], "_not_nul": [422, 705], "a_not_nul": [422, 705], "b_not_nul": [422, 705], "_isnul": [423, 705], "a_isnul": [423, 705], "b_isnul": [423, 705], "chain": [425, 499, 501, 502, 503, 504, 518, 609, 695, 705], "undo": [425, 492, 499, 501, 502, 518, 609, 705], "fisher": [426, 554, 705, 969, 1073, 1160], "fourth": [426, 705, 969, 1160], "subtract": [426, 608, 705, 969, 1160], "distribut": [426, 554, 705, 969, 1073, 1160], "elimin": [426, 705, 969, 1160], "bias": [426, 554, 705, 969, 1073, 1160], "scipi": [426, 554, 705, 969, 1073, 1160], "stat": [426, 554, 705, 969, 1073, 1160], "153061": [426, 705], "sublist": [433, 434, 436, 439, 444, 445, 446, 448, 449, 457, 462, 466, 467, 468, 954, 975, 976, 978, 981, 986, 987, 988, 990, 991, 999, 1004, 1008, 1009, 1010, 1160], "membership": [436, 978], "listcol": 438, "number_of_two": 438, "set_differ": [440, 982], "blindli": [442, 984], "worth": [442, 984], "enough": [442, 554, 705, 984, 1073, 1160], "concat_list": [442, 655, 984], "rank": [442, 641, 655, 705, 984, 1160], "exprnamespac": 443, "flat": [443, 527, 705, 985, 1042, 1160], "set_intersect": [447, 989], "x_y": 448, "th": [457, 554, 705, 999, 1073, 1160], "symmetr": [459, 465, 1001, 1007], "sdiff": 459, "taken": [462, 586, 1004, 1105], "set_symmetric_differ": [465, 1007], "null_on_oob": [467, 1009], "cheaper": [467, 1009], "n_field_strategi": [468, 1010], "tostructstrategi": [468, 1010], "first_non_nul": [468, 1010], "max_width": [468, 1010], "field_0": [468, 1010], "field_1": [468, 1010], "field_n": [468, 1010], "pre": [468, 480, 520, 678, 681, 696, 705, 1036, 1160], "n0": 468, "n1": 468, "set_union": [469, 1011], "logarithm": [471, 472, 473, 705, 1013, 1014, 1015, 1160], "584963": [471, 705], "30103": [472, 705], "60206": [472, 705], "natur": [473, 705, 1015, 1160], "693147": [473, 705], "098612": [473, 705], "386294": [473, 705], "lowest": [474, 705], "9223372036854775808": [474, 705], "agg_list": [476, 478, 705], "map_batch": [476, 668, 705, 756, 816], "b_revers": [477, 500, 502, 528, 609, 705], "rstrip": [477, 500, 705], "_revers": [477, 500, 502, 528, 609, 705], "whole": [478, 556, 557, 568, 705, 804, 816, 1087], "elementwis": [478, 532, 533, 534, 535, 537, 541, 705, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1054, 1055, 1056, 1160], "third": [478, 705], "parti": [478, 705], "book": [478, 705], "bug": [478, 480, 705, 756, 757, 799, 804, 816, 1018, 1160], "func": [478, 705], "argmax": [478, 705], "remap": [479, 705, 1017, 1160], "lookup": [479, 701, 705, 1017, 1160], "country_code_dict": [479, 705], "ca": [479, 705], "canada": [479, 705], "de": [479, 705], "germani": [479, 705], "fr": [479, 705], "franc": [479, 705], "country_cod": [479, 705], "rest": [479, 705], "discourag": [480, 705], "loop": [480, 705], "a_times_2": [480, 705], "tip": [480, 705], "again": [480, 705], "behav": [480, 705, 825, 1160], "exprmetanamespac": [484, 487], "foo_bar2": [484, 487], "raise_if_undetermin": 488, "computeerror": [488, 581, 717, 1100], "e_filt": [488, 490], "e_sum_ov": [488, 490], "e_sum_slic": [488, 490], "tree": 491, "modulu": [495, 705], "xlog2": [497, 517, 705], "reverse_": [501, 518, 705], "reverse_a": [501, 518, 705], "reverse_b": [501, 518, 705], "lowercas": [503, 601, 1120], "uppercas": [504, 604, 1123], "to_lowercas": 504, "poison": [505, 506, 705, 1027, 1028, 1160], "nanmax": [505, 506, 705, 1027, 1028, 1160], "inequ": [507, 705], "ne": [508, 705, 1160], "more_expr": [512, 635, 638, 639, 640, 705], "mapping_strategi": [512, 705], "windowmappingstrategi": [512, 705], "group_to_row": [512, 705], "outcom": [512, 705], "group_dtyp": [512, 705], "warn": [512, 705], "flatten": [512, 705], "_max": [512, 705], "c_max": [512, 705], "_min": [512, 705], "c_min": [512, 705], "percent": [513, 705, 1032, 1160], "090909": [513, 705], "peak": [514, 515, 705, 1033, 1034, 1160], "extract_numb": [516, 705], "digit": [516, 543, 569, 705, 1057, 1082, 1088, 1160, 1168], "scale_negative_even": [516, 705], "expon": [517, 705, 1160], "allow_dupl": [520, 705, 1036, 1160], "duplicateerror": [520, 705, 717, 1036, 1160], "happen": [520, 705, 1036, 1160], "cut": [520, 705, 1036, 1160], "566371": [522, 705], "424778": [522, 705], "283185": [522, 705], "141593": [522, 705, 827, 1160], "rankmethod": [523, 705, 1038, 1160], "ti": [523, 705, 1038, 1160], "competit": [523, 705, 1038, 1160], "highest": [523, 621, 641, 705, 816, 1038, 1160], "immedi": [523, 632, 636, 649, 650, 652, 653, 664, 665, 678, 681, 687, 692, 693, 696, 705, 1038, 1160], "safe": [525, 705, 1040, 1118, 1141, 1160], "fruits_revers": [528, 705], "cars_revers": [528, 705], "rle": [530, 705, 1045, 1160], "themselv": [530, 705, 1045, 1160], "a_r": [530, 705], "ab_r": [530, 705], "window_s": [532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 682, 683, 705, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1160], "rolling_map": [532, 705, 1046, 1160], "multipli": [532, 533, 534, 535, 537, 540, 541, 542, 705, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1054, 1055, 1056, 1160], "rolling_sum": [533, 705, 1047, 1160], "nansum": [533, 705, 1047, 1160], "travers": [534, 535, 537, 541, 705, 1048, 1049, 1051, 1054, 1055, 1056, 1160], "vector": [534, 535, 537, 541, 705, 1048, 1049, 1051, 1054, 1055, 1056, 1160], "5h": [534, 535, 536, 537, 538, 540, 541, 542, 705], "df_tempor": [534, 535, 537, 540, 541, 542, 705], "closur": [534, 535, 540, 541, 542, 705], "rolling_row_max": [534, 705], "2h": [534, 535, 537, 540, 541, 542, 705], "rolling_row_mean": [535, 705], "rolling_row_min": [537, 705], "625": [538, 705], "skew": [539, 705, 1053, 1160], "381802": [539, 705, 1053, 1160], "47033": [539, 705, 1053, 1160], "38180177416060584": [539, 705, 1053, 1160], "47033046033698594": [539, 705, 1053, 1160], "433013": [540, 705, 782, 816], "rolling_row_std": [540, 705], "rolling_row_sum": [541, 705], "39": [541, 660, 705], "63": [541, 705], "69": [541, 705], "1875": [542, 705, 790, 816], "rolling_row_var": [542, 705], "searchsortedsid": [545, 705, 1059, 1160], "leftmost": [545, 705, 1059, 1160], "rightmost": [545, 705, 1059, 1160], "six": [545, 705], "extrema": [549, 705, 1067, 1160], "112": [549, 705, 1168], "129": [549, 705], "i8": [549, 678, 681, 696, 705, 873, 1043, 1147, 1160], "8589934592": [549, 705], "1073741824": [549, 705], "175201": [553, 705, 1072, 1160], "unimod": [554, 705, 1073, 1160], "skewtest": [554, 705, 1073, 1160], "speak": [554, 705, 1073, 1160], "g_1": [554, 705, 1073, 1160], "m_3": [554, 705, 1073, 1160], "m_2": [554, 705, 1073, 1160], "m_i": [554, 705, 1073, 1160], "sum_": [554, 705, 1073, 1160], "texttt": [554, 705, 1073, 1160], "k_3": [554, 705, 1073, 1160], "k_2": [554, 705, 1073, 1160], "sqrt": [554, 633, 634, 705, 1073, 1160], "343622": [554, 705], "value1": [557, 705], "value2": [557, 705], "attain": [557, 705], "414214": [558, 705, 1076, 1160], "sensit": [561, 569, 582, 1080, 1088, 1101], "ilmsuxu": [561, 568, 569, 582, 1080, 1087, 1088, 1101], "default_match": 561, "insensitive_match": 561, "crab": [561, 1080], "dog": [561, 601, 604, 640, 1080, 1120, 1123], "rab": [561, 1080], "success": [562, 563, 569, 1081, 1082, 1088], "overlap": [562, 563, 569, 1081, 1082, 1088], "123": [563, 569, 583, 605, 819, 1082, 1088, 1102, 1124, 1138, 1160], "bla": [563, 569, 1082, 1088], "asd": [563, 569, 1082, 1088], "678": [563, 569, 1082, 1088], "910t": [563, 569, 1082, 1088], "count_digit": 563, "dbc": [563, 1082], "3xy": [563, 1082], "1zy3": [563, 1082], "666f6f": [565, 1084], "626172": [565, 1084], "mango": [566, 590, 1085, 1109], "has_suffix": 566, "le": [566, 705, 1160], "nu": 566, "group_index": [568, 1087], "captur": [568, 570, 1087, 1089], "nthose": [568, 1087], "nodd": [568, 1087], "nthe": [568, 1087], "vote": [568, 570, 1087, 1089], "ballon_dor": [568, 570, 1087, 1089], "404": [568, 570, 1087, 1089], "ref": [568, 570, 1087, 1089], "candid": [568, 570, 1087, 1089], "messi": [568, 570, 1087, 1089], "ronaldo": [568, 1087], "haystack": [569, 1088], "email": [569, 1088], "real": [569, 1088], "some_account": [569, 1088], "somewher": [569, 1088], "net": [569, 1088], "jkl": [569, 1088], "uvw": [569, 1088], "co": [569, 705, 1088, 1160], "uk": [569, 1088], "address": 569, "xi": [569, 1088], "insensit": [569, 582, 819, 1080, 1088, 1101], "char": [569, 1088], "quantifi": [569, 1088], "email_part": [569, 1088], "extracted_nr": 569, "910": [569, 1088], "unnam": [570, 1089], "weghorst": [570, 1089], "candi": 570, "json_path_match": [571, 1090], "jsonpath": [571, 572, 1090, 1091], "json_path": [572, 1091], "json_val": [572, 1091], "len_char": [573, 578, 1092, 1097], "_o": [573, 574, 1092, 1093], "caf\u00e9": [573, 574, 1092, 1093], "345": [573, 574, 1092, 1093], "\u6771\u4eac": [573, 574, 1092, 1093], "n_byte": [573, 574], "n_char": [573, 574], "fill_char": [576, 579, 580, 584, 1095, 1098, 1099, 1103], "justifi": [576, 584, 1095, 1103], "pad_end": [576, 580, 1095, 1099], "strip_chars_start": [577, 1096], "strip": [577, 585, 592, 593, 594, 595, 596, 1096, 1104, 1111, 1112, 1113], "pad": [579, 580, 605, 1098, 1099, 1124], "reach": [579, 580, 605, 1098, 1099, 1124], "pad_start": [579, 584, 605, 1098, 1103, 1124], "cow": [579, 580, 1098, 1099], "monkei": [579, 580, 1098, 1099], "hippopotamu": [579, 580, 1098, 1099], "zfill": [580, 625, 705, 1099], "radix": [581, 1100], "parseerror": [581, 1100], "becom": [581, 1100], "silent": [581, 1100], "110": [581, 1100], "010": [581, 1100], "fa1e": [581, 1100], "ff00": [581, 1100], "cafe": [581, 1100], "64030": [581, 1100], "65280": [581, 1100], "51966": [581, 1100], "replace_al": [582, 1101], "citi": 582, "philadelphia": 582, "season": 582, "spring": 582, "summer": 582, "autumn": 582, "winter": 582, "weather": [582, 1101], "raini": [582, 1101], "sunni": [582, 1101], "cloudi": 582, "snowi": 582, "foggi": [582, 1101], "123abc": [582, 1101], "abc456": [582, 1101], "abcabc": [583, 1102], "123a123": [583, 1102], "bc": [583, 688, 1102], "strip_chars_end": [585, 1104], "subslic": [586, 1105], "pear": [586, 1105], "papaya": [586, 1105], "dragonfruit": [586, 1105], "s_slice": 586, "ear": [586, 1105], "aya": [586, 1105], "uit": [586, 1105], "ya": [586, 1105], "onf": [586, 1105], "foo_bar_baz": 587, "split_inclus": 587, "foo_": [587, 659], "bar_": 587, "a_1": [588, 1107, 1137, 1160], "d_4": [588, 1107], "rename_field": [588, 589, 871, 1036, 1107, 1108, 1160], "first_part": [588, 589, 1107, 1108], "second_part": [588, 589, 1107, 1108], "remaind": [589, 1108], "app": [590, 1109], "has_prefix": 590, "strip_char": [591, 1110], "nworld": 592, "ow": 592, "hell": [592, 1111], "rld": [592, 594, 1113], "oldw": 593, "he": 593, "tworld": [594, 1111, 1113], "wod": [594, 1113], "foobar": [595, 596, 1114, 1115], "foofoobar": [595, 1114], "foobarbar": [596, 1115], "polarstemporaltyp": [597, 1116], "penalti": [597, 598, 599, 1116, 1117, 1118], "clean": [597, 598, 599, 1116, 1117, 1118], "beforehand": [597, 598, 599, 1116, 1117, 1118], "certainli": [597, 598, 599, 1116, 1117, 1118], "3f": [597, 599, 1116, 1118], "00z": [597, 599, 1116, 1118], "sun": [597, 1116], "jul": [597, 1116], "34": [597, 1116], "inference_length": [600, 1119], "3420": [600, 1119], "120134": [600, 1119], "3212": [600, 1119], "90": [600, 1119], "143": [600, 1119, 1168], "variant": [601, 603, 604], "titlecas": [603, 1122], "sing": [603, 1122], "welcom": [603, 1122], "THERE": [603, 1122], "NO": [603, 819, 1122], "There": [603, 1122], "999999": [605, 651, 691, 692, 693, 819, 1124], "0123": [605, 1124], "cd": [606, 607], "struct_col": [606, 607], "www": 607, "xxx": 607, "yyi": 607, "zzz": 607, "obvious": 607, "structfieldnotfounderror": [607, 717], "761594": [615, 705, 1135, 1160], "replic": [616, 705, 1143, 1160], "vals_phys": [616, 705], "floordiv": [618, 705], "ieee": [618, 705], "754": [618, 705], "mathemat": [618, 655, 705], "undefin": [618, 705], "On": [618, 705], "operand": [618, 705], "infin": [618, 705], "value_count": [620, 705, 1160], "9223372036854775807": [621, 705], "binary_str": [625, 705], "250": [625, 705, 1049, 1160, 1168], "bin_x": [625, 705], "bin_i": [625, 705], "xor_xi": [625, 705], "bin_xor_xi": [625, 705], "00001010": [625, 705], "00001011": [625, 705], "00001000": [625, 705], "00000010": [625, 705], "11111010": [625, 705], "00000011": [625, 705], "249": [625, 705], "11111001": [625, 705], "01000010": [625, 705], "00000100": [625, 705], "70": [625, 705], "01000110": [625, 705], "AND": [626, 627, 819, 1141, 1160], "OR": [628, 629, 739, 816, 819], "any_horizont": 628, "returns_scalar": [630, 670, 705], "polarsintegertyp": [632, 664, 665], "arctan": [633, 634, 705, 1160], "angl": [633, 634], "plane": [633, 634], "rai": [633, 634], "tworoottwo": [633, 634], "arctan2d": 633, "atan2d": [633, 634], "atan2": [633, 634], "135": [633, 634], "356194": [633, 634], "arctan2": 634, "arg_tru": [636, 705, 1160], "mimic": 639, "a_lag_": 639, "a_rol": 639, "swim": 640, "walk": 640, "full_sent": 640, "correlationmethod": 641, "propagate_nan": 641, "spearman": 641, "544705": 641, "covari": [643, 683, 705], "acc": [644, 645, 658, 680], "include_init": 644, "accumul": [644, 645, 658, 680], "fn": [644, 645, 658, 680], "new_valu": [644, 645, 658, 680], "cumreduc": 644, "cumsum_horizont": 646, "month_end": 649, "granular": 649, "finer": 649, "permut": 649, "1985": [649, 652], "america": 652, "new_york": 652, "est": 652, "contrast": 654, "sometim": [654, 704], "tbl_width_char": 654, "120": 654, "add_week": 654, "add_dai": 654, "add_second": 654, "add_milli": 654, "add_hour": 654, "add_calendar_dai": 654, "add_calendar_month": 654, "mo": 654, "add_calendar_year": 654, "2024": [654, 819], "a_b_doubl": 655, "f_string": 659, "placehold": 659, "hello_": 659, "_world": 659, "_bar_": 659, "foo_a_bar_1": 659, "foo_b_bar_2": 659, "foo_c_bar_3": 659, "epoch": 660, "timestep": 660, "1666683077": 660, "1666683099": 660, "12345": [660, 856, 937, 1057, 1160], "12346": 660, "agg_group": [661, 705], "allow_object": 667, "valueexcept": 667, "test_func": 669, "list_of_seri": 670, "my_custom_aggreg": 670, "understood": 670, "max_horizont": 671, "min_horizont": [675, 684], "power": [685, 1160], "a_a": 685, "a_txt": 685, "605551": 686, "605551275463989": 686, "my_struct": 687, "thens": 695, "elif": 695, "pick": 695, "own": [695, 1168], "isn": 695, "arr": [697, 1141, 1152, 1160], "technic": 701, "further": [701, 1142, 1160], "columnfactori": 701, "more_nam": 701, "__call__": 701, "helper": 701, "__getattr__": 701, "idiomat": [701, 804], "quick": [701, 872, 1160, 1168], "prototyp": 701, "keystrok": 701, "drawback": 701, "readabl": 701, "modul": [704, 819, 1168], "and_": 705, "arcco": [705, 1160], "arccosh": [705, 1160], "arcsin": [705, 1160], "arcsinh": [705, 1160], "arctanh": [705, 1160], "arg_max": [705, 1160], "arg_min": [705, 1160], "arg_sort": [705, 1160], "arg_uniqu": [705, 1160], "backward_fil": 705, "cbrt": [705, 1160], "clip_max": [705, 1160], "clip_min": [705, 1160], "cosh": [705, 1160], "cot": [705, 1160], "cumcount": 705, "cummax": [705, 1160], "cummin": [705, 1160], "cumulative_ev": [705, 1160], "entropi": [705, 1160], "eq_miss": [705, 1160], "ewm_mean": [705, 1160], "ewm_std": [705, 1160], "ewm_var": [705, 1160], "extend_const": [705, 1160], "from_json": [705, 816], "ge": [705, 1160], "gt": [705, 1160], "implod": [705, 1160], "inspect": [705, 816], "is_between": [705, 1160], "is_finit": [705, 1160], "is_first": [705, 1160], "is_infinit": [705, 1160], "is_last": [705, 1160], "is_nan": [705, 1160], "is_not": 705, "is_not_nan": [705, 1160], "is_not_nul": [705, 1160], "keep_nam": 705, "kurtosi": [705, 1160], "log10": [705, 1160], "log1p": [705, 1160], "map_alia": 705, "mod": 705, "mul": 705, "nan_max": [705, 1160], "nan_min": [705, 1160], "ne_miss": [705, 1160], "or_": 705, "pct_chang": [705, 1160], "peak_max": [705, 1160], "peak_min": [705, 1160], "pow": [705, 1160], "register_plugin": 705, "lib": [705, 1136, 1160], "is_elementwis": 705, "input_wildcard_expans": 705, "cast_to_supertyp": 705, "plugin": 705, "highli": 705, "unsaf": 705, "unstabl": 705, "serializ": 705, "ran": 705, "reinterpret": [705, 1160], "repeat_bi": 705, "rle_id": [705, 1160], "rolling_appli": [705, 1160], "rolling_max": [705, 1160], "rolling_mean": [705, 1160], "rolling_median": [705, 1160], "rolling_min": [705, 1160], "rolling_quantil": [705, 1160], "rolling_skew": [705, 1160], "rolling_std": [705, 1160], "rolling_var": [705, 1160], "search_sort": [705, 1160], "shrink_dtyp": [705, 1160], "sin": [705, 1160], "sinh": [705, 1160], "sort_bi": 705, "tan": [705, 1160], "to_phys": [705, 853, 1160], "unique_count": [705, 1160], "xor": 705, "expos": 717, "miscellan": 717, "arrowerror": 717, "columnnotfounderror": 717, "invalidoperationerror": 717, "polarspanicerror": 717, "schemaerror": 717, "schemafieldnotfounderror": 717, "shapeerror": 717, "parametr": 717, "build_info": 717, "get_index_typ": 717, "show_vers": 717, "threadpool_s": 717, "sqlcontext": [717, 1167], "hit": [723, 816], "node": [723, 727, 749, 756, 757, 761, 766, 769, 816], "_eager": [727, 816], "explain": [727, 816], "purpos": [727, 736, 816], "set_streaming_chunk_s": [727, 816], "collect_all_async": [728, 816], "async": [728, 816], "stringio": [730, 741, 775, 816], "snippet": [732, 816], "Be": [736, 816], "fewer": [736, 816], "suscept": [736, 816], "deseri": [741, 768, 775, 816], "lazygroupbi": [742, 743, 744, 745, 746, 747, 771, 816], "other_lf": [751, 816], "validate_output_schema": [756, 757, 816], "streamabl": [756, 757, 761, 816], "past": [756, 757, 816], "paramount": [756, 757, 816], "elig": [756, 757, 816], "invari": [757, 816], "upheld": [757, 816], "100_000": [757, 816], "200000": [757, 816], "199998": [757, 816], "199996": [757, 816], "199994": [757, 816], "199992": [757, 816], "show_plot": [766, 816], "truncate_nod": [766, 816], "figsiz": [766, 779, 816], "gantt": [766, 816], "plot": [766, 779, 816], "group_by_partit": [766, 816], "470": [766, 816], "475": [766, 816], "1964": [766, 816], "swap": [769, 816], "dynamic_group_bi": [771, 816], "dataframescan": [775, 816], "output_schema": [775, 816], "run_parallel": [775, 816], "duplicate_check": [775, 816], "later": [775, 816], "output_path": [779, 816], "raw_output": [779, 816], "figur": [779, 816], "290994": [782, 816], "118034": [782, 816], "implicit": [789, 816], "new_lf": [789, 816], "extern": [794, 816], "lf_other": [794, 816], "afoo": [794, 816], "cfoo": [794, 816], "train_lf": [794, 816], "feature_0": [794, 816], "feature_1": [794, 816], "test_lf": [794, 816], "_train": [794, 816], "feature_0_train": [794, 816], "opaqu": 804, "my_column": 804, "lf5": 816, "lf6": 816, "read_json": 816, "sink_csv": 816, "sink_ipc": 816, "sink_parquet": 816, "with_context": 816, "intuit": 819, "broadcast": 819, "emploi": 819, "complement": 819, "plenti": 819, "cde": 819, "fgg": 819, "jjk": 819, "lmn": 819, "opp": 819, "qqr": 819, "by_dtyp": 819, "as_expr": 819, "dispatch": 819, "1_234_500": 819, "5_000_555": 819, "1234500": 819, "5000555": 819, "by_nam": 819, "4_500_000": 819, "4500000": 819, "3265500": 819, "zap": 819, "2031": 819, "tstamp_tokyo": 819, "987654": 819, "123465": 819, "tstamp_utc": 819, "2025": 819, "666000": 819, "tstamp": 819, "600000": 819, "123000": 819, "666": 819, "td1": 819, "123456": 819, "987000": 819, "td2": 819, "td3": 819, "2m": [819, 900], "456m": 819, "7d": 819, "456789\u00b5": 819, "18d": 819, "999999\u00b5": 819, "23h": 819, "987m": 819, "14d": 819, "16h": 819, "39m": 819, "21d": 819, "456001\u00b5": 819, "expand_selector": 819, "789": 819, "colz": [819, 1168], "everyth": 819, "signed_integ": 819, "unsigned_integ": 819, "is_selector": 819, "obj": 819, "_selector_proxy_": 819, "include_categor": 819, "set_ord": [819, 854], "2345": 819, "3456": 819, "append_chunk": [825, 1160], "super": [825, 1160], "292432": [828, 1160], "549306": [832, 1160], "catnamespac": 849, "56789": [856, 937, 1057, 1160], "901234": [856, 937, 1057, 1160], "1232e": [863, 865, 1160], "1656e15": [865, 1160], "break_point_label": [871, 1036, 1160], "break_point": [871, 942, 1036, 1160], "category_label": [871, 1036, 1160], "series_num": [872, 1160], "581139": [872, 1160], "series_str": [872, 1160], "datetimeindex": [874, 1160], "datetimenamespac": 877, "ser": [882, 883, 915], "kathmandu": [882, 883, 915], "0545": [882, 883, 915], "500m": [895, 897, 905], "500000": 895, "500000000": 905, "date_minus_1y_2mon": 907, "165": [911, 918], "series_equ": [911, 1160], "timestamp_u": 916, "978307200000000000": 916, "978393600000000000": 916, "978480000000000000": 916, "005": [924, 1160], "06293300616044681": [924, 1160], "65": [924, 1160], "8568409950394724": [924, 1160], "4000000": [925, 1160], "814697265625": [925, 1160], "bitmask": [939, 1160], "absenc": [939, 1160], "presenc": [939, 1141, 1160], "confirm": [939, 1160], "10734580197236529959": [940, 1160], "3022416320763508302": [940, 1160], "13756996518000038261": [940, 1160], "bin_count": [942, 1160], "a_count": [942, 1160], "listnamespac": 972, "field_2": 1010, "n00": 1010, "n01": 1010, "n02": 1010, "2147483648": [1016, 1160], "iso3166": [1017, 1160], "tur": [1017, 1122, 1160], "jpn": [1017, 1160], "nld": [1017, 1160], "country_lookup": [1017, 1160], "japan": [1017, 1160], "t\u00fcrkiy": [1017, 1160], "netherland": [1017, 1160], "unrecognis": [1017, 1160], "unspecifi": [1017, 1160], "country_nam": [1017, 1160], "166667": [1032, 1160], "142857": [1032, 1160], "200": [1048, 1049, 1051, 1160], "150": [1049, 1160], "350": [1049, 1160], "450": [1049, 1160], "dev": [1054, 1160], "527525": [1054, 1160], "57": [1057, 1160, 1168], "frequent": [1061, 1062, 1160], "mutat": [1062, 1160], "2246e": [1071, 1134, 1160], "stringnamespac": 1078, "orld": 1112, "6331e16": [1134, 1160], "int64arrai": [1136, 1160], "a_2": [1137, 1160], "a_3": [1137, 1160], "s_from_str_repr": [1139, 1160], "zero_copy_onli": [1141, 1160], "writabl": [1141, 1160], "immut": [1141, 1160], "127": [1147, 1160], "seriesview": [1150, 1160], "arraylik": 1160, "dtype_if_empti": 1160, "position": 1160, "scenario": 1160, "chunk_length": 1160, "333": 1160, "get_chunk": 1160, "has_valid": 1160, "hist": 1160, "is_boolean": 1160, "is_float": 1160, "is_integ": 1160, "is_numer": [1160, 1168], "is_sort": 1160, "is_tempor": 1160, "is_utf8": 1160, "new_from_index": 1160, "set_at_idx": 1160, "two_a": 1167, "__enter__": 1167, "__exit__": 1167, "exc_typ": 1167, "baseexcept": 1167, "exc_val": 1167, "exc_tb": 1167, "tracebacktyp": 1167, "primari": 1168, "guid": 1168, "machin": 1168, "xdist": 1168, "hardwar": 1168, "setup": 1168, "sec": 1168, "numeric_dtyp": 1168, "null_probabililti": 1168, "test_numer": 1168, "col0": 1168, "col4": 1168, "29096": 1168, "485": 1168, "2147483647": 1168, "8257e14": 1168, "7508": 1168, "37338": 1168, "7264": 1168, "321": 1168, "16996": 1168, "121": 1168, "361": 1168, "63204": 1168, "1443e235": 1168, "conform": 1168, "ascii_lett": 1168, "id_char": 1168, "alphabet": 1168, "price": 1168, "min_valu": 1168, "max_valu": 1168, "test_price_calcul": 1168, "a101": 1168, "8nin": 1168, "qhoo": 1168, "714": 1168, "544": 1168, "i0e0": 1168, "0000": 1168, "test_miscellan": 1168, "235": 1168, "87": 1168, "186": 1168, "174": 1168, "179": 1168, "213": 1168, "221": 1168, "86": 1168, "255": 1168}, "objects": {"polars": [[2, 0, 1, "", "Array"], [3, 0, 1, "", "Binary"], [4, 0, 1, "", "Boolean"], [5, 0, 1, "", "Categorical"], [40, 0, 1, "", "DataType"], [41, 0, 1, "", "Date"], [42, 0, 1, "", "Datetime"], [43, 0, 1, "", "Decimal"], [44, 0, 1, "", "Duration"], [45, 0, 1, "", "Float32"], [46, 0, 1, "", "Float64"], [47, 0, 1, "", "Int16"], [48, 0, 1, "", "Int32"], [49, 0, 1, "", "Int64"], [50, 0, 1, "", "Int8"], [54, 0, 1, "", "List"], [55, 0, 1, "", "Null"], [56, 0, 1, "", "Object"], [1167, 0, 1, "", "SQLContext"], [63, 0, 1, "", "StringCache"], [64, 0, 1, "", "Struct"], [65, 0, 1, "", "Time"], [66, 0, 1, "", "UInt16"], [67, 0, 1, "", "UInt32"], [68, 0, 1, "", "UInt64"], [69, 0, 1, "", "UInt8"], [70, 0, 1, "", "Unknown"], [71, 0, 1, "", "Utf8"], [72, 4, 1, "", "align_frames"], [626, 4, 1, "", "all"], [627, 4, 1, "", "all_horizontal"], [628, 4, 1, "", "any"], [629, 4, 1, "", "any_horizontal"], [630, 4, 1, "", "apply"], [631, 4, 1, "", "approx_n_unique"], [632, 4, 1, "", "arange"], [633, 4, 1, "", "arctan2"], [634, 4, 1, "", "arctan2d"], [635, 4, 1, "", "arg_sort_by"], [636, 4, 1, "", "arg_where"], [637, 4, 1, "", "avg"], [77, 4, 1, "", "build_info"], [638, 4, 1, "", "coalesce"], [78, 4, 1, "", "collect_all"], [79, 4, 1, "", "collect_all_async"], [80, 4, 1, "", "concat"], [639, 4, 1, "", "concat_list"], [640, 4, 1, "", "concat_str"], [641, 4, 1, "", "corr"], [642, 4, 1, "", "count"], [643, 4, 1, "", "cov"], [644, 4, 1, "", "cumfold"], [645, 4, 1, "", "cumreduce"], [646, 4, 1, "", "cumsum"], [647, 4, 1, "", "cumsum_horizontal"], [648, 4, 1, "", "date"], [649, 4, 1, "", "date_range"], [650, 4, 1, "", "date_ranges"], [651, 4, 1, "", "datetime"], [652, 4, 1, "", "datetime_range"], [653, 4, 1, "", "datetime_ranges"], [81, 4, 1, "", "disable_string_cache"], [654, 4, 1, "", "duration"], [655, 4, 1, "", "element"], [82, 4, 1, "", "enable_string_cache"], [656, 4, 1, "", "exclude"], [657, 4, 1, "", "first"], [658, 4, 1, "", "fold"], [659, 4, 1, "", "format"], [97, 4, 1, "", "from_arrow"], [98, 4, 1, "", "from_dataframe"], [99, 4, 1, "", "from_dict"], [100, 4, 1, "", "from_dicts"], [660, 4, 1, "", "from_epoch"], [101, 4, 1, "", "from_numpy"], [102, 4, 1, "", "from_pandas"], [103, 4, 1, "", "from_records"], [104, 4, 1, "", "from_repr"], [105, 4, 1, "", "get_index_type"], [661, 4, 1, "", "groups"], [662, 4, 1, "", "head"], [663, 4, 1, "", "implode"], [664, 4, 1, "", "int_range"], [665, 4, 1, "", "int_ranges"], [666, 4, 1, "", "last"], [667, 4, 1, "", "lit"], [668, 4, 1, "", "map"], [669, 4, 1, "", "map_batches"], [670, 4, 1, "", "map_groups"], [671, 4, 1, "", "max"], [672, 4, 1, "", "max_horizontal"], [673, 4, 1, "", "mean"], [674, 4, 1, "", "median"], [675, 4, 1, "", "min"], [676, 4, 1, "", "min_horizontal"], [677, 4, 1, "", "n_unique"], [678, 4, 1, "", "ones"], [679, 4, 1, "", "quantile"], [107, 4, 1, "", "read_avro"], [108, 4, 1, "", "read_csv"], [109, 4, 1, "", "read_csv_batched"], [110, 4, 1, "", "read_database"], [111, 4, 1, "", "read_database_uri"], [112, 4, 1, "", "read_delta"], [113, 4, 1, "", "read_excel"], [114, 4, 1, "", "read_ipc"], [115, 4, 1, "", "read_ipc_schema"], [116, 4, 1, "", "read_ipc_stream"], [117, 4, 1, "", "read_json"], [118, 4, 1, "", "read_ndjson"], [119, 4, 1, "", "read_ods"], [120, 4, 1, "", "read_parquet"], [121, 4, 1, "", "read_parquet_schema"], [680, 4, 1, "", "reduce"], [681, 4, 1, "", "repeat"], [682, 4, 1, "", "rolling_corr"], [683, 4, 1, "", "rolling_cov"], [122, 4, 1, "", "scan_csv"], [123, 4, 1, "", "scan_delta"], [124, 4, 1, "", "scan_iceberg"], [125, 4, 1, "", "scan_ipc"], [126, 4, 1, "", "scan_ndjson"], [127, 4, 1, "", "scan_parquet"], [128, 4, 1, "", "scan_pyarrow_dataset"], [684, 4, 1, "", "select"], [819, 6, 0, "-", "selectors"], [129, 4, 1, "", "set_random_seed"], [130, 4, 1, "", "show_versions"], [685, 4, 1, "", "sql_expr"], [686, 4, 1, "", "std"], [687, 4, 1, "", "struct"], [688, 4, 1, "", "sum"], [689, 4, 1, "", "sum_horizontal"], [690, 4, 1, "", "tail"], [142, 4, 1, "", "threadpool_size"], [691, 4, 1, "", "time"], [692, 4, 1, "", "time_range"], [693, 4, 1, "", "time_ranges"], [143, 4, 1, "", "using_string_cache"], [694, 4, 1, "", "var"], [695, 4, 1, "", "when"], [696, 4, 1, "", "zeros"]], "polars.Array": [[2, 1, 1, "", "__init__"]], "polars.Binary": [[3, 1, 1, "", "__init__"]], "polars.Boolean": [[4, 1, 1, "", "__init__"]], "polars.Categorical": [[5, 1, 1, "", "__init__"]], "polars.Config": [[6, 1, 1, "", "activate_decimals"], [7, 1, 1, "", "load"], [8, 1, 1, "", "load_from_file"], [9, 1, 1, "", "restore_defaults"], [10, 1, 1, "", "save"], [11, 1, 1, "", "save_to_file"], [12, 1, 1, "", "set_ascii_tables"], [13, 1, 1, "", "set_fmt_float"], [14, 1, 1, "", "set_fmt_str_lengths"], [15, 1, 1, "", "set_fmt_table_cell_list_len"], [16, 1, 1, "", "set_streaming_chunk_size"], [17, 1, 1, "", "set_tbl_cell_alignment"], [18, 1, 1, "", "set_tbl_cols"], [19, 1, 1, "", "set_tbl_column_data_type_inline"], [20, 1, 1, "", "set_tbl_dataframe_shape_below"], [21, 1, 1, "", "set_tbl_formatting"], [22, 1, 1, "", "set_tbl_hide_column_data_types"], [23, 1, 1, "", "set_tbl_hide_column_names"], [24, 1, 1, "", "set_tbl_hide_dataframe_shape"], [25, 1, 1, "", "set_tbl_hide_dtype_separator"], [26, 1, 1, "", "set_tbl_rows"], [27, 1, 1, "", "set_tbl_width_chars"], [28, 1, 1, "", "set_verbose"], [29, 1, 1, "", "state"]], "polars.DataFrame": [[146, 1, 1, "", "__dataframe__"], [147, 1, 1, "", "apply"], [148, 1, 1, "", "approx_n_unique"], [149, 1, 1, "", "approx_unique"], [150, 1, 1, "", "bottom_k"], [151, 1, 1, "", "cast"], [152, 1, 1, "", "clear"], [153, 1, 1, "", "clone"], [154, 2, 1, "", "columns"], [155, 1, 1, "", "corr"], [156, 1, 1, "", "describe"], [157, 1, 1, "", "drop"], [158, 1, 1, "", "drop_in_place"], [159, 1, 1, "", "drop_nulls"], [160, 2, 1, "", "dtypes"], [161, 1, 1, "", "estimated_size"], [162, 1, 1, "", "explode"], [163, 1, 1, "", "extend"], [164, 1, 1, "", "fill_nan"], [165, 1, 1, "", "fill_null"], [166, 1, 1, "", "filter"], [167, 1, 1, "", "find_idx_by_name"], [168, 2, 1, "", "flags"], [169, 1, 1, "", "fold"], [170, 1, 1, "", "frame_equal"], [171, 1, 1, "", "get_column"], [172, 1, 1, "", "get_columns"], [173, 1, 1, "", "glimpse"], [174, 1, 1, "", "group_by"], [175, 1, 1, "", "group_by_dynamic"], [176, 1, 1, "", "group_by_rolling"], [177, 1, 1, "", "groupby"], [178, 1, 1, "", "groupby_dynamic"], [179, 1, 1, "", "groupby_rolling"], [180, 1, 1, "", "hash_rows"], [181, 1, 1, "", "head"], [182, 2, 1, "", "height"], [183, 1, 1, "", "hstack"], [184, 1, 1, "", "insert_at_idx"], [185, 1, 1, "", "interpolate"], [186, 1, 1, "", "is_duplicated"], [187, 1, 1, "", "is_empty"], [188, 1, 1, "", "is_unique"], [189, 1, 1, "", "item"], [190, 1, 1, "", "iter_rows"], [191, 1, 1, "", "iter_slices"], [192, 1, 1, "", "join"], [193, 1, 1, "", "join_asof"], [194, 1, 1, "", "lazy"], [195, 1, 1, "", "limit"], [196, 1, 1, "", "map_rows"], [197, 1, 1, "", "max"], [198, 1, 1, "", "mean"], [199, 1, 1, "", "median"], [200, 1, 1, "", "melt"], [201, 1, 1, "", "merge_sorted"], [202, 1, 1, "", "min"], [203, 1, 1, "", "n_chunks"], [204, 1, 1, "", "n_unique"], [205, 1, 1, "", "null_count"], [206, 1, 1, "", "partition_by"], [207, 1, 1, "", "pipe"], [208, 1, 1, "", "pivot"], [209, 1, 1, "", "product"], [210, 1, 1, "", "quantile"], [211, 1, 1, "", "rechunk"], [212, 1, 1, "", "rename"], [213, 1, 1, "", "replace"], [214, 1, 1, "", "replace_at_idx"], [215, 1, 1, "", "reverse"], [216, 1, 1, "", "rolling"], [217, 1, 1, "", "row"], [218, 1, 1, "", "rows"], [219, 1, 1, "", "rows_by_key"], [220, 1, 1, "", "sample"], [221, 2, 1, "", "schema"], [222, 1, 1, "", "select"], [223, 1, 1, "", "select_seq"], [224, 1, 1, "", "set_sorted"], [225, 2, 1, "", "shape"], [226, 1, 1, "", "shift"], [227, 1, 1, "", "shift_and_fill"], [228, 1, 1, "", "shrink_to_fit"], [229, 1, 1, "", "slice"], [230, 1, 1, "", "sort"], [231, 1, 1, "", "std"], [232, 1, 1, "", "sum"], [233, 1, 1, "", "tail"], [234, 1, 1, "", "take_every"], [235, 1, 1, "", "to_arrow"], [236, 1, 1, "", "to_dict"], [237, 1, 1, "", "to_dicts"], [238, 1, 1, "", "to_dummies"], [239, 1, 1, "", "to_init_repr"], [240, 1, 1, "", "to_numpy"], [241, 1, 1, "", "to_pandas"], [242, 1, 1, "", "to_series"], [243, 1, 1, "", "to_struct"], [244, 1, 1, "", "top_k"], [245, 1, 1, "", "transpose"], [246, 1, 1, "", "unique"], [247, 1, 1, "", "unnest"], [248, 1, 1, "", "unstack"], [249, 1, 1, "", "update"], [250, 1, 1, "", "upsample"], [251, 1, 1, "", "var"], [252, 1, 1, "", "vstack"], [253, 2, 1, "", "width"], [254, 1, 1, "", "with_columns"], [255, 1, 1, "", "with_columns_seq"], [256, 1, 1, "", "with_row_count"], [30, 1, 1, "", "write_avro"], [31, 1, 1, "", "write_csv"], [32, 1, 1, "", "write_database"], [33, 1, 1, "", "write_delta"], [34, 1, 1, "", "write_excel"], [35, 1, 1, "", "write_ipc"], [36, 1, 1, "", "write_ipc_stream"], [37, 1, 1, "", "write_json"], [38, 1, 1, "", "write_ndjson"], [39, 1, 1, "", "write_parquet"]], "polars.DataType": [[40, 1, 1, "", "__init__"]], "polars.Date": [[41, 1, 1, "", "__init__"]], "polars.Datetime": [[42, 1, 1, "", "__init__"]], "polars.Decimal": [[43, 1, 1, "", "__init__"]], "polars.Duration": [[44, 1, 1, "", "__init__"]], "polars.Expr": [[285, 1, 1, "", "abs"], [286, 1, 1, "", "add"], [287, 1, 1, "", "agg_groups"], [288, 1, 1, "", "alias"], [289, 1, 1, "", "all"], [290, 1, 1, "", "and_"], [291, 1, 1, "", "any"], [292, 1, 1, "", "append"], [293, 1, 1, "", "apply"], [294, 1, 1, "", "approx_n_unique"], [295, 1, 1, "", "arccos"], [296, 1, 1, "", "arccosh"], [297, 1, 1, "", "arcsin"], [298, 1, 1, "", "arcsinh"], [299, 1, 1, "", "arctan"], [300, 1, 1, "", "arctanh"], [301, 1, 1, "", "arg_max"], [302, 1, 1, "", "arg_min"], [303, 1, 1, "", "arg_sort"], [304, 1, 1, "", "arg_true"], [305, 1, 1, "", "arg_unique"], [310, 1, 1, "", "backward_fill"], [316, 1, 1, "", "bottom_k"], [317, 1, 1, "", "cache"], [318, 1, 1, "", "cast"], [321, 1, 1, "", "cbrt"], [322, 1, 1, "", "ceil"], [323, 1, 1, "", "clip"], [324, 1, 1, "", "clip_max"], [325, 1, 1, "", "clip_min"], [326, 1, 1, "", "cos"], [327, 1, 1, "", "cosh"], [328, 1, 1, "", "cot"], [329, 1, 1, "", "count"], [330, 1, 1, "", "cumcount"], [331, 1, 1, "", "cummax"], [332, 1, 1, "", "cummin"], [333, 1, 1, "", "cumprod"], [334, 1, 1, "", "cumsum"], [335, 1, 1, "", "cumulative_eval"], [336, 1, 1, "", "cut"], [337, 1, 1, "", "degrees"], [338, 1, 1, "", "diff"], [339, 1, 1, "", "dot"], [340, 1, 1, "", "drop_nans"], [341, 1, 1, "", "drop_nulls"], [383, 1, 1, "", "entropy"], [384, 1, 1, "", "eq"], [385, 1, 1, "", "eq_missing"], [386, 1, 1, "", "ewm_mean"], [387, 1, 1, "", "ewm_std"], [388, 1, 1, "", "ewm_var"], [389, 1, 1, "", "exclude"], [390, 1, 1, "", "exp"], [391, 1, 1, "", "explode"], [392, 1, 1, "", "extend_constant"], [393, 1, 1, "", "fill_nan"], [394, 1, 1, "", "fill_null"], [395, 1, 1, "", "filter"], [396, 1, 1, "", "first"], [397, 1, 1, "", "flatten"], [398, 1, 1, "", "floor"], [399, 1, 1, "", "floordiv"], [400, 1, 1, "", "forward_fill"], [401, 1, 1, "", "from_json"], [402, 1, 1, "", "ge"], [403, 1, 1, "", "get"], [404, 1, 1, "", "gt"], [405, 1, 1, "", "hash"], [406, 1, 1, "", "head"], [407, 1, 1, "", "implode"], [408, 1, 1, "", "inspect"], [409, 1, 1, "", "interpolate"], [410, 1, 1, "", "is_between"], [411, 1, 1, "", "is_duplicated"], [412, 1, 1, "", "is_finite"], [413, 1, 1, "", "is_first"], [414, 1, 1, "", "is_first_distinct"], [415, 1, 1, "", "is_in"], [416, 1, 1, "", "is_infinite"], [417, 1, 1, "", "is_last"], [418, 1, 1, "", "is_last_distinct"], [419, 1, 1, "", "is_nan"], [420, 1, 1, "", "is_not"], [421, 1, 1, "", "is_not_nan"], [422, 1, 1, "", "is_not_null"], [423, 1, 1, "", "is_null"], [424, 1, 1, "", "is_unique"], [425, 1, 1, "", "keep_name"], [426, 1, 1, "", "kurtosis"], [427, 1, 1, "", "last"], [428, 1, 1, "", "le"], [429, 1, 1, "", "len"], [430, 1, 1, "", "limit"], [471, 1, 1, "", "log"], [472, 1, 1, "", "log10"], [473, 1, 1, "", "log1p"], [474, 1, 1, "", "lower_bound"], [475, 1, 1, "", "lt"], [476, 1, 1, "", "map"], [477, 1, 1, "", "map_alias"], [478, 1, 1, "", "map_batches"], [479, 1, 1, "", "map_dict"], [480, 1, 1, "", "map_elements"], [481, 1, 1, "", "max"], [482, 1, 1, "", "mean"], [483, 1, 1, "", "median"], [494, 1, 1, "", "min"], [495, 1, 1, "", "mod"], [496, 1, 1, "", "mode"], [497, 1, 1, "", "mul"], [498, 1, 1, "", "n_unique"], [505, 1, 1, "", "nan_max"], [506, 1, 1, "", "nan_min"], [507, 1, 1, "", "ne"], [508, 1, 1, "", "ne_missing"], [509, 1, 1, "", "not_"], [510, 1, 1, "", "null_count"], [511, 1, 1, "", "or_"], [512, 1, 1, "", "over"], [513, 1, 1, "", "pct_change"], [514, 1, 1, "", "peak_max"], [515, 1, 1, "", "peak_min"], [516, 1, 1, "", "pipe"], [517, 1, 1, "", "pow"], [518, 1, 1, "", "prefix"], [519, 1, 1, "", "product"], [520, 1, 1, "", "qcut"], [521, 1, 1, "", "quantile"], [522, 1, 1, "", "radians"], [523, 1, 1, "", "rank"], [524, 1, 1, "", "rechunk"], [525, 1, 1, "", "reinterpret"], [526, 1, 1, "", "repeat_by"], [527, 1, 1, "", "reshape"], [528, 1, 1, "", "reverse"], [529, 1, 1, "", "rle"], [530, 1, 1, "", "rle_id"], [531, 1, 1, "", "rolling"], [532, 1, 1, "", "rolling_apply"], [533, 1, 1, "", "rolling_map"], [534, 1, 1, "", "rolling_max"], [535, 1, 1, "", "rolling_mean"], [536, 1, 1, "", "rolling_median"], [537, 1, 1, "", "rolling_min"], [538, 1, 1, "", "rolling_quantile"], [539, 1, 1, "", "rolling_skew"], [540, 1, 1, "", "rolling_std"], [541, 1, 1, "", "rolling_sum"], [542, 1, 1, "", "rolling_var"], [543, 1, 1, "", "round"], [544, 1, 1, "", "sample"], [545, 1, 1, "", "search_sorted"], [546, 1, 1, "", "set_sorted"], [547, 1, 1, "", "shift"], [548, 1, 1, "", "shift_and_fill"], [549, 1, 1, "", "shrink_dtype"], [550, 1, 1, "", "shuffle"], [551, 1, 1, "", "sign"], [552, 1, 1, "", "sin"], [553, 1, 1, "", "sinh"], [554, 1, 1, "", "skew"], [555, 1, 1, "", "slice"], [556, 1, 1, "", "sort"], [557, 1, 1, "", "sort_by"], [558, 1, 1, "", "sqrt"], [559, 1, 1, "", "std"], [608, 1, 1, "", "sub"], [609, 1, 1, "", "suffix"], [610, 1, 1, "", "sum"], [611, 1, 1, "", "tail"], [612, 1, 1, "", "take"], [613, 1, 1, "", "take_every"], [614, 1, 1, "", "tan"], [615, 1, 1, "", "tanh"], [616, 1, 1, "", "to_physical"], [617, 1, 1, "", "top_k"], [618, 1, 1, "", "truediv"], [619, 1, 1, "", "unique"], [620, 1, 1, "", "unique_counts"], [621, 1, 1, "", "upper_bound"], [622, 1, 1, "", "value_counts"], [623, 1, 1, "", "var"], [624, 1, 1, "", "where"], [625, 1, 1, "", "xor"]], "polars.Expr.arr": [[306, 1, 1, "", "max"], [307, 1, 1, "", "min"], [308, 1, 1, "", "sum"], [309, 1, 1, "", "unique"]], "polars.Expr.bin": [[311, 1, 1, "", "contains"], [312, 1, 1, "", "decode"], [313, 1, 1, "", "encode"], [314, 1, 1, "", "ends_with"], [315, 1, 1, "", "starts_with"]], "polars.Expr.cat": [[319, 1, 1, "", "get_categories"], [320, 1, 1, "", "set_ordering"]], "polars.Expr.dt": [[342, 1, 1, "", "base_utc_offset"], [343, 1, 1, "", "cast_time_unit"], [344, 1, 1, "", "combine"], [345, 1, 1, "", "convert_time_zone"], [346, 1, 1, "", "date"], [347, 1, 1, "", "datetime"], [348, 1, 1, "", "day"], [349, 1, 1, "", "days"], [350, 1, 1, "", "dst_offset"], [351, 1, 1, "", "epoch"], [352, 1, 1, "", "hour"], [353, 1, 1, "", "hours"], [354, 1, 1, "", "is_leap_year"], [355, 1, 1, "", "iso_year"], [356, 1, 1, "", "microsecond"], [357, 1, 1, "", "microseconds"], [358, 1, 1, "", "millisecond"], [359, 1, 1, "", "milliseconds"], [360, 1, 1, "", "minute"], [361, 1, 1, "", "minutes"], [362, 1, 1, "", "month"], [363, 1, 1, "", "month_end"], [364, 1, 1, "", "month_start"], [365, 1, 1, "", "nanosecond"], [366, 1, 1, "", "nanoseconds"], [367, 1, 1, "", "offset_by"], [368, 1, 1, "", "ordinal_day"], [369, 1, 1, "", "quarter"], [370, 1, 1, "", "replace_time_zone"], [371, 1, 1, "", "round"], [372, 1, 1, "", "second"], [373, 1, 1, "", "seconds"], [374, 1, 1, "", "strftime"], [375, 1, 1, "", "time"], [376, 1, 1, "", "timestamp"], [377, 1, 1, "", "to_string"], [378, 1, 1, "", "truncate"], [379, 1, 1, "", "week"], [380, 1, 1, "", "weekday"], [381, 1, 1, "", "with_time_unit"], [382, 1, 1, "", "year"]], "polars.Expr.list": [[431, 1, 1, "", "all"], [432, 1, 1, "", "any"], [433, 1, 1, "", "arg_max"], [434, 1, 1, "", "arg_min"], [435, 1, 1, "", "concat"], [436, 1, 1, "", "contains"], [437, 1, 1, "", "count_match"], [438, 1, 1, "", "count_matches"], [439, 1, 1, "", "diff"], [440, 1, 1, "", "difference"], [441, 1, 1, "", "drop_nulls"], [442, 1, 1, "", "eval"], [443, 1, 1, "", "explode"], [444, 1, 1, "", "first"], [445, 1, 1, "", "get"], [446, 1, 1, "", "head"], [447, 1, 1, "", "intersection"], [448, 1, 1, "", "join"], [449, 1, 1, "", "last"], [450, 1, 1, "", "len"], [451, 1, 1, "", "lengths"], [452, 1, 1, "", "max"], [453, 1, 1, "", "mean"], [454, 1, 1, "", "min"], [455, 1, 1, "", "reverse"], [456, 1, 1, "", "sample"], [457, 1, 1, "", "set_difference"], [458, 1, 1, "", "set_intersection"], [459, 1, 1, "", "set_symmetric_difference"], [460, 1, 1, "", "set_union"], [461, 1, 1, "", "shift"], [462, 1, 1, "", "slice"], [463, 1, 1, "", "sort"], [464, 1, 1, "", "sum"], [465, 1, 1, "", "symmetric_difference"], [466, 1, 1, "", "tail"], [467, 1, 1, "", "take"], [468, 1, 1, "", "to_struct"], [469, 1, 1, "", "union"], [470, 1, 1, "", "unique"]], "polars.Expr.meta": [[484, 1, 1, "", "eq"], [485, 1, 1, "", "has_multiple_outputs"], [486, 1, 1, "", "is_regex_projection"], [487, 1, 1, "", "ne"], [488, 1, 1, "", "output_name"], [489, 1, 1, "", "pop"], [490, 1, 1, "", "root_names"], [491, 1, 1, "", "tree_format"], [492, 1, 1, "", "undo_aliases"], [493, 1, 1, "", "write_json"]], "polars.Expr.name": [[499, 1, 1, "", "keep"], [500, 1, 1, "", "map"], [501, 1, 1, "", "prefix"], [502, 1, 1, "", "suffix"], [503, 1, 1, "", "to_lowercase"], [504, 1, 1, "", "to_uppercase"]], "polars.Expr.str": [[560, 1, 1, "", "concat"], [561, 1, 1, "", "contains"], [562, 1, 1, "", "count_match"], [563, 1, 1, "", "count_matches"], [564, 1, 1, "", "decode"], [565, 1, 1, "", "encode"], [566, 1, 1, "", "ends_with"], [567, 1, 1, "", "explode"], [568, 1, 1, "", "extract"], [569, 1, 1, "", "extract_all"], [570, 1, 1, "", "extract_groups"], [571, 1, 1, "", "json_extract"], [572, 1, 1, "", "json_path_match"], [573, 1, 1, "", "len_bytes"], [574, 1, 1, "", "len_chars"], [575, 1, 1, "", "lengths"], [576, 1, 1, "", "ljust"], [577, 1, 1, "", "lstrip"], [578, 1, 1, "", "n_chars"], [579, 1, 1, "", "pad_end"], [580, 1, 1, "", "pad_start"], [581, 1, 1, "", "parse_int"], [582, 1, 1, "", "replace"], [583, 1, 1, "", "replace_all"], [584, 1, 1, "", "rjust"], [585, 1, 1, "", "rstrip"], [586, 1, 1, "", "slice"], [587, 1, 1, "", "split"], [588, 1, 1, "", "split_exact"], [589, 1, 1, "", "splitn"], [590, 1, 1, "", "starts_with"], [591, 1, 1, "", "strip"], [592, 1, 1, "", "strip_chars"], [593, 1, 1, "", "strip_chars_end"], [594, 1, 1, "", "strip_chars_start"], [595, 1, 1, "", "strip_prefix"], [596, 1, 1, "", "strip_suffix"], [597, 1, 1, "", "strptime"], [598, 1, 1, "", "to_date"], [599, 1, 1, "", "to_datetime"], [600, 1, 1, "", "to_decimal"], [601, 1, 1, "", "to_lowercase"], [602, 1, 1, "", "to_time"], [603, 1, 1, "", "to_titlecase"], [604, 1, 1, "", "to_uppercase"], [605, 1, 1, "", "zfill"]], "polars.Expr.struct": [[606, 1, 1, "", "field"], [607, 1, 1, "", "rename_fields"]], "polars.Float32": [[45, 1, 1, "", "__init__"]], "polars.Float64": [[46, 1, 1, "", "__init__"]], "polars.Int16": [[47, 1, 1, "", "__init__"]], "polars.Int32": [[48, 1, 1, "", "__init__"]], "polars.Int64": [[49, 1, 1, "", "__init__"]], "polars.Int8": [[50, 1, 1, "", "__init__"]], "polars.LazyFrame": [[720, 1, 1, "", "approx_n_unique"], [721, 1, 1, "", "approx_unique"], [722, 1, 1, "", "bottom_k"], [723, 1, 1, "", "cache"], [724, 1, 1, "", "cast"], [725, 1, 1, "", "clear"], [726, 1, 1, "", "clone"], [727, 1, 1, "", "collect"], [728, 1, 1, "", "collect_async"], [729, 2, 1, "", "columns"], [730, 1, 1, "", "deserialize"], [731, 1, 1, "", "drop"], [732, 1, 1, "", "drop_nulls"], [733, 2, 1, "", "dtypes"], [734, 1, 1, "", "explain"], [735, 1, 1, "", "explode"], [736, 1, 1, "", "fetch"], [737, 1, 1, "", "fill_nan"], [738, 1, 1, "", "fill_null"], [739, 1, 1, "", "filter"], [740, 1, 1, "", "first"], [741, 1, 1, "", "from_json"], [742, 1, 1, "", "group_by"], [743, 1, 1, "", "group_by_dynamic"], [744, 1, 1, "", "group_by_rolling"], [745, 1, 1, "", "groupby"], [746, 1, 1, "", "groupby_dynamic"], [747, 1, 1, "", "groupby_rolling"], [748, 1, 1, "", "head"], [749, 1, 1, "", "inspect"], [750, 1, 1, "", "interpolate"], [751, 1, 1, "", "join"], [752, 1, 1, "", "join_asof"], [753, 1, 1, "", "last"], [754, 1, 1, "", "lazy"], [755, 1, 1, "", "limit"], [756, 1, 1, "", "map"], [757, 1, 1, "", "map_batches"], [758, 1, 1, "", "max"], [759, 1, 1, "", "mean"], [760, 1, 1, "", "median"], [761, 1, 1, "", "melt"], [762, 1, 1, "", "merge_sorted"], [763, 1, 1, "", "min"], [764, 1, 1, "", "null_count"], [765, 1, 1, "", "pipe"], [766, 1, 1, "", "profile"], [767, 1, 1, "", "quantile"], [768, 1, 1, "", "read_json"], [769, 1, 1, "", "rename"], [770, 1, 1, "", "reverse"], [771, 1, 1, "", "rolling"], [772, 2, 1, "", "schema"], [773, 1, 1, "", "select"], [774, 1, 1, "", "select_seq"], [775, 1, 1, "", "serialize"], [776, 1, 1, "", "set_sorted"], [777, 1, 1, "", "shift"], [778, 1, 1, "", "shift_and_fill"], [779, 1, 1, "", "show_graph"], [51, 1, 1, "", "sink_csv"], [52, 1, 1, "", "sink_ipc"], [53, 1, 1, "", "sink_parquet"], [780, 1, 1, "", "slice"], [781, 1, 1, "", "sort"], [782, 1, 1, "", "std"], [783, 1, 1, "", "sum"], [784, 1, 1, "", "tail"], [785, 1, 1, "", "take_every"], [786, 1, 1, "", "top_k"], [787, 1, 1, "", "unique"], [788, 1, 1, "", "unnest"], [789, 1, 1, "", "update"], [790, 1, 1, "", "var"], [791, 2, 1, "", "width"], [792, 1, 1, "", "with_columns"], [793, 1, 1, "", "with_columns_seq"], [794, 1, 1, "", "with_context"], [795, 1, 1, "", "with_row_count"], [796, 1, 1, "", "write_json"]], "polars.List": [[54, 1, 1, "", "__init__"]], "polars.Null": [[55, 1, 1, "", "__init__"]], "polars.Object": [[56, 1, 1, "", "__init__"]], "polars.SQLContext": [[1167, 1, 1, "", "__enter__"], [1167, 1, 1, "", "__exit__"], [1167, 1, 1, "", "__init__"], [57, 1, 1, "", "execute"], [58, 1, 1, "", "register"], [59, 1, 1, "", "register_globals"], [60, 1, 1, "", "register_many"], [61, 1, 1, "", "tables"], [62, 1, 1, "", "unregister"]], "polars.Series": [[821, 1, 1, "", "abs"], [822, 1, 1, "", "alias"], [823, 1, 1, "", "all"], [824, 1, 1, "", "any"], [825, 1, 1, "", "append"], [826, 1, 1, "", "apply"], [827, 1, 1, "", "arccos"], [828, 1, 1, "", "arccosh"], [829, 1, 1, "", "arcsin"], [830, 1, 1, "", "arcsinh"], [831, 1, 1, "", "arctan"], [832, 1, 1, "", "arctanh"], [833, 1, 1, "", "arg_max"], [834, 1, 1, "", "arg_min"], [835, 1, 1, "", "arg_sort"], [836, 1, 1, "", "arg_true"], [837, 1, 1, "", "arg_unique"], [847, 1, 1, "", "bottom_k"], [848, 1, 1, "", "cast"], [849, 3, 1, "", "cat"], [855, 1, 1, "", "cbrt"], [856, 1, 1, "", "ceil"], [857, 1, 1, "", "chunk_lengths"], [858, 1, 1, "", "clear"], [859, 1, 1, "", "clip"], [860, 1, 1, "", "clip_max"], [861, 1, 1, "", "clip_min"], [862, 1, 1, "", "clone"], [863, 1, 1, "", "cos"], [864, 1, 1, "", "cosh"], [865, 1, 1, "", "cot"], [866, 1, 1, "", "cummax"], [867, 1, 1, "", "cummin"], [868, 1, 1, "", "cumprod"], [869, 1, 1, "", "cumsum"], [870, 1, 1, "", "cumulative_eval"], [871, 1, 1, "", "cut"], [872, 1, 1, "", "describe"], [873, 1, 1, "", "diff"], [874, 1, 1, "", "dot"], [875, 1, 1, "", "drop_nans"], [876, 1, 1, "", "drop_nulls"], [877, 3, 1, "", "dt"], [923, 3, 1, "", "dtype"], [924, 1, 1, "", "entropy"], [925, 1, 1, "", "estimated_size"], [926, 1, 1, "", "ewm_mean"], [927, 1, 1, "", "ewm_std"], [928, 1, 1, "", "ewm_var"], [929, 1, 1, "", "exp"], [930, 1, 1, "", "explode"], [931, 1, 1, "", "extend"], [932, 1, 1, "", "extend_constant"], [933, 1, 1, "", "fill_nan"], [934, 1, 1, "", "fill_null"], [935, 1, 1, "", "filter"], [936, 3, 1, "", "flags"], [937, 1, 1, "", "floor"], [938, 1, 1, "", "get_chunks"], [939, 1, 1, "", "has_validity"], [940, 1, 1, "", "hash"], [941, 1, 1, "", "head"], [942, 1, 1, "", "hist"], [943, 1, 1, "", "implode"], [944, 3, 1, "", "inner_dtype"], [945, 1, 1, "", "interpolate"], [946, 1, 1, "", "is_between"], [947, 1, 1, "", "is_boolean"], [948, 1, 1, "", "is_duplicated"], [949, 1, 1, "", "is_empty"], [950, 1, 1, "", "is_finite"], [951, 1, 1, "", "is_first"], [952, 1, 1, "", "is_first_distinct"], [953, 1, 1, "", "is_float"], [954, 1, 1, "", "is_in"], [955, 1, 1, "", "is_infinite"], [956, 1, 1, "", "is_integer"], [957, 1, 1, "", "is_last"], [958, 1, 1, "", "is_last_distinct"], [959, 1, 1, "", "is_nan"], [960, 1, 1, "", "is_not_nan"], [961, 1, 1, "", "is_not_null"], [962, 1, 1, "", "is_null"], [963, 1, 1, "", "is_numeric"], [964, 1, 1, "", "is_sorted"], [965, 1, 1, "", "is_temporal"], [966, 1, 1, "", "is_unique"], [967, 1, 1, "", "is_utf8"], [968, 1, 1, "", "item"], [969, 1, 1, "", "kurtosis"], [970, 1, 1, "", "len"], [971, 1, 1, "", "limit"], [972, 3, 1, "", "list"], [1013, 1, 1, "", "log"], [1014, 1, 1, "", "log10"], [1015, 1, 1, "", "log1p"], [1016, 1, 1, "", "lower_bound"], [1017, 1, 1, "", "map_dict"], [1018, 1, 1, "", "map_elements"], [1019, 1, 1, "", "max"], [1020, 1, 1, "", "mean"], [1021, 1, 1, "", "median"], [1022, 1, 1, "", "min"], [1023, 1, 1, "", "mode"], [1024, 1, 1, "", "n_chunks"], [1025, 1, 1, "", "n_unique"], [1026, 3, 1, "", "name"], [1027, 1, 1, "", "nan_max"], [1028, 1, 1, "", "nan_min"], [1029, 1, 1, "", "new_from_index"], [1030, 1, 1, "", "not_"], [1031, 1, 1, "", "null_count"], [1032, 1, 1, "", "pct_change"], [1033, 1, 1, "", "peak_max"], [1034, 1, 1, "", "peak_min"], [1035, 1, 1, "", "product"], [1036, 1, 1, "", "qcut"], [1037, 1, 1, "", "quantile"], [1038, 1, 1, "", "rank"], [1039, 1, 1, "", "rechunk"], [1040, 1, 1, "", "reinterpret"], [1041, 1, 1, "", "rename"], [1042, 1, 1, "", "reshape"], [1043, 1, 1, "", "reverse"], [1044, 1, 1, "", "rle"], [1045, 1, 1, "", "rle_id"], [1046, 1, 1, "", "rolling_apply"], [1047, 1, 1, "", "rolling_map"], [1048, 1, 1, "", "rolling_max"], [1049, 1, 1, "", "rolling_mean"], [1050, 1, 1, "", "rolling_median"], [1051, 1, 1, "", "rolling_min"], [1052, 1, 1, "", "rolling_quantile"], [1053, 1, 1, "", "rolling_skew"], [1054, 1, 1, "", "rolling_std"], [1055, 1, 1, "", "rolling_sum"], [1056, 1, 1, "", "rolling_var"], [1057, 1, 1, "", "round"], [1058, 1, 1, "", "sample"], [1059, 1, 1, "", "search_sorted"], [1060, 1, 1, "", "series_equal"], [1061, 1, 1, "", "set"], [1062, 1, 1, "", "set_at_idx"], [1063, 1, 1, "", "set_sorted"], [1064, 3, 1, "", "shape"], [1065, 1, 1, "", "shift"], [1066, 1, 1, "", "shift_and_fill"], [1067, 1, 1, "", "shrink_dtype"], [1068, 1, 1, "", "shrink_to_fit"], [1069, 1, 1, "", "shuffle"], [1070, 1, 1, "", "sign"], [1071, 1, 1, "", "sin"], [1072, 1, 1, "", "sinh"], [1073, 1, 1, "", "skew"], [1074, 1, 1, "", "slice"], [1075, 1, 1, "", "sort"], [1076, 1, 1, "", "sqrt"], [1077, 1, 1, "", "std"], [1078, 3, 1, "", "str"], [1130, 1, 1, "", "sum"], [1131, 1, 1, "", "tail"], [1132, 1, 1, "", "take"], [1133, 1, 1, "", "take_every"], [1134, 1, 1, "", "tan"], [1135, 1, 1, "", "tanh"], [1136, 1, 1, "", "to_arrow"], [1137, 1, 1, "", "to_dummies"], [1138, 1, 1, "", "to_frame"], [1139, 1, 1, "", "to_init_repr"], [1140, 1, 1, "", "to_list"], [1141, 1, 1, "", "to_numpy"], [1142, 1, 1, "", "to_pandas"], [1143, 1, 1, "", "to_physical"], [1144, 1, 1, "", "top_k"], [1145, 1, 1, "", "unique"], [1146, 1, 1, "", "unique_counts"], [1147, 1, 1, "", "upper_bound"], [1148, 1, 1, "", "value_counts"], [1149, 1, 1, "", "var"], [1150, 1, 1, "", "view"], [1151, 1, 1, "", "zip_with"]], "polars.Series.arr": [[838, 1, 1, "", "max"], [839, 1, 1, "", "min"], [840, 1, 1, "", "sum"], [841, 1, 1, "", "unique"]], "polars.Series.bin": [[842, 1, 1, "", "contains"], [843, 1, 1, "", "decode"], [844, 1, 1, "", "encode"], [845, 1, 1, "", "ends_with"], [846, 1, 1, "", "starts_with"]], "polars.Series.cat": [[850, 1, 1, "", "get_categories"], [851, 1, 1, "", "is_local"], [852, 1, 1, "", "set_ordering"], [853, 1, 1, "", "to_local"], [854, 1, 1, "", "uses_lexical_ordering"]], "polars.Series.dt": [[878, 1, 1, "", "base_utc_offset"], [879, 1, 1, "", "cast_time_unit"], [880, 1, 1, "", "combine"], [881, 1, 1, "", "convert_time_zone"], [882, 1, 1, "", "date"], [883, 1, 1, "", "datetime"], [884, 1, 1, "", "day"], [885, 1, 1, "", "days"], [886, 1, 1, "", "dst_offset"], [887, 1, 1, "", "epoch"], [888, 1, 1, "", "hour"], [889, 1, 1, "", "hours"], [890, 1, 1, "", "is_leap_year"], [891, 1, 1, "", "iso_year"], [892, 1, 1, "", "max"], [893, 1, 1, "", "mean"], [894, 1, 1, "", "median"], [895, 1, 1, "", "microsecond"], [896, 1, 1, "", "microseconds"], [897, 1, 1, "", "millisecond"], [898, 1, 1, "", "milliseconds"], [899, 1, 1, "", "min"], [900, 1, 1, "", "minute"], [901, 1, 1, "", "minutes"], [902, 1, 1, "", "month"], [903, 1, 1, "", "month_end"], [904, 1, 1, "", "month_start"], [905, 1, 1, "", "nanosecond"], [906, 1, 1, "", "nanoseconds"], [907, 1, 1, "", "offset_by"], [908, 1, 1, "", "ordinal_day"], [909, 1, 1, "", "quarter"], [910, 1, 1, "", "replace_time_zone"], [911, 1, 1, "", "round"], [912, 1, 1, "", "second"], [913, 1, 1, "", "seconds"], [914, 1, 1, "", "strftime"], [915, 1, 1, "", "time"], [916, 1, 1, "", "timestamp"], [917, 1, 1, "", "to_string"], [918, 1, 1, "", "truncate"], [919, 1, 1, "", "week"], [920, 1, 1, "", "weekday"], [921, 1, 1, "", "with_time_unit"], [922, 1, 1, "", "year"]], "polars.Series.list": [[973, 1, 1, "", "all"], [974, 1, 1, "", "any"], [975, 1, 1, "", "arg_max"], [976, 1, 1, "", "arg_min"], [977, 1, 1, "", "concat"], [978, 1, 1, "", "contains"], [979, 1, 1, "", "count_match"], [980, 1, 1, "", "count_matches"], [981, 1, 1, "", "diff"], [982, 1, 1, "", "difference"], [983, 1, 1, "", "drop_nulls"], [984, 1, 1, "", "eval"], [985, 1, 1, "", "explode"], [986, 1, 1, "", "first"], [987, 1, 1, "", "get"], [988, 1, 1, "", "head"], [989, 1, 1, "", "intersection"], [990, 1, 1, "", "join"], [991, 1, 1, "", "last"], [992, 1, 1, "", "len"], [993, 1, 1, "", "lengths"], [994, 1, 1, "", "max"], [995, 1, 1, "", "mean"], [996, 1, 1, "", "min"], [997, 1, 1, "", "reverse"], [998, 1, 1, "", "sample"], [999, 1, 1, "", "set_difference"], [1000, 1, 1, "", "set_intersection"], [1001, 1, 1, "", "set_symmetric_difference"], [1002, 1, 1, "", "set_union"], [1003, 1, 1, "", "shift"], [1004, 1, 1, "", "slice"], [1005, 1, 1, "", "sort"], [1006, 1, 1, "", "sum"], [1007, 1, 1, "", "symmetric_difference"], [1008, 1, 1, "", "tail"], [1009, 1, 1, "", "take"], [1010, 1, 1, "", "to_struct"], [1011, 1, 1, "", "union"], [1012, 1, 1, "", "unique"]], "polars.Series.str": [[1079, 1, 1, "", "concat"], [1080, 1, 1, "", "contains"], [1081, 1, 1, "", "count_match"], [1082, 1, 1, "", "count_matches"], [1083, 1, 1, "", "decode"], [1084, 1, 1, "", "encode"], [1085, 1, 1, "", "ends_with"], [1086, 1, 1, "", "explode"], [1087, 1, 1, "", "extract"], [1088, 1, 1, "", "extract_all"], [1089, 1, 1, "", "extract_groups"], [1090, 1, 1, "", "json_extract"], [1091, 1, 1, "", "json_path_match"], [1092, 1, 1, "", "len_bytes"], [1093, 1, 1, "", "len_chars"], [1094, 1, 1, "", "lengths"], [1095, 1, 1, "", "ljust"], [1096, 1, 1, "", "lstrip"], [1097, 1, 1, "", "n_chars"], [1098, 1, 1, "", "pad_end"], [1099, 1, 1, "", "pad_start"], [1100, 1, 1, "", "parse_int"], [1101, 1, 1, "", "replace"], [1102, 1, 1, "", "replace_all"], [1103, 1, 1, "", "rjust"], [1104, 1, 1, "", "rstrip"], [1105, 1, 1, "", "slice"], [1106, 1, 1, "", "split"], [1107, 1, 1, "", "split_exact"], [1108, 1, 1, "", "splitn"], [1109, 1, 1, "", "starts_with"], [1110, 1, 1, "", "strip"], [1111, 1, 1, "", "strip_chars"], [1112, 1, 1, "", "strip_chars_end"], [1113, 1, 1, "", "strip_chars_start"], [1114, 1, 1, "", "strip_prefix"], [1115, 1, 1, "", "strip_suffix"], [1116, 1, 1, "", "strptime"], [1117, 1, 1, "", "to_date"], [1118, 1, 1, "", "to_datetime"], [1119, 1, 1, "", "to_decimal"], [1120, 1, 1, "", "to_lowercase"], [1121, 1, 1, "", "to_time"], [1122, 1, 1, "", "to_titlecase"], [1123, 1, 1, "", "to_uppercase"], [1124, 1, 1, "", "zfill"]], "polars.Series.struct": [[1125, 1, 1, "", "field"], [1126, 3, 1, "", "fields"], [1127, 1, 1, "", "rename_fields"], [1128, 3, 1, "", "schema"], [1129, 1, 1, "", "unnest"]], "polars.StringCache": [[63, 1, 1, "", "__init__"]], "polars.Struct": [[64, 1, 1, "", "__init__"]], "polars.Time": [[65, 1, 1, "", "__init__"]], "polars.UInt16": [[66, 1, 1, "", "__init__"]], "polars.UInt32": [[67, 1, 1, "", "__init__"]], "polars.UInt64": [[68, 1, 1, "", "__init__"]], "polars.UInt8": [[69, 1, 1, "", "__init__"]], "polars.Unknown": [[70, 1, 1, "", "__init__"]], "polars.Utf8": [[71, 1, 1, "", "__init__"]], "polars.api": [[73, 4, 1, "", "register_dataframe_namespace"], [74, 4, 1, "", "register_expr_namespace"], [75, 4, 1, "", "register_lazyframe_namespace"], [76, 4, 1, "", "register_series_namespace"]], "polars.dataframe.group_by.GroupBy": [[257, 1, 1, "", "__iter__"], [258, 1, 1, "", "agg"], [259, 1, 1, "", "all"], [260, 1, 1, "", "apply"], [261, 1, 1, "", "count"], [262, 1, 1, "", "first"], [263, 1, 1, "", "head"], [264, 1, 1, "", "last"], [265, 1, 1, "", "map_groups"], [266, 1, 1, "", "max"], [267, 1, 1, "", "mean"], [268, 1, 1, "", "median"], [269, 1, 1, "", "min"], [270, 1, 1, "", "n_unique"], [271, 1, 1, "", "quantile"], [272, 1, 1, "", "sum"], [273, 1, 1, "", "tail"]], "polars.exceptions": [[83, 5, 1, "", "ArrowError"], [84, 5, 1, "", "ColumnNotFoundError"], [85, 5, 1, "", "ComputeError"], [86, 5, 1, "", "DuplicateError"], [87, 5, 1, "", "InvalidOperationError"], [88, 5, 1, "", "NoDataError"], [89, 5, 1, "", "NoRowsReturnedError"], [90, 5, 1, "", "PolarsPanicError"], [91, 5, 1, "", "RowsError"], [92, 5, 1, "", "SchemaError"], [93, 5, 1, "", "SchemaFieldNotFoundError"], [94, 5, 1, "", "ShapeError"], [95, 5, 1, "", "StructFieldNotFoundError"], [96, 5, 1, "", "TooManyRowsReturnedError"]], "polars.io.csv.batched_reader.BatchedCsvReader": [[106, 1, 1, "", "next_batches"]], "polars.lazyframe.group_by.LazyGroupBy": [[797, 1, 1, "", "agg"], [798, 1, 1, "", "all"], [799, 1, 1, "", "apply"], [800, 1, 1, "", "count"], [801, 1, 1, "", "first"], [802, 1, 1, "", "head"], [803, 1, 1, "", "last"], [804, 1, 1, "", "map_groups"], [805, 1, 1, "", "max"], [806, 1, 1, "", "mean"], [807, 1, 1, "", "median"], [808, 1, 1, "", "min"], [809, 1, 1, "", "n_unique"], [810, 1, 1, "", "quantile"], [811, 1, 1, "", "sum"], [812, 1, 1, "", "tail"]], "polars.selectors": [[819, 4, 1, "", "all"], [819, 4, 1, "", "by_dtype"], [819, 4, 1, "", "by_name"], [819, 4, 1, "", "categorical"], [819, 4, 1, "", "contains"], [819, 4, 1, "", "date"], [819, 4, 1, "", "datetime"], [819, 4, 1, "", "duration"], [819, 4, 1, "", "ends_with"], [819, 4, 1, "", "expand_selector"], [819, 4, 1, "", "first"], [819, 4, 1, "", "float"], [819, 4, 1, "", "integer"], [819, 4, 1, "", "is_selector"], [819, 4, 1, "", "last"], [819, 4, 1, "", "matches"], [819, 4, 1, "", "numeric"], [819, 4, 1, "", "starts_with"], [819, 4, 1, "", "string"], [819, 4, 1, "", "temporal"], [819, 4, 1, "", "time"]], "polars.testing": [[131, 4, 1, "", "assert_frame_equal"], [132, 4, 1, "", "assert_frame_not_equal"], [133, 4, 1, "", "assert_series_equal"], [134, 4, 1, "", "assert_series_not_equal"]], "polars.testing.parametric": [[135, 0, 1, "", "column"], [136, 4, 1, "", "columns"], [137, 4, 1, "", "create_list_strategy"], [138, 4, 1, "", "dataframes"], [139, 4, 1, "", "load_profile"], [140, 4, 1, "", "series"], [141, 4, 1, "", "set_profile"]], "polars.testing.parametric.column": [[135, 1, 1, "", "__init__"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:property", "3": "py:attribute", "4": "py:function", "5": "py:exception", "6": "py:module"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "property", "Python property"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "exception", "Python exception"], "6": ["py", "module", "Python module"]}, "titleterms": {"index": 0, "extend": [1, 163, 931], "api": [1, 73, 74, 75, 76, 717], "provid": 1, "new": 1, "function": [1, 144, 704, 716, 819], "avail": 1, "registr": 1, "exampl": [1, 819, 1168], "polar": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 701, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1168], "arrai": [2, 697, 1152], "binari": [3, 698, 711, 1154], "boolean": [4, 699, 1155], "categor": 5, "config": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 144], "activate_decim": 6, "load": [7, 144], "load_from_fil": 8, "restore_default": 9, "save": [10, 144], "save_to_fil": 11, "set_ascii_t": 12, "set_fmt_float": 13, "set_fmt_str_length": 14, "set_fmt_table_cell_list_len": 15, "set_streaming_chunk_s": 16, "set_tbl_cell_align": 17, "set_tbl_col": 18, "set_tbl_column_data_type_inlin": 19, "set_tbl_dataframe_shape_below": 20, "set_tbl_format": 21, "set_tbl_hide_column_data_typ": 22, "set_tbl_hide_column_nam": 23, "set_tbl_hide_dataframe_shap": 24, "set_tbl_hide_dtype_separ": 25, "set_tbl_row": 26, "set_tbl_width_char": 27, "set_verbos": 28, "state": [29, 144], "datafram": [30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 138, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 279], "write_avro": 30, "write_csv": 31, "write_databas": 32, "write_delta": 33, "write_excel": 34, "write_ipc": 35, "write_ipc_stream": 36, "write_json": [37, 493, 796], "write_ndjson": 38, "write_parquet": 39, "datatyp": 40, "date": [41, 346, 648, 882], "datetim": [42, 347, 651, 883], "decim": 43, "durat": [44, 654], "float32": 45, "float64": 46, "int16": 47, "int32": 48, "int64": 49, "int8": 50, "lazyfram": [51, 52, 53, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 816], "sink_csv": 51, "sink_ipc": 52, "sink_parquet": 53, "list": [54, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 706, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1161], "null": 55, "object": 56, "sqlcontext": [57, 58, 59, 60, 61, 62], "execut": 57, "regist": 58, "register_glob": 59, "register_mani": 60, "tabl": 61, "unregist": 62, "stringcach": [63, 716], "struct": [64, 606, 607, 687, 713, 1125, 1126, 1127, 1128, 1129, 1165], "time": [65, 375, 691, 915], "uint16": 66, "uint32": 67, "uint64": 68, "uint8": 69, "unknown": 70, "utf8": 71, "align_fram": 72, "register_dataframe_namespac": 73, "register_expr_namespac": 74, "register_lazyframe_namespac": 75, "register_series_namespac": 76, "build_info": 77, "collect_al": 78, "collect_all_async": 79, "concat": [80, 435, 560, 977, 1079], "disable_string_cach": 81, "enable_string_cach": 82, "except": [83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 283], "arrowerror": 83, "columnnotfounderror": 84, "computeerror": 85, "duplicateerror": 86, "invalidoperationerror": 87, "nodataerror": 88, "norowsreturnederror": 89, "polarspanicerror": 90, "rowserror": 91, "schemaerror": 92, "schemafieldnotfounderror": 93, "shapeerror": 94, "structfieldnotfounderror": 95, "toomanyrowsreturnederror": 96, "from_arrow": 97, "from_datafram": 98, "from_dict": [99, 100], "from_numpi": 101, "from_panda": 102, "from_record": 103, "from_repr": 104, "get_index_typ": 105, "io": 106, "csv": [106, 718], "batched_read": 106, "batchedcsvread": [106, 718], "next_batch": 106, "read_avro": 107, "read_csv": 108, "read_csv_batch": 109, "read_databas": 110, "read_database_uri": 111, "read_delta": 112, "read_excel": 113, "read_ipc": 114, "read_ipc_schema": 115, "read_ipc_stream": 116, "read_json": [117, 768], "read_ndjson": 118, "read_od": 119, "read_parquet": 120, "read_parquet_schema": 121, "scan_csv": 122, "scan_delta": 123, "scan_iceberg": 124, "scan_ipc": 125, "scan_ndjson": 126, "scan_parquet": 127, "scan_pyarrow_dataset": 128, "set_random_se": 129, "show_vers": 130, "test": [131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 1168], "assert_frame_equ": 131, "assert_frame_not_equ": 132, "assert_series_equ": 133, "assert_series_not_equ": 134, "parametr": [135, 136, 137, 138, 139, 140, 141, 1168], "column": [135, 136, 154, 702, 729], "create_list_strategi": 137, "load_profil": 139, "seri": [140, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1160], "set_profil": 141, "threadpool_s": 142, "using_string_cach": 143, "option": 144, "current": 144, "us": 144, "context": 144, "manag": 144, "decor": 144, "aggreg": [145, 284, 719, 820], "__dataframe__": 146, "appli": [147, 260, 293, 630, 799, 826], "approx_n_uniqu": [148, 294, 631, 720], "approx_uniqu": [149, 721], "bottom_k": [150, 316, 722, 847], "cast": [151, 318, 724, 848], "clear": [152, 725, 858], "clone": [153, 726, 862], "corr": [155, 641], "describ": [156, 872], "drop": [157, 731], "drop_in_plac": 158, "drop_nul": [159, 341, 441, 732, 876, 983], "dtype": [160, 733, 923], "estimated_s": [161, 925], "explod": [162, 391, 443, 567, 735, 930, 985, 1086], "fill_nan": [164, 393, 737, 933], "fill_nul": [165, 394, 738, 934], "filter": [166, 395, 739, 935], "find_idx_by_nam": 167, "flag": [168, 936], "fold": [169, 658], "frame_equ": 170, "get_column": [171, 172], "glimps": 173, "group_bi": [174, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 742, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812], "group_by_dynam": [175, 743], "group_by_rol": [176, 744], "groupbi": [177, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 278, 745, 815], "groupby_dynam": [178, 746], "groupby_rol": [179, 747], "hash_row": 180, "head": [181, 263, 406, 446, 662, 748, 802, 941, 988], "height": 182, "hstack": 183, "insert_at_idx": 184, "interpol": [185, 409, 750, 945], "is_dupl": [186, 411, 948], "is_empti": [187, 949], "is_uniqu": [188, 424, 966], "item": [189, 968], "iter_row": 190, "iter_slic": 191, "join": [192, 448, 751, 990], "join_asof": [193, 752], "lazi": [194, 754], "limit": [195, 430, 755, 971], "map_row": 196, "max": [197, 266, 306, 452, 481, 671, 758, 805, 838, 892, 994, 1019], "mean": [198, 267, 453, 482, 673, 759, 806, 893, 995, 1020], "median": [199, 268, 483, 674, 760, 807, 894, 1021], "melt": [200, 761], "merge_sort": [201, 762], "min": [202, 269, 307, 454, 494, 675, 763, 808, 839, 899, 996, 1022], "n_chunk": [203, 1024], "n_uniqu": [204, 270, 498, 677, 809, 1025], "null_count": [205, 510, 764, 1031], "partition_bi": 206, "pipe": [207, 516, 765], "pivot": 208, "product": [209, 519, 1035], "quantil": [210, 271, 521, 679, 767, 810, 1037], "rechunk": [211, 524, 1039], "renam": [212, 769, 1041], "replac": [213, 582, 1101], "replace_at_idx": 214, "revers": [215, 455, 528, 770, 997, 1043], "roll": [216, 531, 771], "row": [217, 218], "rows_by_kei": 219, "sampl": [220, 456, 544, 998, 1058], "schema": [221, 772, 1128], "select": [222, 281, 684, 709, 773, 818, 1163], "select_seq": [223, 774], "set_sort": [224, 546, 776, 1063], "shape": [225, 1064], "shift": [226, 461, 547, 777, 1003, 1065], "shift_and_fil": [227, 548, 778, 1066], "shrink_to_fit": [228, 1068], "slice": [229, 462, 555, 586, 780, 1004, 1074, 1105], "sort": [230, 463, 556, 781, 1005, 1075], "std": [231, 559, 686, 782, 1077], "sum": [232, 272, 308, 464, 610, 688, 783, 811, 840, 1006, 1130], "tail": [233, 273, 466, 611, 690, 784, 812, 1008, 1131], "take_everi": [234, 613, 785, 1133], "to_arrow": [235, 1136], "to_dict": [236, 237], "to_dummi": [238, 1137], "to_init_repr": [239, 1139], "to_numpi": [240, 1141], "to_panda": [241, 1142], "to_seri": 242, "to_struct": [243, 468, 1010], "top_k": [244, 617, 786, 1144], "transpos": 245, "uniqu": [246, 309, 470, 619, 787, 841, 1012, 1145], "unnest": [247, 788, 1129], "unstack": 248, "updat": [249, 789], "upsampl": 250, "var": [251, 623, 694, 790, 1149], "vstack": 252, "width": [253, 791], "with_column": [254, 792], "with_columns_seq": [255, 793], "with_row_count": [256, 795], "__iter__": 257, "agg": [258, 797], "all": [259, 289, 431, 626, 798, 823, 973], "count": [261, 329, 642, 800], "first": [262, 396, 444, 657, 740, 801, 986], "last": [264, 427, 449, 666, 753, 803, 991], "map_group": [265, 670, 804], "attribut": [274, 813, 1153], "comput": [275, 703, 1157], "descript": [276, 814, 1158], "export": [277, 1159], "miscellan": [280, 708, 716, 817, 1162], "manipul": [281, 709, 818, 1163], "data": 282, "type": 282, "numer": [282, 711], "tempor": [282, 714, 1166], "nest": 282, "other": 282, "expr": [285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625], "ab": [285, 821], "add": 286, "agg_group": 287, "alia": [288, 822], "and_": 290, "ani": [291, 432, 628, 824, 974], "append": [292, 825], "arcco": [295, 827], "arccosh": [296, 828], "arcsin": [297, 829], "arcsinh": [298, 830], "arctan": [299, 831], "arctanh": [300, 832], "arg_max": [301, 433, 833, 975], "arg_min": [302, 434, 834, 976], "arg_sort": [303, 835], "arg_tru": [304, 836], "arg_uniqu": [305, 837], "arr": [306, 307, 308, 309, 838, 839, 840, 841], "backward_fil": 310, "bin": [311, 312, 313, 314, 315, 842, 843, 844, 845, 846], "contain": [311, 436, 561, 842, 978, 1080], "decod": [312, 564, 843, 1083], "encod": [313, 565, 844, 1084], "ends_with": [314, 566, 845, 1085], "starts_with": [315, 590, 846, 1109], "cach": [317, 723], "cat": [319, 320, 849, 850, 851, 852, 853, 854], "get_categori": [319, 850], "set_ord": [320, 852], "cbrt": [321, 855], "ceil": [322, 856], "clip": [323, 859], "clip_max": [324, 860], "clip_min": [325, 861], "co": [326, 863], "cosh": [327, 864], "cot": [328, 865], "cumcount": 330, "cummax": [331, 866], "cummin": [332, 867], "cumprod": [333, 868], "cumsum": [334, 646, 869], "cumulative_ev": [335, 870], "cut": [336, 871], "degre": 337, "diff": [338, 439, 873, 981], "dot": [339, 874], "drop_nan": [340, 875], "dt": [342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922], "base_utc_offset": [342, 878], "cast_time_unit": [343, 879], "combin": [344, 880], "convert_time_zon": [345, 881], "dai": [348, 349, 884, 885], "dst_offset": [350, 886], "epoch": [351, 887], "hour": [352, 353, 888, 889], "is_leap_year": [354, 890], "iso_year": [355, 891], "microsecond": [356, 357, 895, 896], "millisecond": [358, 359, 897, 898], "minut": [360, 361, 900, 901], "month": [362, 902], "month_end": [363, 903], "month_start": [364, 904], "nanosecond": [365, 366, 905, 906], "offset_bi": [367, 907], "ordinal_dai": [368, 908], "quarter": [369, 909], "replace_time_zon": [370, 910], "round": [371, 543, 911, 1057], "second": [372, 373, 912, 913], "strftime": [374, 914], "timestamp": [376, 916], "to_str": [377, 917], "truncat": [378, 918], "week": [379, 919], "weekdai": [380, 920], "with_time_unit": [381, 921], "year": [382, 922], "entropi": [383, 924], "eq": [384, 484], "eq_miss": 385, "ewm_mean": [386, 926], "ewm_std": [387, 927], "ewm_var": [388, 928], "exclud": [389, 656], "exp": [390, 929], "extend_const": [392, 932], "flatten": 397, "floor": [398, 937], "floordiv": 399, "forward_fil": 400, "from_json": [401, 741], "ge": 402, "get": [403, 445, 987], "gt": 404, "hash": [405, 940], "implod": [407, 663, 943], "inspect": [408, 749], "is_between": [410, 946], "is_finit": [412, 950], "is_first": [413, 951], "is_first_distinct": [414, 952], "is_in": [415, 954], "is_infinit": [416, 955], "is_last": [417, 957], "is_last_distinct": [418, 958], "is_nan": [419, 959], "is_not": 420, "is_not_nan": [421, 960], "is_not_nul": [422, 961], "is_nul": [423, 962], "keep_nam": 425, "kurtosi": [426, 969], "le": 428, "len": [429, 450, 970, 992], "count_match": [437, 438, 562, 563, 979, 980, 1081, 1082], "differ": [440, 982], "eval": [442, 984], "intersect": [447, 989], "length": [451, 575, 993, 1094], "set_differ": [457, 999], "set_intersect": [458, 1000], "set_symmetric_differ": [459, 1001], "set_union": [460, 1002], "symmetric_differ": [465, 1007], "take": [467, 612, 1009, 1132], "union": [469, 1011], "log": [471, 1013], "log10": [472, 1014], "log1p": [473, 1015], "lower_bound": [474, 1016], "lt": 475, "map": [476, 500, 668, 756], "map_alia": 477, "map_batch": [478, 669, 757], "map_dict": [479, 1017], "map_el": [480, 1018], "meta": [484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 707], "has_multiple_output": 485, "is_regex_project": 486, "ne": [487, 507], "output_nam": 488, "pop": 489, "root_nam": 490, "tree_format": 491, "undo_alias": 492, "mod": 495, "mode": [496, 1023], "mul": 497, "name": [499, 500, 501, 502, 503, 504, 702, 710, 1026], "keep": 499, "prefix": [501, 518], "suffix": [502, 609], "to_lowercas": [503, 601, 1120], "to_uppercas": [504, 604, 1123], "nan_max": [505, 1027], "nan_min": [506, 1028], "ne_miss": 508, "not_": [509, 1030], "or_": 511, "over": 512, "pct_chang": [513, 1032], "peak_max": [514, 1033], "peak_min": [515, 1034], "pow": 517, "qcut": [520, 1036], "radian": 522, "rank": [523, 1038], "reinterpret": [525, 1040], "repeat_bi": 526, "reshap": [527, 1042], "rle": [529, 1044], "rle_id": [530, 1045], "rolling_appli": [532, 1046], "rolling_map": [533, 1047], "rolling_max": [534, 1048], "rolling_mean": [535, 1049], "rolling_median": [536, 1050], "rolling_min": [537, 1051], "rolling_quantil": [538, 1052], "rolling_skew": [539, 1053], "rolling_std": [540, 1054], "rolling_sum": [541, 1055], "rolling_var": [542, 1056], "search_sort": [545, 1059], "shrink_dtyp": [549, 1067], "shuffl": [550, 1069], "sign": [551, 1070], "sin": [552, 1071], "sinh": [553, 1072], "skew": [554, 1073], "sort_bi": 557, "sqrt": [558, 1076], "str": [560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124], "extract": [568, 1087], "extract_al": [569, 1088], "extract_group": [570, 1089], "json_extract": [571, 1090], "json_path_match": [572, 1091], "len_byt": [573, 1092], "len_char": [574, 1093], "ljust": [576, 1095], "lstrip": [577, 1096], "n_char": [578, 1097], "pad_end": [579, 1098], "pad_start": [580, 1099], "parse_int": [581, 1100], "replace_al": [583, 1102], "rjust": [584, 1103], "rstrip": [585, 1104], "split": [587, 1106], "split_exact": [588, 1107], "splitn": [589, 1108], "strip": [591, 1110], "strip_char": [592, 1111], "strip_chars_end": [593, 1112], "strip_chars_start": [594, 1113], "strip_prefix": [595, 1114], "strip_suffix": [596, 1115], "strptime": [597, 1116], "to_dat": [598, 1117], "to_datetim": [599, 1118], "to_decim": [600, 1119], "to_tim": [602, 1121], "to_titlecas": [603, 1122], "zfill": [605, 1124], "field": [606, 1125, 1126], "rename_field": [607, 1127], "sub": 608, "tan": [614, 1134], "tanh": [615, 1135], "to_phys": [616, 1143], "truediv": 618, "unique_count": [620, 1146], "upper_bound": [621, 1147], "value_count": [622, 1148], "where": 624, "xor": 625, "all_horizont": 627, "any_horizont": 629, "arang": 632, "arctan2": 633, "arctan2d": 634, "arg_sort_bi": 635, "arg_wher": 636, "avg": 637, "coalesc": 638, "concat_list": 639, "concat_str": 640, "cov": 643, "cumfold": 644, "cumreduc": 645, "cumsum_horizont": 647, "date_rang": [649, 650], "datetime_rang": [652, 653], "element": 655, "format": 659, "from_epoch": 660, "group": 661, "int_rang": [664, 665], "lit": 667, "max_horizont": 672, "min_horizont": 676, "ones": 678, "reduc": 680, "repeat": 681, "rolling_corr": 682, "rolling_cov": 683, "sql_expr": 685, "sum_horizont": 689, "time_rang": [692, 693], "when": 695, "zero": 696, "categori": [700, 1156], "col": 701, "express": 705, "oper": [711, 819], "conjunct": 711, "comparison": 711, "string": [712, 1164], "window": 715, "convers": 716, "parallel": 716, "random": 716, "refer": 717, "input": 718, "output": 718, "feather": 718, "ipc": 718, "parquet": 718, "databas": 718, "json": 718, "avro": 718, "spreadsheet": 718, "apach": 718, "iceberg": 718, "delta": 718, "lake": 718, "dataset": 718, "collect": 727, "collect_async": 728, "deseri": 730, "explain": 734, "fetch": 736, "profil": [766, 1168], "serial": 775, "show_graph": 779, "with_context": 794, "lazygroupbi": [797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812], "read": 817, "write": 817, "logic": 817, "plan": 817, "selector": 819, "import": 819, "set": [819, 1061], "is_loc": 851, "to_loc": 853, "uses_lexical_ord": 854, "chunk_length": 857, "get_chunk": 938, "has_valid": 939, "hist": 942, "inner_dtyp": 944, "is_boolean": 947, "is_float": 953, "is_integ": 956, "is_numer": 963, "is_sort": 964, "is_tempor": 965, "is_utf8": 967, "new_from_index": 1029, "series_equ": 1060, "set_at_idx": 1062, "to_fram": 1138, "to_list": 1140, "view": 1150, "zip_with": 1151, "sql": 1167, "method": 1167, "assert": 1168, "primit": 1168, "strategi": 1168, "helper": 1168, "util": 1169}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 60}, "alltitles": {"polars.exceptions.SchemaError": [[92, "polars-exceptions-schemaerror"]], "polars.read_database": [[110, "polars-read-database"]], "polars.testing.assert_frame_equal": [[131, "polars-testing-assert-frame-equal"]], "polars.testing.assert_series_equal": [[133, "polars-testing-assert-series-equal"]], "polars.scan_pyarrow_dataset": [[128, "polars-scan-pyarrow-dataset"]], "polars.exceptions.DuplicateError": [[86, "polars-exceptions-duplicateerror"]], "polars.exceptions.InvalidOperationError": [[87, "polars-exceptions-invalidoperationerror"]], "polars.DataFrame.__dataframe__": [[146, "polars-dataframe-dataframe"]], "polars.read_parquet": [[120, "polars-read-parquet"]], "polars.io.csv.batched_reader.BatchedCsvReader.next_batches": [[106, "polars-io-csv-batched-reader-batchedcsvreader-next-batches"]], "polars.collect_all": [[78, "polars-collect-all"]], "polars.exceptions.SchemaFieldNotFoundError": [[93, "polars-exceptions-schemafieldnotfounderror"]], "polars.from_dicts": [[100, "polars-from-dicts"]], "polars.read_delta": [[112, "polars-read-delta"]], "polars.DataFrame.apply": [[147, "polars-dataframe-apply"]], "polars.exceptions.TooManyRowsReturnedError": [[96, "polars-exceptions-toomanyrowsreturnederror"]], "polars.read_json": [[117, "polars-read-json"]], "polars.read_ndjson": [[118, "polars-read-ndjson"]], "polars.exceptions.ArrowError": [[83, "polars-exceptions-arrowerror"]], "polars.testing.parametric.set_profile": [[141, "polars-testing-parametric-set-profile"]], "polars.read_avro": [[107, "polars-read-avro"]], "polars.exceptions.StructFieldNotFoundError": [[95, "polars-exceptions-structfieldnotfounderror"]], "polars.exceptions.ShapeError": [[94, "polars-exceptions-shapeerror"]], "polars.exceptions.NoDataError": [[88, "polars-exceptions-nodataerror"]], "polars.exceptions.PolarsPanicError": [[90, "polars-exceptions-polarspanicerror"]], "polars.from_dict": [[99, "polars-from-dict"]], "polars.DataFrame.approx_n_unique": [[148, "polars-dataframe-approx-n-unique"]], "polars.read_parquet_schema": [[121, "polars-read-parquet-schema"]], "polars.testing.parametric.dataframes": [[138, "polars-testing-parametric-dataframes"]], "polars.scan_csv": [[122, "polars-scan-csv"]], "polars.from_repr": [[104, "polars-from-repr"]], "polars.read_ods": [[119, "polars-read-ods"]], "polars.threadpool_size": [[142, "polars-threadpool-size"]], "polars.from_dataframe": [[98, "polars-from-dataframe"]], "polars.concat": [[80, "polars-concat"]], "polars.read_ipc_stream": [[116, "polars-read-ipc-stream"]], "polars.disable_string_cache": [[81, "polars-disable-string-cache"]], "polars.scan_ndjson": [[126, "polars-scan-ndjson"]], "polars.from_records": [[103, "polars-from-records"]], "polars.DataFrame.approx_unique": [[149, "polars-dataframe-approx-unique"]], "polars.scan_delta": [[123, "polars-scan-delta"]], "Aggregation": [[145, "aggregation"], [820, "aggregation"], [719, "aggregation"], [284, "aggregation"]], "polars.build_info": [[77, "polars-build-info"]], "polars.read_csv": [[108, "polars-read-csv"]], "polars.testing.parametric.create_list_strategy": [[137, "polars-testing-parametric-create-list-strategy"]], "polars.scan_parquet": [[127, "polars-scan-parquet"]], "polars.read_ipc_schema": [[115, "polars-read-ipc-schema"]], "polars.exceptions.ColumnNotFoundError": [[84, "polars-exceptions-columnnotfounderror"]], "polars.scan_ipc": [[125, "polars-scan-ipc"]], "polars.DataFrame.cast": [[151, "polars-dataframe-cast"]], "polars.testing.parametric.load_profile": [[139, "polars-testing-parametric-load-profile"]], "polars.using_string_cache": [[143, "polars-using-string-cache"]], "Config": [[144, "config"]], "Config options": [[144, "config-options"]], "Config load, save, and current state": [[144, "config-load-save-and-current-state"]], "Use as a context manager": [[144, "use-as-a-context-manager"]], "Use as a function decorator": [[144, "use-as-a-function-decorator"]], "polars.api.register_series_namespace": [[76, "polars-api-register-series-namespace"]], "polars.set_random_seed": [[129, "polars-set-random-seed"]], "polars.testing.parametric.series": [[140, "polars-testing-parametric-series"]], "polars.enable_string_cache": [[82, "polars-enable-string-cache"]], "polars.exceptions.NoRowsReturnedError": [[89, "polars-exceptions-norowsreturnederror"]], "polars.collect_all_async": [[79, "polars-collect-all-async"]], "polars.DataFrame.bottom_k": [[150, "polars-dataframe-bottom-k"]], "polars.exceptions.RowsError": [[91, "polars-exceptions-rowserror"]], "polars.from_numpy": [[101, "polars-from-numpy"]], "polars.scan_iceberg": [[124, "polars-scan-iceberg"]], "polars.testing.parametric.column": [[135, "polars-testing-parametric-column"]], "polars.testing.parametric.columns": [[136, "polars-testing-parametric-columns"]], "polars.read_csv_batched": [[109, "polars-read-csv-batched"]], "polars.testing.assert_frame_not_equal": [[132, "polars-testing-assert-frame-not-equal"]], "polars.exceptions.ComputeError": [[85, "polars-exceptions-computeerror"]], "polars.from_arrow": [[97, "polars-from-arrow"]], "polars.read_ipc": [[114, "polars-read-ipc"]], "polars.show_versions": [[130, "polars-show-versions"]], "polars.get_index_type": [[105, "polars-get-index-type"]], "polars.testing.assert_series_not_equal": [[134, "polars-testing-assert-series-not-equal"]], "polars.read_database_uri": [[111, "polars-read-database-uri"]], "polars.read_excel": [[113, "polars-read-excel"]], "polars.from_pandas": [[102, "polars-from-pandas"]], "polars.Boolean": [[4, "polars-boolean"]], "polars.Config.set_streaming_chunk_size": [[16, "polars-config-set-streaming-chunk-size"]], "Extending the API": [[1, "extending-the-api"]], "Providing new functionality": [[1, "providing-new-functionality"]], "Available registrations": [[1, "available-registrations"]], "Examples": [[1, "examples"], [1168, "examples"], [819, "examples"]], "polars.Config.load_from_file": [[8, "polars-config-load-from-file"]], "polars.Config.set_tbl_cell_alignment": [[17, "polars-config-set-tbl-cell-alignment"]], "polars.DataFrame.write_avro": [[30, "polars-dataframe-write-avro"]], "polars.Int64": [[49, "polars-int64"]], "polars.UInt32": [[67, "polars-uint32"]], "polars.api.register_expr_namespace": [[74, "polars-api-register-expr-namespace"]], "polars.UInt64": [[68, "polars-uint64"]], "polars.Config.set_fmt_float": [[13, "polars-config-set-fmt-float"]], "polars.Config.set_tbl_dataframe_shape_below": [[20, "polars-config-set-tbl-dataframe-shape-below"]], "polars.Decimal": [[43, "polars-decimal"]], "polars.Int16": [[47, "polars-int16"]], "polars.Config.state": [[29, "polars-config-state"]], "polars.LazyFrame.sink_parquet": [[53, "polars-lazyframe-sink-parquet"]], "polars.Config.set_tbl_column_data_type_inline": [[19, "polars-config-set-tbl-column-data-type-inline"]], "polars.Int32": [[48, "polars-int32"]], "polars.Null": [[55, "polars-null"]], "polars.Config.load": [[7, "polars-config-load"]], "polars.SQLContext.unregister": [[62, "polars-sqlcontext-unregister"]], "polars.Config.set_tbl_hide_dataframe_shape": [[24, "polars-config-set-tbl-hide-dataframe-shape"]], "polars.UInt8": [[69, "polars-uint8"]], "polars.Config.set_tbl_formatting": [[21, "polars-config-set-tbl-formatting"]], "polars.Object": [[56, "polars-object"]], "polars.Float32": [[45, "polars-float32"]], "polars.DataFrame.write_ipc_stream": [[36, "polars-dataframe-write-ipc-stream"]], "polars.SQLContext.tables": [[61, "polars-sqlcontext-tables"]], "polars.Categorical": [[5, "polars-categorical"]], "polars.Config.set_verbose": [[28, "polars-config-set-verbose"]], "polars.Time": [[65, "polars-time"]], "polars.Config.save": [[10, "polars-config-save"]], "polars.SQLContext.execute": [[57, "polars-sqlcontext-execute"]], "polars.DataFrame.write_json": [[37, "polars-dataframe-write-json"]], "polars.Config.activate_decimals": [[6, "polars-config-activate-decimals"]], "polars.align_frames": [[72, "polars-align-frames"]], "polars.LazyFrame.sink_ipc": [[52, "polars-lazyframe-sink-ipc"]], "polars.Config.set_tbl_width_chars": [[27, "polars-config-set-tbl-width-chars"]], "polars.Config.set_tbl_hide_dtype_separator": [[25, "polars-config-set-tbl-hide-dtype-separator"]], "polars.Config.set_tbl_hide_column_data_types": [[22, "polars-config-set-tbl-hide-column-data-types"]], "polars.Config.set_tbl_hide_column_names": [[23, "polars-config-set-tbl-hide-column-names"]], "polars.StringCache": [[63, "polars-stringcache"]], "polars.Config.set_tbl_rows": [[26, "polars-config-set-tbl-rows"]], "polars.Utf8": [[71, "polars-utf8"]], "polars.DataFrame.write_excel": [[34, "polars-dataframe-write-excel"]], "polars.api.register_lazyframe_namespace": [[75, "polars-api-register-lazyframe-namespace"]], "polars.Binary": [[3, "polars-binary"]], "polars.SQLContext.register_many": [[60, "polars-sqlcontext-register-many"]], "polars.DataFrame.write_csv": [[31, "polars-dataframe-write-csv"]], "polars.DataFrame.write_delta": [[33, "polars-dataframe-write-delta"]], "polars.Config.set_fmt_str_lengths": [[14, "polars-config-set-fmt-str-lengths"]], "Index": [[0, "index"]], "polars.Config.save_to_file": [[11, "polars-config-save-to-file"]], "polars.DataType": [[40, "polars-datatype"]], "polars.Duration": [[44, "polars-duration"]], "polars.List": [[54, "polars-list"]], "polars.Config.restore_defaults": [[9, "polars-config-restore-defaults"]], "polars.api.register_dataframe_namespace": [[73, "polars-api-register-dataframe-namespace"]], "polars.Config.set_fmt_table_cell_list_len": [[15, "polars-config-set-fmt-table-cell-list-len"]], "polars.DataFrame.write_parquet": [[39, "polars-dataframe-write-parquet"]], "polars.Float64": [[46, "polars-float64"]], "polars.Unknown": [[70, "polars-unknown"]], "polars.DataFrame.write_ipc": [[35, "polars-dataframe-write-ipc"]], "polars.SQLContext.register_globals": [[59, "polars-sqlcontext-register-globals"]], "polars.UInt16": [[66, "polars-uint16"]], "polars.Int8": [[50, "polars-int8"]], "polars.DataFrame.write_database": [[32, "polars-dataframe-write-database"]], "polars.Array": [[2, "polars-array"]], "polars.DataFrame.write_ndjson": [[38, "polars-dataframe-write-ndjson"]], "polars.Config.set_tbl_cols": [[18, "polars-config-set-tbl-cols"]], "polars.Config.set_ascii_tables": [[12, "polars-config-set-ascii-tables"]], "polars.Date": [[41, "polars-date"]], "polars.Datetime": [[42, "polars-datetime"]], "polars.Struct": [[64, "polars-struct"]], "polars.LazyFrame.sink_csv": [[51, "polars-lazyframe-sink-csv"]], "polars.SQLContext.register": [[58, "polars-sqlcontext-register"]], "polars.Series.str.split_exact": [[1107, "polars-series-str-split-exact"]], "polars.Series.std": [[1077, "polars-series-std"]], "polars.Series.sort": [[1075, "polars-series-sort"]], "polars.Series.str.slice": [[1105, "polars-series-str-slice"]], "polars.Series.str.splitn": [[1108, "polars-series-str-splitn"]], "polars.Series.str.strip_chars_end": [[1112, "polars-series-str-strip-chars-end"]], "polars.Series.skew": [[1073, "polars-series-skew"]], "polars.Series.str.extract_all": [[1088, "polars-series-str-extract-all"]], "polars.Series.str.lengths": [[1094, "polars-series-str-lengths"]], "polars.Series.str.rstrip": [[1104, "polars-series-str-rstrip"]], "polars.Series.str.strip_chars_start": [[1113, "polars-series-str-strip-chars-start"]], "polars.Series.tan": [[1134, "polars-series-tan"]], "polars.Series.shrink_to_fit": [[1068, "polars-series-shrink-to-fit"]], "polars.Series.str.count_match": [[1081, "polars-series-str-count-match"]], "polars.Series.to_dummies": [[1137, "polars-series-to-dummies"]], "polars.Series.str.to_time": [[1121, "polars-series-str-to-time"]], "polars.Series.str.strip_prefix": [[1114, "polars-series-str-strip-prefix"]], "polars.Series.str.parse_int": [[1100, "polars-series-str-parse-int"]], "polars.Series.shuffle": [[1069, "polars-series-shuffle"]], "polars.Series.str.json_path_match": [[1091, "polars-series-str-json-path-match"]], "polars.Series.str.to_uppercase": [[1123, "polars-series-str-to-uppercase"]], "polars.Series.to_frame": [[1138, "polars-series-to-frame"]], "polars.Series.str.len_chars": [[1093, "polars-series-str-len-chars"]], "polars.Series.str.replace": [[1101, "polars-series-str-replace"]], "polars.Series.sinh": [[1072, "polars-series-sinh"]], "polars.Series.str.rjust": [[1103, "polars-series-str-rjust"]], "polars.Series.str.strip_suffix": [[1115, "polars-series-str-strip-suffix"]], "polars.Series.str.to_lowercase": [[1120, "polars-series-str-to-lowercase"]], "polars.Series.sum": [[1130, "polars-series-sum"]], "polars.Series.str.pad_end": [[1098, "polars-series-str-pad-end"]], "polars.Series.shift_and_fill": [[1066, "polars-series-shift-and-fill"]], "polars.Series.str.explode": [[1086, "polars-series-str-explode"]], "polars.Series.take_every": [[1133, "polars-series-take-every"]], "polars.Series.str.extract_groups": [[1089, "polars-series-str-extract-groups"]], "polars.Series.str.n_chars": [[1097, "polars-series-str-n-chars"]], "polars.Series.str.decode": [[1083, "polars-series-str-decode"]], "polars.Series.str.strip_chars": [[1111, "polars-series-str-strip-chars"]], "polars.Series.str.to_datetime": [[1118, "polars-series-str-to-datetime"]], "polars.Series.struct.field": [[1125, "polars-series-struct-field"]], "polars.Series.str.ends_with": [[1085, "polars-series-str-ends-with"]], "polars.Series.shrink_dtype": [[1067, "polars-series-shrink-dtype"]], "polars.Series.struct.fields": [[1126, "polars-series-struct-fields"]], "polars.Series.struct.rename_fields": [[1127, "polars-series-struct-rename-fields"]], "polars.Series.str.starts_with": [[1109, "polars-series-str-starts-with"]], "polars.Series.slice": [[1074, "polars-series-slice"]], "polars.Series.tail": [[1131, "polars-series-tail"]], "polars.Series.str.zfill": [[1124, "polars-series-str-zfill"]], "polars.Series.str.to_decimal": [[1119, "polars-series-str-to-decimal"]], "polars.Series.str.strip": [[1110, "polars-series-str-strip"]], "polars.Series.str.extract": [[1087, "polars-series-str-extract"]], "polars.Series.str.len_bytes": [[1092, "polars-series-str-len-bytes"]], "polars.Series.str": [[1078, "polars-series-str"]], "polars.Series.str.strptime": [[1116, "polars-series-str-strptime"]], "polars.Series.str.ljust": [[1095, "polars-series-str-ljust"]], "polars.Series.sin": [[1071, "polars-series-sin"]], "polars.Series.shape": [[1064, "polars-series-shape"]], "polars.Series.str.replace_all": [[1102, "polars-series-str-replace-all"]], "polars.Series.str.to_titlecase": [[1122, "polars-series-str-to-titlecase"]], "polars.Series.str.to_date": [[1117, "polars-series-str-to-date"]], "polars.Series.take": [[1132, "polars-series-take"]], "polars.Series.struct.unnest": [[1129, "polars-series-struct-unnest"]], "polars.Series.str.encode": [[1084, "polars-series-str-encode"]], "polars.Series.struct.schema": [[1128, "polars-series-struct-schema"]], "polars.Series.str.contains": [[1080, "polars-series-str-contains"]], "polars.Series.str.json_extract": [[1090, "polars-series-str-json-extract"]], "polars.Series.str.split": [[1106, "polars-series-str-split"]], "polars.Series.tanh": [[1135, "polars-series-tanh"]], "polars.Series.to_arrow": [[1136, "polars-series-to-arrow"]], "polars.Series.sign": [[1070, "polars-series-sign"]], "polars.Series.str.pad_start": [[1099, "polars-series-str-pad-start"]], "polars.Series.str.concat": [[1079, "polars-series-str-concat"]], "polars.Series.shift": [[1065, "polars-series-shift"]], "polars.Series.sqrt": [[1076, "polars-series-sqrt"]], "polars.Series.str.count_matches": [[1082, "polars-series-str-count-matches"]], "polars.Series.str.lstrip": [[1096, "polars-series-str-lstrip"]], "polars.Series.to_init_repr": [[1139, "polars-series-to-init-repr"]], "polars.Series.peak_min": [[1034, "polars-series-peak-min"]], "polars.Series.quantile": [[1037, "polars-series-quantile"]], "polars.Series.list.len": [[992, "polars-series-list-len"]], "polars.Series.n_chunks": [[1024, "polars-series-n-chunks"]], "polars.Series.rolling_skew": [[1053, "polars-series-rolling-skew"]], "polars.Series.rolling_sum": [[1055, "polars-series-rolling-sum"]], "polars.Series.nan_min": [[1028, "polars-series-nan-min"]], "polars.Series.lower_bound": [[1016, "polars-series-lower-bound"]], "polars.Series.min": [[1022, "polars-series-min"]], "polars.Series.list.take": [[1009, "polars-series-list-take"]], "polars.Series.n_unique": [[1025, "polars-series-n-unique"]], "polars.Series.nan_max": [[1027, "polars-series-nan-max"]], "polars.Series.reinterpret": [[1040, "polars-series-reinterpret"]], "polars.Series.list.max": [[994, "polars-series-list-max"]], "polars.Series.reverse": [[1043, "polars-series-reverse"]], "polars.Series.rolling_quantile": [[1052, "polars-series-rolling-quantile"]], "polars.Series.map_dict": [[1017, "polars-series-map-dict"]], "polars.Series.list.head": [[988, "polars-series-list-head"]], "polars.Series.set": [[1061, "polars-series-set"]], "polars.Series.list.set_symmetric_difference": [[1001, "polars-series-list-set-symmetric-difference"]], "polars.Series.list.sample": [[998, "polars-series-list-sample"]], "polars.Series.list.set_intersection": [[1000, "polars-series-list-set-intersection"]], "polars.Series.list.shift": [[1003, "polars-series-list-shift"]], "polars.Series.list.union": [[1011, "polars-series-list-union"]], "polars.Series.product": [[1035, "polars-series-product"]], "polars.Series.list.reverse": [[997, "polars-series-list-reverse"]], "polars.Series.rename": [[1041, "polars-series-rename"]], "polars.Series.round": [[1057, "polars-series-round"]], "polars.Series.qcut": [[1036, "polars-series-qcut"]], "polars.Series.set_at_idx": [[1062, "polars-series-set-at-idx"]], "polars.Series.mean": [[1020, "polars-series-mean"]], "polars.Series.not_": [[1030, "polars-series-not"]], "polars.Series.rechunk": [[1039, "polars-series-rechunk"]], "polars.Series.map_elements": [[1018, "polars-series-map-elements"]], "polars.Series.null_count": [[1031, "polars-series-null-count"]], "polars.Series.series_equal": [[1060, "polars-series-series-equal"]], "polars.Series.rolling_median": [[1050, "polars-series-rolling-median"]], "polars.Series.list.sum": [[1006, "polars-series-list-sum"]], "polars.Series.mode": [[1023, "polars-series-mode"]], "polars.Series.pct_change": [[1032, "polars-series-pct-change"]], "polars.Series.rolling_map": [[1047, "polars-series-rolling-map"]], "polars.Series.peak_max": [[1033, "polars-series-peak-max"]], "polars.Series.list.set_difference": [[999, "polars-series-list-set-difference"]], "polars.Series.list.set_union": [[1002, "polars-series-list-set-union"]], "polars.Series.list.lengths": [[993, "polars-series-list-lengths"]], "polars.Series.rle": [[1044, "polars-series-rle"]], "polars.Series.rolling_max": [[1048, "polars-series-rolling-max"]], "polars.Series.list.tail": [[1008, "polars-series-list-tail"]], "polars.Series.log1p": [[1015, "polars-series-log1p"]], "polars.Series.list.slice": [[1004, "polars-series-list-slice"]], "polars.Series.list.sort": [[1005, "polars-series-list-sort"]], "polars.Series.list.min": [[996, "polars-series-list-min"]], "polars.Series.list.last": [[991, "polars-series-list-last"]], "polars.Series.list.join": [[990, "polars-series-list-join"]], "polars.Series.list.to_struct": [[1010, "polars-series-list-to-struct"]], "polars.Series.max": [[1019, "polars-series-max"]], "polars.Series.median": [[1021, "polars-series-median"]], "polars.Series.new_from_index": [[1029, "polars-series-new-from-index"]], "polars.Series.rolling_var": [[1056, "polars-series-rolling-var"]], "polars.Series.set_sorted": [[1063, "polars-series-set-sorted"]], "polars.Series.sample": [[1058, "polars-series-sample"]], "polars.Series.list.intersection": [[989, "polars-series-list-intersection"]], "polars.Series.log": [[1013, "polars-series-log"]], "polars.Series.rle_id": [[1045, "polars-series-rle-id"]], "polars.Series.rolling_mean": [[1049, "polars-series-rolling-mean"]], "polars.Series.rolling_apply": [[1046, "polars-series-rolling-apply"]], "polars.Series.search_sorted": [[1059, "polars-series-search-sorted"]], "polars.Series.name": [[1026, "polars-series-name"]], "polars.Series.rank": [[1038, "polars-series-rank"]], "polars.Series.list.unique": [[1012, "polars-series-list-unique"]], "polars.Series.list.symmetric_difference": [[1007, "polars-series-list-symmetric-difference"]], "polars.Series.log10": [[1014, "polars-series-log10"]], "polars.Series.reshape": [[1042, "polars-series-reshape"]], "polars.Series.rolling_std": [[1054, "polars-series-rolling-std"]], "polars.Series.list.mean": [[995, "polars-series-list-mean"]], "polars.Series.rolling_min": [[1051, "polars-series-rolling-min"]], "polars.Series.has_validity": [[939, "polars-series-has-validity"]], "polars.Series.ewm_mean": [[926, "polars-series-ewm-mean"]], "polars.Series.exp": [[929, "polars-series-exp"]], "polars.Series.entropy": [[924, "polars-series-entropy"]], "polars.Series.hash": [[940, "polars-series-hash"]], "polars.Series.is_not_null": [[961, "polars-series-is-not-null"]], "polars.Series.len": [[970, "polars-series-len"]], "polars.Series.list.drop_nulls": [[983, "polars-series-list-drop-nulls"]], "polars.Series.is_empty": [[949, "polars-series-is-empty"]], "polars.Series.dt.week": [[919, "polars-series-dt-week"]], "polars.Series.dt.truncate": [[918, "polars-series-dt-truncate"]], "polars.Series.implode": [[943, "polars-series-implode"]], "polars.Series.is_finite": [[950, "polars-series-is-finite"]], "polars.Series.list.explode": [[985, "polars-series-list-explode"]], "polars.Series.dt.year": [[922, "polars-series-dt-year"]], "polars.Series.dt.seconds": [[913, "polars-series-dt-seconds"]], "polars.Series.is_sorted": [[964, "polars-series-is-sorted"]], "polars.Series.list.concat": [[977, "polars-series-list-concat"]], "polars.Series.is_not_nan": [[960, "polars-series-is-not-nan"]], "polars.Series.is_in": [[954, "polars-series-is-in"]], "polars.Series.list": [[972, "polars-series-list"]], "polars.Series.item": [[968, "polars-series-item"]], "polars.Series.is_boolean": [[947, "polars-series-is-boolean"]], "polars.Series.is_between": [[946, "polars-series-is-between"]], "polars.Series.list.first": [[986, "polars-series-list-first"]], "polars.Series.explode": [[930, "polars-series-explode"]], "polars.Series.is_null": [[962, "polars-series-is-null"]], "polars.Series.is_unique": [[966, "polars-series-is-unique"]], "polars.Series.estimated_size": [[925, "polars-series-estimated-size"]], "polars.Series.dt.strftime": [[914, "polars-series-dt-strftime"]], "polars.Series.dt.weekday": [[920, "polars-series-dt-weekday"]], "polars.Series.head": [[941, "polars-series-head"]], "polars.Series.list.get": [[987, "polars-series-list-get"]], "polars.Series.get_chunks": [[938, "polars-series-get-chunks"]], "polars.Series.list.arg_min": [[976, "polars-series-list-arg-min"]], "polars.Series.list.all": [[973, "polars-series-list-all"]], "polars.Series.inner_dtype": [[944, "polars-series-inner-dtype"]], "polars.Series.dt.to_string": [[917, "polars-series-dt-to-string"]], "polars.Series.fill_nan": [[933, "polars-series-fill-nan"]], "polars.Series.fill_null": [[934, "polars-series-fill-null"]], "polars.Series.is_infinite": [[955, "polars-series-is-infinite"]], "polars.Series.is_last": [[957, "polars-series-is-last"]], "polars.Series.ewm_var": [[928, "polars-series-ewm-var"]], "polars.Series.flags": [[936, "polars-series-flags"]], "polars.Series.hist": [[942, "polars-series-hist"]], "polars.Series.is_first_distinct": [[952, "polars-series-is-first-distinct"]], "polars.Series.is_integer": [[956, "polars-series-is-integer"]], "polars.Series.list.difference": [[982, "polars-series-list-difference"]], "polars.Series.is_utf8": [[967, "polars-series-is-utf8"]], "polars.Series.dt.timestamp": [[916, "polars-series-dt-timestamp"]], "polars.Series.list.any": [[974, "polars-series-list-any"]], "polars.Series.is_last_distinct": [[958, "polars-series-is-last-distinct"]], "polars.Series.extend": [[931, "polars-series-extend"]], "polars.Series.limit": [[971, "polars-series-limit"]], "polars.Series.list.diff": [[981, "polars-series-list-diff"]], "polars.Series.list.contains": [[978, "polars-series-list-contains"]], "polars.Series.floor": [[937, "polars-series-floor"]], "polars.Series.dtype": [[923, "polars-series-dtype"]], "polars.Series.is_temporal": [[965, "polars-series-is-temporal"]], "polars.Series.is_first": [[951, "polars-series-is-first"]], "polars.Series.is_numeric": [[963, "polars-series-is-numeric"]], "polars.Series.is_duplicated": [[948, "polars-series-is-duplicated"]], "polars.Series.kurtosis": [[969, "polars-series-kurtosis"]], "polars.Series.list.count_matches": [[980, "polars-series-list-count-matches"]], "polars.Series.list.eval": [[984, "polars-series-list-eval"]], "polars.Series.extend_constant": [[932, "polars-series-extend-constant"]], "polars.Series.is_float": [[953, "polars-series-is-float"]], "polars.Series.dt.with_time_unit": [[921, "polars-series-dt-with-time-unit"]], "polars.Series.interpolate": [[945, "polars-series-interpolate"]], "polars.Series.filter": [[935, "polars-series-filter"]], "polars.Series.ewm_std": [[927, "polars-series-ewm-std"]], "polars.Series.list.count_match": [[979, "polars-series-list-count-match"]], "polars.Series.list.arg_max": [[975, "polars-series-list-arg-max"]], "polars.Series.dt.time": [[915, "polars-series-dt-time"]], "polars.Series.is_nan": [[959, "polars-series-is-nan"]], "polars.Series.dt.second": [[912, "polars-series-dt-second"]], "polars.Series.cat": [[849, "polars-series-cat"]], "polars.Series.cat.set_ordering": [[852, "polars-series-cat-set-ordering"]], "polars.Series.cumsum": [[869, "polars-series-cumsum"]], "polars.Series.dt.combine": [[880, "polars-series-dt-combine"]], "polars.Series.cbrt": [[855, "polars-series-cbrt"]], "polars.Series.dt.ordinal_day": [[908, "polars-series-dt-ordinal-day"]], "polars.Series.dot": [[874, "polars-series-dot"]], "polars.Series.cat.uses_lexical_ordering": [[854, "polars-series-cat-uses-lexical-ordering"]], "polars.Series.cumprod": [[868, "polars-series-cumprod"]], "polars.Series.dt.microseconds": [[896, "polars-series-dt-microseconds"]], "polars.Series.arg_unique": [[837, "polars-series-arg-unique"]], "polars.Series.dt.base_utc_offset": [[878, "polars-series-dt-base-utc-offset"]], "polars.Series.dt.month_start": [[904, "polars-series-dt-month-start"]], "polars.Series.arr.unique": [[841, "polars-series-arr-unique"]], "polars.Series.clone": [[862, "polars-series-clone"]], "polars.Series.dt.median": [[894, "polars-series-dt-median"]], "polars.Series.bin.contains": [[842, "polars-series-bin-contains"]], "polars.Series.dt.convert_time_zone": [[881, "polars-series-dt-convert-time-zone"]], "polars.Series.dt.iso_year": [[891, "polars-series-dt-iso-year"]], "polars.Series.dt.mean": [[893, "polars-series-dt-mean"]], "polars.Series.dt.nanosecond": [[905, "polars-series-dt-nanosecond"]], "polars.Series.dt.is_leap_year": [[890, "polars-series-dt-is-leap-year"]], "polars.Series.arr.min": [[839, "polars-series-arr-min"]], "polars.Series.arr.max": [[838, "polars-series-arr-max"]], "polars.Series.clip": [[859, "polars-series-clip"]], "polars.Series.chunk_lengths": [[857, "polars-series-chunk-lengths"]], "polars.Series.cut": [[871, "polars-series-cut"]], "polars.Series.dt.microsecond": [[895, "polars-series-dt-microsecond"]], "polars.Series.cat.get_categories": [[850, "polars-series-cat-get-categories"]], "polars.Series.dt.min": [[899, "polars-series-dt-min"]], "polars.Series.dt.offset_by": [[907, "polars-series-dt-offset-by"]], "polars.Series.bin.encode": [[844, "polars-series-bin-encode"]], "polars.Series.cot": [[865, "polars-series-cot"]], "polars.Series.dt.quarter": [[909, "polars-series-dt-quarter"]], "polars.Series.cast": [[848, "polars-series-cast"]], "polars.Series.cummax": [[866, "polars-series-cummax"]], "polars.Series.bin.ends_with": [[845, "polars-series-bin-ends-with"]], "polars.Series.diff": [[873, "polars-series-diff"]], "polars.Series.dt.month_end": [[903, "polars-series-dt-month-end"]], "polars.Series.bottom_k": [[847, "polars-series-bottom-k"]], "polars.Series.cosh": [[864, "polars-series-cosh"]], "polars.Series.cat.to_local": [[853, "polars-series-cat-to-local"]], "polars.Series.arr.sum": [[840, "polars-series-arr-sum"]], "polars.Series.clear": [[858, "polars-series-clear"]], "polars.Series.clip_max": [[860, "polars-series-clip-max"]], "polars.Series.dt": [[877, "polars-series-dt"]], "polars.Series.dt.cast_time_unit": [[879, "polars-series-dt-cast-time-unit"]], "polars.Series.bin.decode": [[843, "polars-series-bin-decode"]], "polars.Series.dt.max": [[892, "polars-series-dt-max"]], "polars.Series.dt.days": [[885, "polars-series-dt-days"]], "polars.Series.dt.date": [[882, "polars-series-dt-date"]], "polars.Series.drop_nans": [[875, "polars-series-drop-nans"]], "polars.Series.dt.milliseconds": [[898, "polars-series-dt-milliseconds"]], "polars.Series.dt.month": [[902, "polars-series-dt-month"]], "polars.Series.dt.minute": [[900, "polars-series-dt-minute"]], "polars.Series.dt.minutes": [[901, "polars-series-dt-minutes"]], "polars.Series.dt.day": [[884, "polars-series-dt-day"]], "polars.Series.dt.millisecond": [[897, "polars-series-dt-millisecond"]], "polars.Series.ceil": [[856, "polars-series-ceil"]], "polars.Series.cos": [[863, "polars-series-cos"]], "polars.Series.cumulative_eval": [[870, "polars-series-cumulative-eval"]], "polars.Series.dt.nanoseconds": [[906, "polars-series-dt-nanoseconds"]], "polars.Series.arg_true": [[836, "polars-series-arg-true"]], "polars.Series.bin.starts_with": [[846, "polars-series-bin-starts-with"]], "polars.Series.dt.dst_offset": [[886, "polars-series-dt-dst-offset"]], "polars.Series.dt.hour": [[888, "polars-series-dt-hour"]], "polars.Series.dt.hours": [[889, "polars-series-dt-hours"]], "polars.Series.dt.replace_time_zone": [[910, "polars-series-dt-replace-time-zone"]], "polars.Series.cat.is_local": [[851, "polars-series-cat-is-local"]], "polars.Series.dt.round": [[911, "polars-series-dt-round"]], "polars.Series.dt.epoch": [[887, "polars-series-dt-epoch"]], "polars.Series.clip_min": [[861, "polars-series-clip-min"]], "polars.Series.describe": [[872, "polars-series-describe"]], "polars.Series.dt.datetime": [[883, "polars-series-dt-datetime"]], "polars.Series.drop_nulls": [[876, "polars-series-drop-nulls"]], "polars.Series.cummin": [[867, "polars-series-cummin"]], "Binary": [[1154, "binary"], [711, "binary"], [698, "binary"]], "polars.Series.to_numpy": [[1141, "polars-series-to-numpy"]], "Attributes": [[1153, "attributes"], [813, "attributes"], [274, "attributes"]], "Boolean": [[1155, "boolean"], [699, "boolean"]], "polars.Series.upper_bound": [[1147, "polars-series-upper-bound"]], "polars.Series.to_physical": [[1143, "polars-series-to-physical"]], "Categories": [[1156, "categories"], [700, "categories"]], "polars.Series.var": [[1149, "polars-series-var"]], "Descriptive": [[1158, "descriptive"], [814, "descriptive"], [276, "descriptive"]], "polars.Series.to_list": [[1140, "polars-series-to-list"]], "polars.Series.unique_counts": [[1146, "polars-series-unique-counts"]], "Export": [[1159, "export"], [277, "export"]], "Series": [[1160, "series"]], "Temporal": [[1166, "temporal"], [714, "temporal"], [282, "temporal"]], "List": [[1161, "list"], [706, "list"]], "Manipulation/selection": [[1163, "manipulation-selection"], [818, "manipulation-selection"], [709, "manipulation-selection"], [281, "manipulation-selection"]], "Testing": [[1168, "testing"]], "Asserts": [[1168, "asserts"]], "Parametric testing": [[1168, "parametric-testing"]], "Polars primitives": [[1168, "polars-primitives"]], "Strategy helpers": [[1168, "strategy-helpers"]], "Profiles": [[1168, "profiles"]], "SQL": [[1167, "sql"]], "Methods": [[1167, "methods"]], "Struct": [[1165, "struct"], [713, "struct"]], "polars.Series.to_pandas": [[1142, "polars-series-to-pandas"]], "Miscellaneous": [[1162, "miscellaneous"], [817, "miscellaneous"], [716, "miscellaneous"], [708, "miscellaneous"], [280, "miscellaneous"]], "polars.Series.zip_with": [[1151, "polars-series-zip-with"]], "Array": [[1152, "array"], [697, "array"]], "polars.Series.top_k": [[1144, "polars-series-top-k"]], "polars.Series.unique": [[1145, "polars-series-unique"]], "Utils": [[1169, "utils"]], "polars.Series.view": [[1150, "polars-series-view"]], "polars.Series.value_counts": [[1148, "polars-series-value-counts"]], "String": [[1164, "string"], [712, "string"]], "Computation": [[1157, "computation"], [703, "computation"], [275, "computation"]], "polars.LazyFrame.read_json": [[768, "polars-lazyframe-read-json"]], "polars.LazyFrame.var": [[790, "polars-lazyframe-var"]], "polars.lazyframe.group_by.LazyGroupBy.n_unique": [[809, "polars-lazyframe-group-by-lazygroupby-n-unique"]], "polars.LazyFrame.update": [[789, "polars-lazyframe-update"]], "polars.lazyframe.group_by.LazyGroupBy.quantile": [[810, "polars-lazyframe-group-by-lazygroupby-quantile"]], "polars.lazyframe.group_by.LazyGroupBy.tail": [[812, "polars-lazyframe-group-by-lazygroupby-tail"]], "polars.LazyFrame.melt": [[761, "polars-lazyframe-melt"]], "polars.LazyFrame.schema": [[772, "polars-lazyframe-schema"]], "polars.lazyframe.group_by.LazyGroupBy.mean": [[806, "polars-lazyframe-group-by-lazygroupby-mean"]], "polars.lazyframe.group_by.LazyGroupBy.all": [[798, "polars-lazyframe-group-by-lazygroupby-all"]], "polars.LazyFrame.profile": [[766, "polars-lazyframe-profile"]], "polars.lazyframe.group_by.LazyGroupBy.sum": [[811, "polars-lazyframe-group-by-lazygroupby-sum"]], "polars.LazyFrame.with_columns_seq": [[793, "polars-lazyframe-with-columns-seq"]], "polars.Series.arg_max": [[833, "polars-series-arg-max"]], "polars.LazyFrame.unique": [[787, "polars-lazyframe-unique"]], "polars.LazyFrame.slice": [[780, "polars-lazyframe-slice"]], "polars.LazyFrame.with_context": [[794, "polars-lazyframe-with-context"]], "Read/write logical plan": [[817, "read-write-logical-plan"]], "polars.lazyframe.group_by.LazyGroupBy.first": [[801, "polars-lazyframe-group-by-lazygroupby-first"]], "polars.LazyFrame.serialize": [[775, "polars-lazyframe-serialize"]], "polars.LazyFrame.shift_and_fill": [[778, "polars-lazyframe-shift-and-fill"]], "polars.Series.arcsin": [[829, "polars-series-arcsin"]], "polars.LazyFrame.top_k": [[786, "polars-lazyframe-top-k"]], "polars.LazyFrame.set_sorted": [[776, "polars-lazyframe-set-sorted"]], "polars.LazyFrame.pipe": [[765, "polars-lazyframe-pipe"]], "polars.lazyframe.group_by.LazyGroupBy.median": [[807, "polars-lazyframe-group-by-lazygroupby-median"]], "polars.lazyframe.group_by.LazyGroupBy.min": [[808, "polars-lazyframe-group-by-lazygroupby-min"]], "polars.LazyFrame.quantile": [[767, "polars-lazyframe-quantile"]], "polars.Series.append": [[825, "polars-series-append"]], "polars.Series.apply": [[826, "polars-series-apply"]], "polars.Series.arccosh": [[828, "polars-series-arccosh"]], "polars.Series.arctanh": [[832, "polars-series-arctanh"]], "polars.Series.arccos": [[827, "polars-series-arccos"]], "polars.LazyFrame.with_row_count": [[795, "polars-lazyframe-with-row-count"]], "polars.lazyframe.group_by.LazyGroupBy.max": [[805, "polars-lazyframe-group-by-lazygroupby-max"]], "polars.LazyFrame.take_every": [[785, "polars-lazyframe-take-every"]], "polars.LazyFrame.reverse": [[770, "polars-lazyframe-reverse"]], "Selectors": [[819, "selectors"]], "Importing": [[819, "importing"]], "Set operations": [[819, "set-operations"]], "Functions": [[819, "functions"], [704, "functions"], [716, "functions"]], "polars.LazyFrame.select_seq": [[774, "polars-lazyframe-select-seq"]], "polars.LazyFrame.sort": [[781, "polars-lazyframe-sort"]], "polars.LazyFrame.tail": [[784, "polars-lazyframe-tail"]], "polars.LazyFrame.sum": [[783, "polars-lazyframe-sum"]], "LazyFrame": [[816, "lazyframe"]], "polars.LazyFrame.select": [[773, "polars-lazyframe-select"]], "polars.Series.all": [[823, "polars-series-all"]], "polars.lazyframe.group_by.LazyGroupBy.map_groups": [[804, "polars-lazyframe-group-by-lazygroupby-map-groups"]], "polars.LazyFrame.min": [[763, "polars-lazyframe-min"]], "polars.LazyFrame.unnest": [[788, "polars-lazyframe-unnest"]], "polars.LazyFrame.with_columns": [[792, "polars-lazyframe-with-columns"]], "polars.lazyframe.group_by.LazyGroupBy.count": [[800, "polars-lazyframe-group-by-lazygroupby-count"]], "polars.Series.arg_sort": [[835, "polars-series-arg-sort"]], "polars.Series.abs": [[821, "polars-series-abs"]], "polars.LazyFrame.median": [[760, "polars-lazyframe-median"]], "polars.Series.any": [[824, "polars-series-any"]], "polars.LazyFrame.rename": [[769, "polars-lazyframe-rename"]], "polars.LazyFrame.show_graph": [[779, "polars-lazyframe-show-graph"]], "GroupBy": [[815, "groupby"], [278, "groupby"]], "polars.lazyframe.group_by.LazyGroupBy.agg": [[797, "polars-lazyframe-group-by-lazygroupby-agg"]], "polars.LazyFrame.merge_sorted": [[762, "polars-lazyframe-merge-sorted"]], "polars.lazyframe.group_by.LazyGroupBy.last": [[803, "polars-lazyframe-group-by-lazygroupby-last"]], "polars.Series.arg_min": [[834, "polars-series-arg-min"]], "polars.LazyFrame.write_json": [[796, "polars-lazyframe-write-json"]], "polars.lazyframe.group_by.LazyGroupBy.apply": [[799, "polars-lazyframe-group-by-lazygroupby-apply"]], "polars.LazyFrame.width": [[791, "polars-lazyframe-width"]], "polars.lazyframe.group_by.LazyGroupBy.head": [[802, "polars-lazyframe-group-by-lazygroupby-head"]], "polars.LazyFrame.rolling": [[771, "polars-lazyframe-rolling"]], "polars.LazyFrame.shift": [[777, "polars-lazyframe-shift"]], "polars.Series.arcsinh": [[830, "polars-series-arcsinh"]], "polars.Series.arctan": [[831, "polars-series-arctan"]], "polars.LazyFrame.std": [[782, "polars-lazyframe-std"]], "polars.LazyFrame.null_count": [[764, "polars-lazyframe-null-count"]], "polars.Series.alias": [[822, "polars-series-alias"]], "polars.n_unique": [[677, "polars-n-unique"]], "polars.Expr.sub": [[608, "polars-expr-sub"]], "polars.Expr.suffix": [[609, "polars-expr-suffix"]], "polars.arg_sort_by": [[635, "polars-arg-sort-by"]], "polars.count": [[642, "polars-count"]], "polars.int_range": [[664, "polars-int-range"]], "polars.Expr.tan": [[614, "polars-expr-tan"]], "polars.arange": [[632, "polars-arange"]], "polars.coalesce": [[638, "polars-coalesce"]], "polars.int_ranges": [[665, "polars-int-ranges"]], "polars.last": [[666, "polars-last"]], "polars.Expr.sum": [[610, "polars-expr-sum"]], "polars.exclude": [[656, "polars-exclude"]], "polars.Expr.tanh": [[615, "polars-expr-tanh"]], "polars.all": [[626, "polars-all"]], "polars.arctan2d": [[634, "polars-arctan2d"]], "polars.map_groups": [[670, "polars-map-groups"]], "polars.cumreduce": [[645, "polars-cumreduce"]], "polars.min_horizontal": [[676, "polars-min-horizontal"]], "polars.lit": [[667, "polars-lit"]], "polars.rolling_corr": [[682, "polars-rolling-corr"]], "polars.quantile": [[679, "polars-quantile"]], "polars.date": [[648, "polars-date"]], "polars.max_horizontal": [[672, "polars-max-horizontal"]], "polars.all_horizontal": [[627, "polars-all-horizontal"]], "polars.mean": [[673, "polars-mean"]], "polars.arctan2": [[633, "polars-arctan2"]], "polars.cumfold": [[644, "polars-cumfold"]], "polars.implode": [[663, "polars-implode"]], "polars.Expr.truediv": [[618, "polars-expr-truediv"]], "polars.avg": [[637, "polars-avg"]], "polars.from_epoch": [[660, "polars-from-epoch"]], "polars.first": [[657, "polars-first"]], "polars.cumsum": [[646, "polars-cumsum"]], "polars.Expr.var": [[623, "polars-expr-var"]], "polars.date_range": [[649, "polars-date-range"]], "polars.any": [[628, "polars-any"]], "polars.approx_n_unique": [[631, "polars-approx-n-unique"]], "polars.Expr.unique_counts": [[620, "polars-expr-unique-counts"]], "polars.datetime_range": [[652, "polars-datetime-range"]], "polars.Expr.unique": [[619, "polars-expr-unique"]], "polars.duration": [[654, "polars-duration"]], "polars.Expr.value_counts": [[622, "polars-expr-value-counts"]], "polars.fold": [[658, "polars-fold"]], "polars.max": [[671, "polars-max"]], "polars.groups": [[661, "polars-groups"]], "polars.map": [[668, "polars-map"]], "polars.datetime": [[651, "polars-datetime"]], "polars.concat_str": [[640, "polars-concat-str"]], "polars.Expr.take_every": [[613, "polars-expr-take-every"]], "polars.Expr.upper_bound": [[621, "polars-expr-upper-bound"]], "polars.Expr.top_k": [[617, "polars-expr-top-k"]], "polars.min": [[675, "polars-min"]], "polars.arg_where": [[636, "polars-arg-where"]], "polars.datetime_ranges": [[653, "polars-datetime-ranges"]], "polars.map_batches": [[669, "polars-map-batches"]], "polars.corr": [[641, "polars-corr"]], "polars.concat_list": [[639, "polars-concat-list"]], "polars.ones": [[678, "polars-ones"]], "polars.Expr.xor": [[625, "polars-expr-xor"]], "polars.any_horizontal": [[629, "polars-any-horizontal"]], "polars.cov": [[643, "polars-cov"]], "polars.Expr.take": [[612, "polars-expr-take"]], "polars.apply": [[630, "polars-apply"]], "polars.date_ranges": [[650, "polars-date-ranges"]], "polars.reduce": [[680, "polars-reduce"]], "polars.format": [[659, "polars-format"]], "polars.Expr.where": [[624, "polars-expr-where"]], "polars.cumsum_horizontal": [[647, "polars-cumsum-horizontal"]], "polars.Expr.tail": [[611, "polars-expr-tail"]], "polars.element": [[655, "polars-element"]], "polars.head": [[662, "polars-head"]], "polars.median": [[674, "polars-median"]], "polars.repeat": [[681, "polars-repeat"]], "polars.rolling_cov": [[683, "polars-rolling-cov"]], "polars.Expr.to_physical": [[616, "polars-expr-to-physical"]], "polars.Expr.rolling_quantile": [[538, "polars-expr-rolling-quantile"]], "polars.Expr.str.split": [[587, "polars-expr-str-split"]], "polars.Expr.shrink_dtype": [[549, "polars-expr-shrink-dtype"]], "polars.Expr.str.rjust": [[584, "polars-expr-str-rjust"]], "polars.Expr.sort_by": [[557, "polars-expr-sort-by"]], "polars.Expr.str.to_lowercase": [[601, "polars-expr-str-to-lowercase"]], "polars.Expr.str.zfill": [[605, "polars-expr-str-zfill"]], "polars.Expr.rolling_median": [[536, "polars-expr-rolling-median"]], "polars.Expr.str.to_time": [[602, "polars-expr-str-to-time"]], "polars.Expr.sin": [[552, "polars-expr-sin"]], "polars.Expr.str.strip": [[591, "polars-expr-str-strip"]], "polars.Expr.str.explode": [[567, "polars-expr-str-explode"]], "polars.Expr.str.strip_chars_start": [[594, "polars-expr-str-strip-chars-start"]], "polars.Expr.str.contains": [[561, "polars-expr-str-contains"]], "polars.Expr.str.to_titlecase": [[603, "polars-expr-str-to-titlecase"]], "polars.Expr.search_sorted": [[545, "polars-expr-search-sorted"]], "polars.Expr.str.extract": [[568, "polars-expr-str-extract"]], "polars.Expr.struct.field": [[606, "polars-expr-struct-field"]], "polars.Expr.str.ljust": [[576, "polars-expr-str-ljust"]], "polars.Expr.str.splitn": [[589, "polars-expr-str-splitn"]], "polars.Expr.sqrt": [[558, "polars-expr-sqrt"]], "polars.Expr.str.pad_end": [[579, "polars-expr-str-pad-end"]], "polars.Expr.str.replace": [[582, "polars-expr-str-replace"]], "polars.Expr.str.concat": [[560, "polars-expr-str-concat"]], "polars.Expr.rolling_map": [[533, "polars-expr-rolling-map"]], "polars.Expr.round": [[543, "polars-expr-round"]], "polars.Expr.set_sorted": [[546, "polars-expr-set-sorted"]], "polars.Expr.str.replace_all": [[583, "polars-expr-str-replace-all"]], "polars.Expr.str.extract_groups": [[570, "polars-expr-str-extract-groups"]], "polars.Expr.std": [[559, "polars-expr-std"]], "polars.Expr.sinh": [[553, "polars-expr-sinh"]], "polars.Expr.str.lengths": [[575, "polars-expr-str-lengths"]], "polars.Expr.str.pad_start": [[580, "polars-expr-str-pad-start"]], "polars.Expr.str.split_exact": [[588, "polars-expr-str-split-exact"]], "polars.Expr.str.ends_with": [[566, "polars-expr-str-ends-with"]], "polars.Expr.str.to_datetime": [[599, "polars-expr-str-to-datetime"]], "polars.Expr.str.strip_chars": [[592, "polars-expr-str-strip-chars"]], "polars.Expr.str.to_decimal": [[600, "polars-expr-str-to-decimal"]], "polars.Expr.sort": [[556, "polars-expr-sort"]], "polars.Expr.rolling_std": [[540, "polars-expr-rolling-std"]], "polars.Expr.shift": [[547, "polars-expr-shift"]], "polars.Expr.shuffle": [[550, "polars-expr-shuffle"]], "polars.Expr.str.count_matches": [[563, "polars-expr-str-count-matches"]], "polars.Expr.str.count_match": [[562, "polars-expr-str-count-match"]], "polars.Expr.skew": [[554, "polars-expr-skew"]], "polars.Expr.shift_and_fill": [[548, "polars-expr-shift-and-fill"]], "polars.Expr.str.decode": [[564, "polars-expr-str-decode"]], "polars.Expr.rolling_apply": [[532, "polars-expr-rolling-apply"]], "polars.Expr.slice": [[555, "polars-expr-slice"]], "polars.Expr.str.extract_all": [[569, "polars-expr-str-extract-all"]], "polars.Expr.str.lstrip": [[577, "polars-expr-str-lstrip"]], "polars.Expr.str.n_chars": [[578, "polars-expr-str-n-chars"]], "polars.Expr.str.starts_with": [[590, "polars-expr-str-starts-with"]], "polars.Expr.str.to_uppercase": [[604, "polars-expr-str-to-uppercase"]], "polars.Expr.rolling_min": [[537, "polars-expr-rolling-min"]], "polars.Expr.sign": [[551, "polars-expr-sign"]], "polars.Expr.rolling_sum": [[541, "polars-expr-rolling-sum"]], "polars.Expr.sample": [[544, "polars-expr-sample"]], "polars.Expr.str.json_path_match": [[572, "polars-expr-str-json-path-match"]], "polars.Expr.str.strip_suffix": [[596, "polars-expr-str-strip-suffix"]], "polars.Expr.str.encode": [[565, "polars-expr-str-encode"]], "polars.Expr.str.len_chars": [[574, "polars-expr-str-len-chars"]], "polars.Expr.rolling_skew": [[539, "polars-expr-rolling-skew"]], "polars.Expr.str.len_bytes": [[573, "polars-expr-str-len-bytes"]], "polars.Expr.struct.rename_fields": [[607, "polars-expr-struct-rename-fields"]], "polars.Expr.str.strip_chars_end": [[593, "polars-expr-str-strip-chars-end"]], "polars.Expr.str.to_date": [[598, "polars-expr-str-to-date"]], "polars.Expr.str.strptime": [[597, "polars-expr-str-strptime"]], "polars.Expr.rolling_var": [[542, "polars-expr-rolling-var"]], "polars.Expr.rolling_mean": [[535, "polars-expr-rolling-mean"]], "polars.Expr.str.parse_int": [[581, "polars-expr-str-parse-int"]], "polars.Expr.str.strip_prefix": [[595, "polars-expr-str-strip-prefix"]], "polars.Expr.str.slice": [[586, "polars-expr-str-slice"]], "polars.Expr.rolling_max": [[534, "polars-expr-rolling-max"]], "polars.Expr.str.json_extract": [[571, "polars-expr-str-json-extract"]], "polars.Expr.str.rstrip": [[585, "polars-expr-str-rstrip"]], "polars.Expr.peak_min": [[515, "polars-expr-peak-min"]], "polars.Expr.reshape": [[527, "polars-expr-reshape"]], "polars.Expr.list.set_intersection": [[458, "polars-expr-list-set-intersection"]], "polars.Expr.map": [[476, "polars-expr-map"]], "polars.Expr.list.unique": [[470, "polars-expr-list-unique"]], "polars.Expr.min": [[494, "polars-expr-min"]], "polars.Expr.name.to_uppercase": [[504, "polars-expr-name-to-uppercase"]], "polars.Expr.quantile": [[521, "polars-expr-quantile"]], "polars.Expr.name.keep": [[499, "polars-expr-name-keep"]], "polars.Expr.rolling": [[531, "polars-expr-rolling"]], "polars.Expr.list.sample": [[456, "polars-expr-list-sample"]], "polars.Expr.repeat_by": [[526, "polars-expr-repeat-by"]], "polars.Expr.mode": [[496, "polars-expr-mode"]], "polars.Expr.rechunk": [[524, "polars-expr-rechunk"]], "polars.Expr.rle": [[529, "polars-expr-rle"]], "polars.Expr.product": [[519, "polars-expr-product"]], "polars.Expr.nan_min": [[506, "polars-expr-nan-min"]], "polars.Expr.meta.ne": [[487, "polars-expr-meta-ne"]], "polars.Expr.meta.tree_format": [[491, "polars-expr-meta-tree-format"]], "polars.Expr.log10": [[472, "polars-expr-log10"]], "polars.Expr.n_unique": [[498, "polars-expr-n-unique"]], "polars.Expr.or_": [[511, "polars-expr-or"]], "polars.Expr.meta.is_regex_projection": [[486, "polars-expr-meta-is-regex-projection"]], "polars.Expr.mean": [[482, "polars-expr-mean"]], "polars.Expr.rle_id": [[530, "polars-expr-rle-id"]], "polars.Expr.list.slice": [[462, "polars-expr-list-slice"]], "polars.Expr.meta.pop": [[489, "polars-expr-meta-pop"]], "polars.Expr.pipe": [[516, "polars-expr-pipe"]], "polars.Expr.list.set_symmetric_difference": [[459, "polars-expr-list-set-symmetric-difference"]], "polars.Expr.median": [[483, "polars-expr-median"]], "polars.Expr.ne": [[507, "polars-expr-ne"]], "polars.Expr.log": [[471, "polars-expr-log"]], "polars.Expr.pct_change": [[513, "polars-expr-pct-change"]], "polars.Expr.radians": [[522, "polars-expr-radians"]], "polars.Expr.max": [[481, "polars-expr-max"]], "polars.Expr.mul": [[497, "polars-expr-mul"]], "polars.Expr.rank": [[523, "polars-expr-rank"]], "polars.Expr.name.suffix": [[502, "polars-expr-name-suffix"]], "polars.Expr.map_alias": [[477, "polars-expr-map-alias"]], "polars.Expr.list.tail": [[466, "polars-expr-list-tail"]], "polars.Expr.name.to_lowercase": [[503, "polars-expr-name-to-lowercase"]], "polars.Expr.map_dict": [[479, "polars-expr-map-dict"]], "polars.Expr.name.prefix": [[501, "polars-expr-name-prefix"]], "polars.Expr.meta.output_name": [[488, "polars-expr-meta-output-name"]], "polars.Expr.peak_max": [[514, "polars-expr-peak-max"]], "polars.Expr.list.to_struct": [[468, "polars-expr-list-to-struct"]], "polars.Expr.list.symmetric_difference": [[465, "polars-expr-list-symmetric-difference"]], "polars.Expr.list.set_difference": [[457, "polars-expr-list-set-difference"]], "polars.Expr.meta.eq": [[484, "polars-expr-meta-eq"]], "polars.Expr.not_": [[509, "polars-expr-not"]], "polars.Expr.reinterpret": [[525, "polars-expr-reinterpret"]], "polars.Expr.list.union": [[469, "polars-expr-list-union"]], "polars.Expr.list.sort": [[463, "polars-expr-list-sort"]], "polars.Expr.mod": [[495, "polars-expr-mod"]], "polars.Expr.pow": [[517, "polars-expr-pow"]], "polars.Expr.log1p": [[473, "polars-expr-log1p"]], "polars.Expr.prefix": [[518, "polars-expr-prefix"]], "polars.Expr.qcut": [[520, "polars-expr-qcut"]], "polars.Expr.list.shift": [[461, "polars-expr-list-shift"]], "polars.Expr.list.sum": [[464, "polars-expr-list-sum"]], "polars.Expr.map_batches": [[478, "polars-expr-map-batches"]], "polars.Expr.name.map": [[500, "polars-expr-name-map"]], "polars.Expr.reverse": [[528, "polars-expr-reverse"]], "polars.Expr.lt": [[475, "polars-expr-lt"]], "polars.Expr.meta.has_multiple_outputs": [[485, "polars-expr-meta-has-multiple-outputs"]], "polars.Expr.meta.root_names": [[490, "polars-expr-meta-root-names"]], "polars.Expr.nan_max": [[505, "polars-expr-nan-max"]], "polars.Expr.list.set_union": [[460, "polars-expr-list-set-union"]], "polars.Expr.lower_bound": [[474, "polars-expr-lower-bound"]], "polars.Expr.ne_missing": [[508, "polars-expr-ne-missing"]], "polars.Expr.map_elements": [[480, "polars-expr-map-elements"]], "polars.Expr.null_count": [[510, "polars-expr-null-count"]], "polars.Expr.meta.write_json": [[493, "polars-expr-meta-write-json"]], "polars.Expr.over": [[512, "polars-expr-over"]], "polars.Expr.list.take": [[467, "polars-expr-list-take"]], "polars.Expr.meta.undo_aliases": [[492, "polars-expr-meta-undo-aliases"]], "Operators": [[711, "operators"]], "Conjunction": [[711, "conjunction"]], "Comparison": [[711, "comparison"]], "Numeric": [[711, "numeric"], [282, "numeric"]], "polars.LazyFrame.explain": [[734, "polars-lazyframe-explain"]], "polars.LazyFrame.explode": [[735, "polars-lazyframe-explode"]], "polars.LazyFrame.group_by_rolling": [[744, "polars-lazyframe-group-by-rolling"]], "polars.LazyFrame.join": [[751, "polars-lazyframe-join"]], "polars.LazyFrame.limit": [[755, "polars-lazyframe-limit"]], "polars.LazyFrame.max": [[758, "polars-lazyframe-max"]], "polars.LazyFrame.drop_nulls": [[732, "polars-lazyframe-drop-nulls"]], "API reference": [[717, "api-reference"]], "Meta": [[707, "meta"]], "Expressions": [[705, "expressions"]], "Name": [[710, "name"]], "polars.LazyFrame.approx_unique": [[721, "polars-lazyframe-approx-unique"]], "polars.LazyFrame.drop": [[731, "polars-lazyframe-drop"]], "polars.LazyFrame.group_by_dynamic": [[743, "polars-lazyframe-group-by-dynamic"]], "polars.LazyFrame.groupby_dynamic": [[746, "polars-lazyframe-groupby-dynamic"]], "polars.LazyFrame.groupby_rolling": [[747, "polars-lazyframe-groupby-rolling"]], "polars.LazyFrame.clone": [[726, "polars-lazyframe-clone"]], "polars.struct": [[687, "polars-struct"]], "polars.time_range": [[692, "polars-time-range"]], "polars.col": [[701, "polars-col"]], "Window": [[715, "window"]], "polars.zeros": [[696, "polars-zeros"]], "Input/output": [[718, "input-output"]], "CSV": [[718, "csv"]], "Feather/ IPC": [[718, "feather-ipc"]], "Parquet": [[718, "parquet"]], "Database": [[718, "database"]], "JSON": [[718, "json"]], "AVRO": [[718, "avro"]], "Spreadsheet": [[718, "spreadsheet"]], "Apache Iceberg": [[718, "apache-iceberg"]], "Delta Lake": [[718, "delta-lake"]], "Datasets": [[718, "datasets"]], "BatchedCsvReader": [[718, "batchedcsvreader"]], "polars.LazyFrame.clear": [[725, "polars-lazyframe-clear"]], "polars.LazyFrame.columns": [[729, "polars-lazyframe-columns"]], "polars.LazyFrame.mean": [[759, "polars-lazyframe-mean"]], "polars.sql_expr": [[685, "polars-sql-expr"]], "polars.LazyFrame.fill_null": [[738, "polars-lazyframe-fill-null"]], "polars.LazyFrame.fetch": [[736, "polars-lazyframe-fetch"]], "polars.LazyFrame.filter": [[739, "polars-lazyframe-filter"]], "polars.LazyFrame.first": [[740, "polars-lazyframe-first"]], "polars.select": [[684, "polars-select"]], "polars.LazyFrame.fill_nan": [[737, "polars-lazyframe-fill-nan"]], "polars.var": [[694, "polars-var"]], "polars.time_ranges": [[693, "polars-time-ranges"]], "polars.LazyFrame.interpolate": [[750, "polars-lazyframe-interpolate"]], "polars.LazyFrame.map_batches": [[757, "polars-lazyframe-map-batches"]], "polars.LazyFrame.inspect": [[749, "polars-lazyframe-inspect"]], "polars.LazyFrame.from_json": [[741, "polars-lazyframe-from-json"]], "polars.tail": [[690, "polars-tail"]], "polars.time": [[691, "polars-time"]], "polars.LazyFrame.head": [[748, "polars-lazyframe-head"]], "polars.LazyFrame.join_asof": [[752, "polars-lazyframe-join-asof"]], "polars.sum_horizontal": [[689, "polars-sum-horizontal"]], "polars.when": [[695, "polars-when"]], "Conversion": [[716, "conversion"]], "Parallelization": [[716, "parallelization"]], "Random": [[716, "random"]], "StringCache": [[716, "stringcache"]], "Columns / names": [[702, "columns-names"]], "polars.LazyFrame.lazy": [[754, "polars-lazyframe-lazy"]], "polars.LazyFrame.collect_async": [[728, "polars-lazyframe-collect-async"]], "polars.LazyFrame.dtypes": [[733, "polars-lazyframe-dtypes"]], "polars.LazyFrame.group_by": [[742, "polars-lazyframe-group-by"]], "polars.LazyFrame.map": [[756, "polars-lazyframe-map"]], "polars.LazyFrame.cache": [[723, "polars-lazyframe-cache"]], "polars.LazyFrame.last": [[753, "polars-lazyframe-last"]], "polars.LazyFrame.collect": [[727, "polars-lazyframe-collect"]], "polars.LazyFrame.cast": [[724, "polars-lazyframe-cast"]], "polars.LazyFrame.approx_n_unique": [[720, "polars-lazyframe-approx-n-unique"]], "polars.std": [[686, "polars-std"]], "polars.LazyFrame.groupby": [[745, "polars-lazyframe-groupby"]], "polars.LazyFrame.deserialize": [[730, "polars-lazyframe-deserialize"]], "polars.sum": [[688, "polars-sum"]], "polars.LazyFrame.bottom_k": [[722, "polars-lazyframe-bottom-k"]], "polars.Expr.entropy": [[383, "polars-expr-entropy"]], "polars.Expr.list.mean": [[453, "polars-expr-list-mean"]], "polars.Expr.first": [[396, "polars-expr-first"]], "polars.Expr.implode": [[407, "polars-expr-implode"]], "polars.Expr.is_unique": [[424, "polars-expr-is-unique"]], "polars.Expr.is_in": [[415, "polars-expr-is-in"]], "polars.Expr.list.last": [[449, "polars-expr-list-last"]], "polars.Expr.list.contains": [[436, "polars-expr-list-contains"]], "polars.Expr.eq_missing": [[385, "polars-expr-eq-missing"]], "polars.Expr.kurtosis": [[426, "polars-expr-kurtosis"]], "polars.Expr.list.arg_max": [[433, "polars-expr-list-arg-max"]], "polars.Expr.list.difference": [[440, "polars-expr-list-difference"]], "polars.Expr.ewm_var": [[388, "polars-expr-ewm-var"]], "polars.Expr.forward_fill": [[400, "polars-expr-forward-fill"]], "polars.Expr.is_null": [[423, "polars-expr-is-null"]], "polars.Expr.from_json": [[401, "polars-expr-from-json"]], "polars.Expr.hash": [[405, "polars-expr-hash"]], "polars.Expr.ewm_mean": [[386, "polars-expr-ewm-mean"]], "polars.Expr.ge": [[402, "polars-expr-ge"]], "polars.Expr.is_last_distinct": [[418, "polars-expr-is-last-distinct"]], "polars.Expr.is_not": [[420, "polars-expr-is-not"]], "polars.Expr.list.intersection": [[447, "polars-expr-list-intersection"]], "polars.Expr.list.max": [[452, "polars-expr-list-max"]], "polars.Expr.list.reverse": [[455, "polars-expr-list-reverse"]], "polars.Expr.list.arg_min": [[434, "polars-expr-list-arg-min"]], "polars.Expr.keep_name": [[425, "polars-expr-keep-name"]], "polars.Expr.is_between": [[410, "polars-expr-is-between"]], "polars.Expr.list.lengths": [[451, "polars-expr-list-lengths"]], "polars.Expr.le": [[428, "polars-expr-le"]], "polars.Expr.eq": [[384, "polars-expr-eq"]], "polars.Expr.list.count_matches": [[438, "polars-expr-list-count-matches"]], "polars.Expr.last": [[427, "polars-expr-last"]], "polars.Expr.is_last": [[417, "polars-expr-is-last"]], "polars.Expr.list.head": [[446, "polars-expr-list-head"]], "polars.Expr.is_duplicated": [[411, "polars-expr-is-duplicated"]], "polars.Expr.floor": [[398, "polars-expr-floor"]], "polars.Expr.is_first_distinct": [[414, "polars-expr-is-first-distinct"]], "polars.Expr.explode": [[391, "polars-expr-explode"]], "polars.Expr.dt.weekday": [[380, "polars-expr-dt-weekday"]], "polars.Expr.list.eval": [[442, "polars-expr-list-eval"]], "polars.Expr.dt.with_time_unit": [[381, "polars-expr-dt-with-time-unit"]], "polars.Expr.list.drop_nulls": [[441, "polars-expr-list-drop-nulls"]], "polars.Expr.is_infinite": [[416, "polars-expr-is-infinite"]], "polars.Expr.len": [[429, "polars-expr-len"]], "polars.Expr.head": [[406, "polars-expr-head"]], "polars.Expr.floordiv": [[399, "polars-expr-floordiv"]], "polars.Expr.exp": [[390, "polars-expr-exp"]], "polars.Expr.exclude": [[389, "polars-expr-exclude"]], "polars.Expr.is_nan": [[419, "polars-expr-is-nan"]], "polars.Expr.limit": [[430, "polars-expr-limit"]], "polars.Expr.inspect": [[408, "polars-expr-inspect"]], "polars.Expr.list.concat": [[435, "polars-expr-list-concat"]], "polars.Expr.list.diff": [[439, "polars-expr-list-diff"]], "polars.Expr.flatten": [[397, "polars-expr-flatten"]], "polars.Expr.is_first": [[413, "polars-expr-is-first"]], "polars.Expr.list.get": [[445, "polars-expr-list-get"]], "polars.Expr.list.join": [[448, "polars-expr-list-join"]], "polars.Expr.dt.year": [[382, "polars-expr-dt-year"]], "polars.Expr.is_finite": [[412, "polars-expr-is-finite"]], "polars.Expr.list.len": [[450, "polars-expr-list-len"]], "polars.Expr.fill_nan": [[393, "polars-expr-fill-nan"]], "polars.Expr.is_not_nan": [[421, "polars-expr-is-not-nan"]], "polars.Expr.list.count_match": [[437, "polars-expr-list-count-match"]], "polars.Expr.ewm_std": [[387, "polars-expr-ewm-std"]], "polars.Expr.list.all": [[431, "polars-expr-list-all"]], "polars.Expr.list.any": [[432, "polars-expr-list-any"]], "polars.Expr.list.explode": [[443, "polars-expr-list-explode"]], "polars.Expr.get": [[403, "polars-expr-get"]], "polars.Expr.interpolate": [[409, "polars-expr-interpolate"]], "polars.Expr.list.first": [[444, "polars-expr-list-first"]], "polars.Expr.is_not_null": [[422, "polars-expr-is-not-null"]], "polars.Expr.fill_null": [[394, "polars-expr-fill-null"]], "polars.Expr.extend_constant": [[392, "polars-expr-extend-constant"]], "polars.Expr.filter": [[395, "polars-expr-filter"]], "polars.Expr.list.min": [[454, "polars-expr-list-min"]], "polars.Expr.gt": [[404, "polars-expr-gt"]], "polars.Expr.bin.decode": [[312, "polars-expr-bin-decode"]], "polars.Expr.drop_nans": [[340, "polars-expr-drop-nans"]], "polars.Expr.cumprod": [[333, "polars-expr-cumprod"]], "polars.Expr.cumulative_eval": [[335, "polars-expr-cumulative-eval"]], "polars.Expr.arg_true": [[304, "polars-expr-arg-true"]], "polars.Expr.dot": [[339, "polars-expr-dot"]], "polars.Expr.clip_min": [[325, "polars-expr-clip-min"]], "polars.Expr.cut": [[336, "polars-expr-cut"]], "polars.Expr.dt.dst_offset": [[350, "polars-expr-dt-dst-offset"]], "polars.Expr.dt.seconds": [[373, "polars-expr-dt-seconds"]], "polars.Expr.dt.datetime": [[347, "polars-expr-dt-datetime"]], "polars.Expr.cummax": [[331, "polars-expr-cummax"]], "polars.Expr.clip_max": [[324, "polars-expr-clip-max"]], "polars.Expr.arr.sum": [[308, "polars-expr-arr-sum"]], "polars.Expr.dt.epoch": [[351, "polars-expr-dt-epoch"]], "polars.Expr.cat.set_ordering": [[320, "polars-expr-cat-set-ordering"]], "polars.Expr.cbrt": [[321, "polars-expr-cbrt"]], "polars.Expr.dt.base_utc_offset": [[342, "polars-expr-dt-base-utc-offset"]], "polars.Expr.arg_unique": [[305, "polars-expr-arg-unique"]], "polars.Expr.dt.second": [[372, "polars-expr-dt-second"]], "polars.Expr.dt.hour": [[352, "polars-expr-dt-hour"]], "polars.Expr.dt.month": [[362, "polars-expr-dt-month"]], "polars.Expr.dt.offset_by": [[367, "polars-expr-dt-offset-by"]], "polars.Expr.dt.ordinal_day": [[368, "polars-expr-dt-ordinal-day"]], "polars.Expr.dt.nanoseconds": [[366, "polars-expr-dt-nanoseconds"]], "polars.Expr.dt.quarter": [[369, "polars-expr-dt-quarter"]], "polars.Expr.dt.convert_time_zone": [[345, "polars-expr-dt-convert-time-zone"]], "polars.Expr.dt.minutes": [[361, "polars-expr-dt-minutes"]], "polars.Expr.dt.is_leap_year": [[354, "polars-expr-dt-is-leap-year"]], "polars.Expr.degrees": [[337, "polars-expr-degrees"]], "polars.Expr.bin.starts_with": [[315, "polars-expr-bin-starts-with"]], "polars.Expr.dt.millisecond": [[358, "polars-expr-dt-millisecond"]], "polars.Expr.cummin": [[332, "polars-expr-cummin"]], "polars.Expr.bin.contains": [[311, "polars-expr-bin-contains"]], "polars.Expr.cumcount": [[330, "polars-expr-cumcount"]], "polars.Expr.dt.cast_time_unit": [[343, "polars-expr-dt-cast-time-unit"]], "polars.Expr.dt.time": [[375, "polars-expr-dt-time"]], "polars.Expr.dt.nanosecond": [[365, "polars-expr-dt-nanosecond"]], "polars.Expr.dt.hours": [[353, "polars-expr-dt-hours"]], "polars.Expr.cache": [[317, "polars-expr-cache"]], "polars.Expr.diff": [[338, "polars-expr-diff"]], "polars.Expr.cast": [[318, "polars-expr-cast"]], "polars.Expr.dt.day": [[348, "polars-expr-dt-day"]], "polars.Expr.dt.round": [[371, "polars-expr-dt-round"]], "polars.Expr.dt.date": [[346, "polars-expr-dt-date"]], "polars.Expr.dt.replace_time_zone": [[370, "polars-expr-dt-replace-time-zone"]], "polars.Expr.cos": [[326, "polars-expr-cos"]], "polars.Expr.dt.iso_year": [[355, "polars-expr-dt-iso-year"]], "polars.Expr.dt.combine": [[344, "polars-expr-dt-combine"]], "polars.Expr.dt.week": [[379, "polars-expr-dt-week"]], "polars.Expr.arr.min": [[307, "polars-expr-arr-min"]], "polars.Expr.cat.get_categories": [[319, "polars-expr-cat-get-categories"]], "polars.Expr.arr.max": [[306, "polars-expr-arr-max"]], "polars.Expr.dt.microseconds": [[357, "polars-expr-dt-microseconds"]], "polars.Expr.count": [[329, "polars-expr-count"]], "polars.Expr.clip": [[323, "polars-expr-clip"]], "polars.Expr.dt.month_start": [[364, "polars-expr-dt-month-start"]], "polars.Expr.dt.truncate": [[378, "polars-expr-dt-truncate"]], "polars.Expr.dt.microsecond": [[356, "polars-expr-dt-microsecond"]], "polars.Expr.cot": [[328, "polars-expr-cot"]], "polars.Expr.cosh": [[327, "polars-expr-cosh"]], "polars.Expr.dt.month_end": [[363, "polars-expr-dt-month-end"]], "polars.Expr.drop_nulls": [[341, "polars-expr-drop-nulls"]], "polars.Expr.dt.milliseconds": [[359, "polars-expr-dt-milliseconds"]], "polars.Expr.bin.encode": [[313, "polars-expr-bin-encode"]], "polars.Expr.dt.strftime": [[374, "polars-expr-dt-strftime"]], "polars.Expr.dt.days": [[349, "polars-expr-dt-days"]], "polars.Expr.bin.ends_with": [[314, "polars-expr-bin-ends-with"]], "polars.Expr.dt.timestamp": [[376, "polars-expr-dt-timestamp"]], "polars.Expr.dt.to_string": [[377, "polars-expr-dt-to-string"]], "polars.Expr.cumsum": [[334, "polars-expr-cumsum"]], "polars.Expr.ceil": [[322, "polars-expr-ceil"]], "polars.Expr.dt.minute": [[360, "polars-expr-dt-minute"]], "polars.Expr.arr.unique": [[309, "polars-expr-arr-unique"]], "polars.Expr.bottom_k": [[316, "polars-expr-bottom-k"]], "polars.Expr.backward_fill": [[310, "polars-expr-backward-fill"]], "polars.DataFrame.clear": [[152, "polars-dataframe-clear"]], "polars.DataFrame.replace": [[213, "polars-dataframe-replace"]], "polars.DataFrame.mean": [[198, "polars-dataframe-mean"]], "polars.DataFrame.shift_and_fill": [[227, "polars-dataframe-shift-and-fill"]], "polars.DataFrame.drop": [[157, "polars-dataframe-drop"]], "polars.DataFrame.frame_equal": [[170, "polars-dataframe-frame-equal"]], "polars.DataFrame.head": [[181, "polars-dataframe-head"]], "polars.DataFrame.null_count": [[205, "polars-dataframe-null-count"]], "polars.DataFrame.row": [[217, "polars-dataframe-row"]], "polars.DataFrame.groupby_rolling": [[179, "polars-dataframe-groupby-rolling"]], "polars.DataFrame.select": [[222, "polars-dataframe-select"]], "polars.DataFrame.merge_sorted": [[201, "polars-dataframe-merge-sorted"]], "polars.DataFrame.groupby_dynamic": [[178, "polars-dataframe-groupby-dynamic"]], "polars.DataFrame.columns": [[154, "polars-dataframe-columns"]], "polars.DataFrame.n_unique": [[204, "polars-dataframe-n-unique"]], "polars.DataFrame.rows": [[218, "polars-dataframe-rows"]], "polars.DataFrame.set_sorted": [[224, "polars-dataframe-set-sorted"]], "polars.DataFrame.group_by": [[174, "polars-dataframe-group-by"]], "polars.DataFrame.describe": [[156, "polars-dataframe-describe"]], "polars.DataFrame.is_duplicated": [[186, "polars-dataframe-is-duplicated"]], "polars.DataFrame.drop_nulls": [[159, "polars-dataframe-drop-nulls"]], "polars.DataFrame.rows_by_key": [[219, "polars-dataframe-rows-by-key"]], "polars.DataFrame.join_asof": [[193, "polars-dataframe-join-asof"]], "polars.DataFrame.find_idx_by_name": [[167, "polars-dataframe-find-idx-by-name"]], "polars.DataFrame.sample": [[220, "polars-dataframe-sample"]], "polars.DataFrame.get_columns": [[172, "polars-dataframe-get-columns"]], "polars.DataFrame.max": [[197, "polars-dataframe-max"]], "polars.DataFrame.min": [[202, "polars-dataframe-min"]], "polars.DataFrame.n_chunks": [[203, "polars-dataframe-n-chunks"]], "polars.DataFrame.limit": [[195, "polars-dataframe-limit"]], "polars.DataFrame.reverse": [[215, "polars-dataframe-reverse"]], "polars.DataFrame.quantile": [[210, "polars-dataframe-quantile"]], "polars.DataFrame.median": [[199, "polars-dataframe-median"]], "polars.DataFrame.rechunk": [[211, "polars-dataframe-rechunk"]], "polars.DataFrame.lazy": [[194, "polars-dataframe-lazy"]], "polars.DataFrame.melt": [[200, "polars-dataframe-melt"]], "polars.DataFrame.product": [[209, "polars-dataframe-product"]], "polars.DataFrame.iter_rows": [[190, "polars-dataframe-iter-rows"]], "polars.DataFrame.pivot": [[208, "polars-dataframe-pivot"]], "polars.DataFrame.shape": [[225, "polars-dataframe-shape"]], "polars.DataFrame.fill_null": [[165, "polars-dataframe-fill-null"]], "polars.DataFrame.join": [[192, "polars-dataframe-join"]], "polars.DataFrame.group_by_dynamic": [[175, "polars-dataframe-group-by-dynamic"]], "polars.DataFrame.schema": [[221, "polars-dataframe-schema"]], "polars.DataFrame.select_seq": [[223, "polars-dataframe-select-seq"]], "polars.DataFrame.hash_rows": [[180, "polars-dataframe-hash-rows"]], "polars.DataFrame.corr": [[155, "polars-dataframe-corr"]], "polars.DataFrame.fold": [[169, "polars-dataframe-fold"]], "polars.DataFrame.shift": [[226, "polars-dataframe-shift"]], "polars.DataFrame.interpolate": [[185, "polars-dataframe-interpolate"]], "polars.DataFrame.dtypes": [[160, "polars-dataframe-dtypes"]], "polars.DataFrame.clone": [[153, "polars-dataframe-clone"]], "polars.DataFrame.flags": [[168, "polars-dataframe-flags"]], "polars.DataFrame.is_empty": [[187, "polars-dataframe-is-empty"]], "polars.DataFrame.hstack": [[183, "polars-dataframe-hstack"]], "polars.DataFrame.explode": [[162, "polars-dataframe-explode"]], "polars.DataFrame.filter": [[166, "polars-dataframe-filter"]], "polars.DataFrame.height": [[182, "polars-dataframe-height"]], "polars.DataFrame.partition_by": [[206, "polars-dataframe-partition-by"]], "polars.DataFrame.drop_in_place": [[158, "polars-dataframe-drop-in-place"]], "polars.DataFrame.rename": [[212, "polars-dataframe-rename"]], "polars.DataFrame.replace_at_idx": [[214, "polars-dataframe-replace-at-idx"]], "polars.DataFrame.get_column": [[171, "polars-dataframe-get-column"]], "polars.DataFrame.insert_at_idx": [[184, "polars-dataframe-insert-at-idx"]], "polars.DataFrame.iter_slices": [[191, "polars-dataframe-iter-slices"]], "polars.DataFrame.rolling": [[216, "polars-dataframe-rolling"]], "polars.DataFrame.glimpse": [[173, "polars-dataframe-glimpse"]], "polars.DataFrame.is_unique": [[188, "polars-dataframe-is-unique"]], "polars.DataFrame.pipe": [[207, "polars-dataframe-pipe"]], "polars.DataFrame.groupby": [[177, "polars-dataframe-groupby"]], "polars.DataFrame.item": [[189, "polars-dataframe-item"]], "polars.DataFrame.group_by_rolling": [[176, "polars-dataframe-group-by-rolling"]], "polars.DataFrame.map_rows": [[196, "polars-dataframe-map-rows"]], "polars.DataFrame.fill_nan": [[164, "polars-dataframe-fill-nan"]], "polars.DataFrame.extend": [[163, "polars-dataframe-extend"]], "polars.DataFrame.estimated_size": [[161, "polars-dataframe-estimated-size"]], "polars.DataFrame.to_series": [[242, "polars-dataframe-to-series"]], "polars.DataFrame.update": [[249, "polars-dataframe-update"]], "polars.DataFrame.width": [[253, "polars-dataframe-width"]], "Exceptions": [[283, "exceptions"]], "polars.Expr.apply": [[293, "polars-expr-apply"]], "polars.Expr.arccos": [[295, "polars-expr-arccos"]], "polars.DataFrame.take_every": [[234, "polars-dataframe-take-every"]], "polars.Expr.arg_max": [[301, "polars-expr-arg-max"]], "polars.DataFrame.to_pandas": [[241, "polars-dataframe-to-pandas"]], "polars.dataframe.group_by.GroupBy.map_groups": [[265, "polars-dataframe-group-by-groupby-map-groups"]], "polars.DataFrame.upsample": [[250, "polars-dataframe-upsample"]], "polars.DataFrame.to_arrow": [[235, "polars-dataframe-to-arrow"]], "polars.DataFrame.with_columns_seq": [[255, "polars-dataframe-with-columns-seq"]], "polars.dataframe.group_by.GroupBy.last": [[264, "polars-dataframe-group-by-groupby-last"]], "polars.dataframe.group_by.GroupBy.first": [[262, "polars-dataframe-group-by-groupby-first"]], "polars.dataframe.group_by.GroupBy.sum": [[272, "polars-dataframe-group-by-groupby-sum"]], "polars.Expr.alias": [[288, "polars-expr-alias"]], "polars.Expr.and_": [[290, "polars-expr-and"]], "polars.Expr.any": [[291, "polars-expr-any"]], "polars.Expr.arcsinh": [[298, "polars-expr-arcsinh"]], "polars.DataFrame.vstack": [[252, "polars-dataframe-vstack"]], "polars.Expr.arg_min": [[302, "polars-expr-arg-min"]], "polars.DataFrame.top_k": [[244, "polars-dataframe-top-k"]], "polars.DataFrame.std": [[231, "polars-dataframe-std"]], "DataFrame": [[279, "dataframe"]], "polars.dataframe.group_by.GroupBy.median": [[268, "polars-dataframe-group-by-groupby-median"]], "polars.dataframe.group_by.GroupBy.quantile": [[271, "polars-dataframe-group-by-groupby-quantile"]], "polars.DataFrame.with_columns": [[254, "polars-dataframe-with-columns"]], "polars.Expr.agg_groups": [[287, "polars-expr-agg-groups"]], "polars.DataFrame.slice": [[229, "polars-dataframe-slice"]], "polars.dataframe.group_by.GroupBy.min": [[269, "polars-dataframe-group-by-groupby-min"]], "polars.DataFrame.with_row_count": [[256, "polars-dataframe-with-row-count"]], "polars.dataframe.group_by.GroupBy.count": [[261, "polars-dataframe-group-by-groupby-count"]], "polars.Expr.arg_sort": [[303, "polars-expr-arg-sort"]], "polars.DataFrame.tail": [[233, "polars-dataframe-tail"]], "polars.DataFrame.to_struct": [[243, "polars-dataframe-to-struct"]], "polars.Expr.arcsin": [[297, "polars-expr-arcsin"]], "polars.dataframe.group_by.GroupBy.tail": [[273, "polars-dataframe-group-by-groupby-tail"]], "polars.DataFrame.to_dicts": [[237, "polars-dataframe-to-dicts"]], "polars.Expr.add": [[286, "polars-expr-add"]], "polars.DataFrame.to_dummies": [[238, "polars-dataframe-to-dummies"]], "polars.DataFrame.sort": [[230, "polars-dataframe-sort"]], "polars.dataframe.group_by.GroupBy.max": [[266, "polars-dataframe-group-by-groupby-max"]], "polars.Expr.append": [[292, "polars-expr-append"]], "polars.DataFrame.to_dict": [[236, "polars-dataframe-to-dict"]], "polars.dataframe.group_by.GroupBy.n_unique": [[270, "polars-dataframe-group-by-groupby-n-unique"]], "polars.Expr.arctan": [[299, "polars-expr-arctan"]], "polars.DataFrame.unique": [[246, "polars-dataframe-unique"]], "polars.DataFrame.unnest": [[247, "polars-dataframe-unnest"]], "polars.dataframe.group_by.GroupBy.mean": [[267, "polars-dataframe-group-by-groupby-mean"]], "polars.Expr.abs": [[285, "polars-expr-abs"]], "polars.DataFrame.unstack": [[248, "polars-dataframe-unstack"]], "polars.DataFrame.sum": [[232, "polars-dataframe-sum"]], "polars.DataFrame.to_numpy": [[240, "polars-dataframe-to-numpy"]], "polars.dataframe.group_by.GroupBy.agg": [[258, "polars-dataframe-group-by-groupby-agg"]], "Data types": [[282, "data-types"]], "Nested": [[282, "nested"]], "Other": [[282, "other"]], "polars.Expr.arctanh": [[300, "polars-expr-arctanh"]], "polars.DataFrame.transpose": [[245, "polars-dataframe-transpose"]], "polars.DataFrame.var": [[251, "polars-dataframe-var"]], "polars.dataframe.group_by.GroupBy.__iter__": [[257, "polars-dataframe-group-by-groupby-iter"]], "polars.dataframe.group_by.GroupBy.apply": [[260, "polars-dataframe-group-by-groupby-apply"]], "polars.DataFrame.shrink_to_fit": [[228, "polars-dataframe-shrink-to-fit"]], "polars.dataframe.group_by.GroupBy.head": [[263, "polars-dataframe-group-by-groupby-head"]], "polars.Expr.all": [[289, "polars-expr-all"]], "polars.dataframe.group_by.GroupBy.all": [[259, "polars-dataframe-group-by-groupby-all"]], "polars.Expr.approx_n_unique": [[294, "polars-expr-approx-n-unique"]], "polars.Expr.arccosh": [[296, "polars-expr-arccosh"]], "polars.DataFrame.to_init_repr": [[239, "polars-dataframe-to-init-repr"]]}, "indexentries": {"array (class in polars)": [[2, "polars.Array"]], "__init__() (polars.array method)": [[2, "polars.Array.__init__"]], "binary (class in polars)": [[3, "polars.Binary"]], "__init__() (polars.binary method)": [[3, "polars.Binary.__init__"]], "boolean (class in polars)": [[4, "polars.Boolean"]], "__init__() (polars.boolean method)": [[4, "polars.Boolean.__init__"]], "categorical (class in polars)": [[5, "polars.Categorical"]], "__init__() (polars.categorical method)": [[5, "polars.Categorical.__init__"]], "activate_decimals() (polars.config class method)": [[6, "polars.Config.activate_decimals"]], "load() (polars.config class method)": [[7, "polars.Config.load"]], "load_from_file() (polars.config class method)": [[8, "polars.Config.load_from_file"]], "restore_defaults() (polars.config class method)": [[9, "polars.Config.restore_defaults"]], "save() (polars.config class method)": [[10, "polars.Config.save"]], "save_to_file() (polars.config class method)": [[11, "polars.Config.save_to_file"]], "set_ascii_tables() (polars.config class method)": [[12, "polars.Config.set_ascii_tables"]], "set_fmt_float() (polars.config class method)": [[13, "polars.Config.set_fmt_float"]], "set_fmt_str_lengths() (polars.config class method)": [[14, "polars.Config.set_fmt_str_lengths"]], "set_fmt_table_cell_list_len() (polars.config class method)": [[15, "polars.Config.set_fmt_table_cell_list_len"]], "set_streaming_chunk_size() (polars.config class method)": [[16, "polars.Config.set_streaming_chunk_size"]], "set_tbl_cell_alignment() (polars.config class method)": [[17, "polars.Config.set_tbl_cell_alignment"]], "set_tbl_cols() (polars.config class method)": [[18, "polars.Config.set_tbl_cols"]], "set_tbl_column_data_type_inline() (polars.config class method)": [[19, "polars.Config.set_tbl_column_data_type_inline"]], "set_tbl_dataframe_shape_below() (polars.config class method)": [[20, "polars.Config.set_tbl_dataframe_shape_below"]], "set_tbl_formatting() (polars.config class method)": [[21, "polars.Config.set_tbl_formatting"]], "set_tbl_hide_column_data_types() (polars.config class method)": [[22, "polars.Config.set_tbl_hide_column_data_types"]], "set_tbl_hide_column_names() (polars.config class method)": [[23, "polars.Config.set_tbl_hide_column_names"]], "set_tbl_hide_dataframe_shape() (polars.config class method)": [[24, "polars.Config.set_tbl_hide_dataframe_shape"]], "set_tbl_hide_dtype_separator() (polars.config class method)": [[25, "polars.Config.set_tbl_hide_dtype_separator"]], "set_tbl_rows() (polars.config class method)": [[26, "polars.Config.set_tbl_rows"]], "set_tbl_width_chars() (polars.config class method)": [[27, "polars.Config.set_tbl_width_chars"]], "set_verbose() (polars.config class method)": [[28, "polars.Config.set_verbose"]], "state() (polars.config class method)": [[29, "polars.Config.state"]], "write_avro() (polars.dataframe method)": [[30, "polars.DataFrame.write_avro"]], "write_csv() (polars.dataframe method)": [[31, "polars.DataFrame.write_csv"]], "write_database() (polars.dataframe method)": [[32, "polars.DataFrame.write_database"]], "write_delta() (polars.dataframe method)": [[33, "polars.DataFrame.write_delta"]], "write_excel() (polars.dataframe method)": [[34, "polars.DataFrame.write_excel"]], "write_ipc() (polars.dataframe method)": [[35, "polars.DataFrame.write_ipc"]], "write_ipc_stream() (polars.dataframe method)": [[36, "polars.DataFrame.write_ipc_stream"]], "write_json() (polars.dataframe method)": [[37, "polars.DataFrame.write_json"]], "write_ndjson() (polars.dataframe method)": [[38, "polars.DataFrame.write_ndjson"]], "write_parquet() (polars.dataframe method)": [[39, "polars.DataFrame.write_parquet"]], "datatype (class in polars)": [[40, "polars.DataType"]], "__init__() (polars.datatype method)": [[40, "polars.DataType.__init__"]], "date (class in polars)": [[41, "polars.Date"]], "__init__() (polars.date method)": [[41, "polars.Date.__init__"]], "datetime (class in polars)": [[42, "polars.Datetime"]], "__init__() (polars.datetime method)": [[42, "polars.Datetime.__init__"]], "decimal (class in polars)": [[43, "polars.Decimal"]], "__init__() (polars.decimal method)": [[43, "polars.Decimal.__init__"]], "duration (class in polars)": [[44, "polars.Duration"]], "__init__() (polars.duration method)": [[44, "polars.Duration.__init__"]], "float32 (class in polars)": [[45, "polars.Float32"]], "__init__() (polars.float32 method)": [[45, "polars.Float32.__init__"]], "float64 (class in polars)": [[46, "polars.Float64"]], "__init__() (polars.float64 method)": [[46, "polars.Float64.__init__"]], "int16 (class in polars)": [[47, "polars.Int16"]], "__init__() (polars.int16 method)": [[47, "polars.Int16.__init__"]], "int32 (class in polars)": [[48, "polars.Int32"]], "__init__() (polars.int32 method)": [[48, "polars.Int32.__init__"]], "int64 (class in polars)": [[49, "polars.Int64"]], "__init__() (polars.int64 method)": [[49, "polars.Int64.__init__"]], "int8 (class in polars)": [[50, "polars.Int8"]], "__init__() (polars.int8 method)": [[50, "polars.Int8.__init__"]], "sink_csv() (polars.lazyframe method)": [[51, "polars.LazyFrame.sink_csv"]], "sink_ipc() (polars.lazyframe method)": [[52, "polars.LazyFrame.sink_ipc"]], "sink_parquet() (polars.lazyframe method)": [[53, "polars.LazyFrame.sink_parquet"]], "list (class in polars)": [[54, "polars.List"]], "__init__() (polars.list method)": [[54, "polars.List.__init__"]], "null (class in polars)": [[55, "polars.Null"]], "__init__() (polars.null method)": [[55, "polars.Null.__init__"]], "object (class in polars)": [[56, "polars.Object"]], "__init__() (polars.object method)": [[56, "polars.Object.__init__"]], "execute() (polars.sqlcontext method)": [[57, "polars.SQLContext.execute"]], "register() (polars.sqlcontext method)": [[58, "polars.SQLContext.register"]], "register_globals() (polars.sqlcontext method)": [[59, "polars.SQLContext.register_globals"]], "register_many() (polars.sqlcontext method)": [[60, "polars.SQLContext.register_many"]], "tables() (polars.sqlcontext method)": [[61, "polars.SQLContext.tables"]], "unregister() (polars.sqlcontext method)": [[62, "polars.SQLContext.unregister"]], "stringcache (class in polars)": [[63, "polars.StringCache"]], "__init__() (polars.stringcache method)": [[63, "polars.StringCache.__init__"]], "struct (class in polars)": [[64, "polars.Struct"]], "__init__() (polars.struct method)": [[64, "polars.Struct.__init__"]], "time (class in polars)": [[65, "polars.Time"]], "__init__() (polars.time method)": [[65, "polars.Time.__init__"]], "uint16 (class in polars)": [[66, "polars.UInt16"]], "__init__() (polars.uint16 method)": [[66, "polars.UInt16.__init__"]], "uint32 (class in polars)": [[67, "polars.UInt32"]], "__init__() (polars.uint32 method)": [[67, "polars.UInt32.__init__"]], "uint64 (class in polars)": [[68, "polars.UInt64"]], "__init__() (polars.uint64 method)": [[68, "polars.UInt64.__init__"]], "uint8 (class in polars)": [[69, "polars.UInt8"]], "__init__() (polars.uint8 method)": [[69, "polars.UInt8.__init__"]], "unknown (class in polars)": [[70, "polars.Unknown"]], "__init__() (polars.unknown method)": [[70, "polars.Unknown.__init__"]], "utf8 (class in polars)": [[71, "polars.Utf8"]], "__init__() (polars.utf8 method)": [[71, "polars.Utf8.__init__"]], "align_frames() (in module polars)": [[72, "polars.align_frames"]], "register_dataframe_namespace() (in module polars.api)": [[73, "polars.api.register_dataframe_namespace"]], "register_expr_namespace() (in module polars.api)": [[74, "polars.api.register_expr_namespace"]], "register_lazyframe_namespace() (in module polars.api)": [[75, "polars.api.register_lazyframe_namespace"]], "register_series_namespace() (in module polars.api)": [[76, "polars.api.register_series_namespace"]], "build_info() (in module polars)": [[77, "polars.build_info"]], "collect_all() (in module polars)": [[78, "polars.collect_all"]], "collect_all_async() (in module polars)": [[79, "polars.collect_all_async"]], "concat() (in module polars)": [[80, "polars.concat"]], "disable_string_cache() (in module polars)": [[81, "polars.disable_string_cache"]], "enable_string_cache() (in module polars)": [[82, "polars.enable_string_cache"]], "arrowerror": [[83, "polars.exceptions.ArrowError"]], "columnnotfounderror": [[84, "polars.exceptions.ColumnNotFoundError"]], "computeerror": [[85, "polars.exceptions.ComputeError"]], "duplicateerror": [[86, "polars.exceptions.DuplicateError"]], "invalidoperationerror": [[87, "polars.exceptions.InvalidOperationError"]], "nodataerror": [[88, "polars.exceptions.NoDataError"]], "norowsreturnederror": [[89, "polars.exceptions.NoRowsReturnedError"]], "polarspanicerror": [[90, "polars.exceptions.PolarsPanicError"]], "rowserror": [[91, "polars.exceptions.RowsError"]], "schemaerror": [[92, "polars.exceptions.SchemaError"]], "schemafieldnotfounderror": [[93, "polars.exceptions.SchemaFieldNotFoundError"]], "shapeerror": [[94, "polars.exceptions.ShapeError"]], "structfieldnotfounderror": [[95, "polars.exceptions.StructFieldNotFoundError"]], "toomanyrowsreturnederror": [[96, "polars.exceptions.TooManyRowsReturnedError"]], "from_arrow() (in module polars)": [[97, "polars.from_arrow"]], "from_dataframe() (in module polars)": [[98, "polars.from_dataframe"]], "from_dict() (in module polars)": [[99, "polars.from_dict"]], "from_dicts() (in module polars)": [[100, "polars.from_dicts"]], "from_numpy() (in module polars)": [[101, "polars.from_numpy"]], "from_pandas() (in module polars)": [[102, "polars.from_pandas"]], "from_records() (in module polars)": [[103, "polars.from_records"]], "from_repr() (in module polars)": [[104, "polars.from_repr"]], "get_index_type() (in module polars)": [[105, "polars.get_index_type"]], "next_batches() (polars.io.csv.batched_reader.batchedcsvreader method)": [[106, "polars.io.csv.batched_reader.BatchedCsvReader.next_batches"]], "read_avro() (in module polars)": [[107, "polars.read_avro"]], "read_csv() (in module polars)": [[108, "polars.read_csv"]], "read_csv_batched() (in module polars)": [[109, "polars.read_csv_batched"]], "read_database() (in module polars)": [[110, "polars.read_database"]], "read_database_uri() (in module polars)": [[111, "polars.read_database_uri"]], "read_delta() (in module polars)": [[112, "polars.read_delta"]], "read_excel() (in module polars)": [[113, "polars.read_excel"]], "read_ipc() (in module polars)": [[114, "polars.read_ipc"]], "read_ipc_schema() (in module polars)": [[115, "polars.read_ipc_schema"]], "read_ipc_stream() (in module polars)": [[116, "polars.read_ipc_stream"]], "read_json() (in module polars)": [[117, "polars.read_json"]], "read_ndjson() (in module polars)": [[118, "polars.read_ndjson"]], "read_ods() (in module polars)": [[119, "polars.read_ods"]], "read_parquet() (in module polars)": [[120, "polars.read_parquet"]], "read_parquet_schema() (in module polars)": [[121, "polars.read_parquet_schema"]], "scan_csv() (in module polars)": [[122, "polars.scan_csv"]], "scan_delta() (in module polars)": [[123, "polars.scan_delta"]], "scan_iceberg() (in module polars)": [[124, "polars.scan_iceberg"]], "scan_ipc() (in module polars)": [[125, "polars.scan_ipc"]], "scan_ndjson() (in module polars)": [[126, "polars.scan_ndjson"]], "scan_parquet() (in module polars)": [[127, "polars.scan_parquet"]], "scan_pyarrow_dataset() (in module polars)": [[128, "polars.scan_pyarrow_dataset"]], "set_random_seed() (in module polars)": [[129, "polars.set_random_seed"]], "show_versions() (in module polars)": [[130, "polars.show_versions"]], "assert_frame_equal() (in module polars.testing)": [[131, "polars.testing.assert_frame_equal"]], "assert_frame_not_equal() (in module polars.testing)": [[132, "polars.testing.assert_frame_not_equal"]], "assert_series_equal() (in module polars.testing)": [[133, "polars.testing.assert_series_equal"]], "assert_series_not_equal() (in module polars.testing)": [[134, "polars.testing.assert_series_not_equal"]], "__init__() (polars.testing.parametric.column method)": [[135, "polars.testing.parametric.column.__init__"]], "column (class in polars.testing.parametric)": [[135, "polars.testing.parametric.column"]], "columns() (in module polars.testing.parametric)": [[136, "polars.testing.parametric.columns"]], "create_list_strategy() (in module polars.testing.parametric)": [[137, "polars.testing.parametric.create_list_strategy"]], "dataframes() (in module polars.testing.parametric)": [[138, "polars.testing.parametric.dataframes"]], "load_profile() (in module polars.testing.parametric)": [[139, "polars.testing.parametric.load_profile"]], "series() (in module polars.testing.parametric)": [[140, "polars.testing.parametric.series"]], "set_profile() (in module polars.testing.parametric)": [[141, "polars.testing.parametric.set_profile"]], "threadpool_size() (in module polars)": [[142, "polars.threadpool_size"]], "using_string_cache() (in module polars)": [[143, "polars.using_string_cache"]], "__dataframe__() (polars.dataframe method)": [[146, "polars.DataFrame.__dataframe__"]], "apply() (polars.dataframe method)": [[147, "polars.DataFrame.apply"]], "approx_n_unique() (polars.dataframe method)": [[148, "polars.DataFrame.approx_n_unique"]], "approx_unique() (polars.dataframe method)": [[149, "polars.DataFrame.approx_unique"]], "bottom_k() (polars.dataframe method)": [[150, "polars.DataFrame.bottom_k"]], "cast() (polars.dataframe method)": [[151, "polars.DataFrame.cast"]], "clear() (polars.dataframe method)": [[152, "polars.DataFrame.clear"]], "clone() (polars.dataframe method)": [[153, "polars.DataFrame.clone"]], "columns (polars.dataframe property)": [[154, "polars.DataFrame.columns"]], "corr() (polars.dataframe method)": [[155, "polars.DataFrame.corr"]], "describe() (polars.dataframe method)": [[156, "polars.DataFrame.describe"]], "drop() (polars.dataframe method)": [[157, "polars.DataFrame.drop"]], "drop_in_place() (polars.dataframe method)": [[158, "polars.DataFrame.drop_in_place"]], "drop_nulls() (polars.dataframe method)": [[159, "polars.DataFrame.drop_nulls"]], "dtypes (polars.dataframe property)": [[160, "polars.DataFrame.dtypes"]], "estimated_size() (polars.dataframe method)": [[161, "polars.DataFrame.estimated_size"]], "explode() (polars.dataframe method)": [[162, "polars.DataFrame.explode"]], "extend() (polars.dataframe method)": [[163, "polars.DataFrame.extend"]], "fill_nan() (polars.dataframe method)": [[164, "polars.DataFrame.fill_nan"]], "fill_null() (polars.dataframe method)": [[165, "polars.DataFrame.fill_null"]], "filter() (polars.dataframe method)": [[166, "polars.DataFrame.filter"]], "find_idx_by_name() (polars.dataframe method)": [[167, "polars.DataFrame.find_idx_by_name"]], "flags (polars.dataframe property)": [[168, "polars.DataFrame.flags"]], "fold() (polars.dataframe method)": [[169, "polars.DataFrame.fold"]], "frame_equal() (polars.dataframe method)": [[170, "polars.DataFrame.frame_equal"]], "get_column() (polars.dataframe method)": [[171, "polars.DataFrame.get_column"]], "get_columns() (polars.dataframe method)": [[172, "polars.DataFrame.get_columns"]], "glimpse() (polars.dataframe method)": [[173, "polars.DataFrame.glimpse"]], "group_by() (polars.dataframe method)": [[174, "polars.DataFrame.group_by"]], "group_by_dynamic() (polars.dataframe method)": [[175, "polars.DataFrame.group_by_dynamic"]], "group_by_rolling() (polars.dataframe method)": [[176, "polars.DataFrame.group_by_rolling"]], "groupby() (polars.dataframe method)": [[177, "polars.DataFrame.groupby"]], "groupby_dynamic() (polars.dataframe method)": [[178, "polars.DataFrame.groupby_dynamic"]], "groupby_rolling() (polars.dataframe method)": [[179, "polars.DataFrame.groupby_rolling"]], "hash_rows() (polars.dataframe method)": [[180, "polars.DataFrame.hash_rows"]], "head() (polars.dataframe method)": [[181, "polars.DataFrame.head"]], "height (polars.dataframe property)": [[182, "polars.DataFrame.height"]], "hstack() (polars.dataframe method)": [[183, "polars.DataFrame.hstack"]], "insert_at_idx() (polars.dataframe method)": [[184, "polars.DataFrame.insert_at_idx"]], "interpolate() (polars.dataframe method)": [[185, "polars.DataFrame.interpolate"]], "is_duplicated() (polars.dataframe method)": [[186, "polars.DataFrame.is_duplicated"]], "is_empty() (polars.dataframe method)": [[187, "polars.DataFrame.is_empty"]], "is_unique() (polars.dataframe method)": [[188, "polars.DataFrame.is_unique"]], "item() (polars.dataframe method)": [[189, "polars.DataFrame.item"]], "iter_rows() (polars.dataframe method)": [[190, "polars.DataFrame.iter_rows"]], "iter_slices() (polars.dataframe method)": [[191, "polars.DataFrame.iter_slices"]], "join() (polars.dataframe method)": [[192, "polars.DataFrame.join"]], "join_asof() (polars.dataframe method)": [[193, "polars.DataFrame.join_asof"]], "lazy() (polars.dataframe method)": [[194, "polars.DataFrame.lazy"]], "limit() (polars.dataframe method)": [[195, "polars.DataFrame.limit"]], "map_rows() (polars.dataframe method)": [[196, "polars.DataFrame.map_rows"]], "max() (polars.dataframe method)": [[197, "polars.DataFrame.max"]], "mean() (polars.dataframe method)": [[198, "polars.DataFrame.mean"]], "median() (polars.dataframe method)": [[199, "polars.DataFrame.median"]], "melt() (polars.dataframe method)": [[200, "polars.DataFrame.melt"]], "merge_sorted() (polars.dataframe method)": [[201, "polars.DataFrame.merge_sorted"]], "min() (polars.dataframe method)": [[202, "polars.DataFrame.min"]], "n_chunks() (polars.dataframe method)": [[203, "polars.DataFrame.n_chunks"]], "n_unique() (polars.dataframe method)": [[204, "polars.DataFrame.n_unique"]], "null_count() (polars.dataframe method)": [[205, "polars.DataFrame.null_count"]], "partition_by() (polars.dataframe method)": [[206, "polars.DataFrame.partition_by"]], "pipe() (polars.dataframe method)": [[207, "polars.DataFrame.pipe"]], "pivot() (polars.dataframe method)": [[208, "polars.DataFrame.pivot"]], "product() (polars.dataframe method)": [[209, "polars.DataFrame.product"]], "quantile() (polars.dataframe method)": [[210, "polars.DataFrame.quantile"]], "rechunk() (polars.dataframe method)": [[211, "polars.DataFrame.rechunk"]], "rename() (polars.dataframe method)": [[212, "polars.DataFrame.rename"]], "replace() (polars.dataframe method)": [[213, "polars.DataFrame.replace"]], "replace_at_idx() (polars.dataframe method)": [[214, "polars.DataFrame.replace_at_idx"]], "reverse() (polars.dataframe method)": [[215, "polars.DataFrame.reverse"]], "rolling() (polars.dataframe method)": [[216, "polars.DataFrame.rolling"]], "row() (polars.dataframe method)": [[217, "polars.DataFrame.row"]], "rows() (polars.dataframe method)": [[218, "polars.DataFrame.rows"]], "rows_by_key() (polars.dataframe method)": [[219, "polars.DataFrame.rows_by_key"]], "sample() (polars.dataframe method)": [[220, "polars.DataFrame.sample"]], "schema (polars.dataframe property)": [[221, "polars.DataFrame.schema"]], "select() (polars.dataframe method)": [[222, "polars.DataFrame.select"]], "select_seq() (polars.dataframe method)": [[223, "polars.DataFrame.select_seq"]], "set_sorted() (polars.dataframe method)": [[224, "polars.DataFrame.set_sorted"]], "shape (polars.dataframe property)": [[225, "polars.DataFrame.shape"]], "shift() (polars.dataframe method)": [[226, "polars.DataFrame.shift"]], "shift_and_fill() (polars.dataframe method)": [[227, "polars.DataFrame.shift_and_fill"]], "shrink_to_fit() (polars.dataframe method)": [[228, "polars.DataFrame.shrink_to_fit"]], "slice() (polars.dataframe method)": [[229, "polars.DataFrame.slice"]], "sort() (polars.dataframe method)": [[230, "polars.DataFrame.sort"]], "std() (polars.dataframe method)": [[231, "polars.DataFrame.std"]], "sum() (polars.dataframe method)": [[232, "polars.DataFrame.sum"]], "tail() (polars.dataframe method)": [[233, "polars.DataFrame.tail"]], "take_every() (polars.dataframe method)": [[234, "polars.DataFrame.take_every"]], "to_arrow() (polars.dataframe method)": [[235, "polars.DataFrame.to_arrow"]], "to_dict() (polars.dataframe method)": [[236, "polars.DataFrame.to_dict"]], "to_dicts() (polars.dataframe method)": [[237, "polars.DataFrame.to_dicts"]], "to_dummies() (polars.dataframe method)": [[238, "polars.DataFrame.to_dummies"]], "to_init_repr() (polars.dataframe method)": [[239, "polars.DataFrame.to_init_repr"]], "to_numpy() (polars.dataframe method)": [[240, "polars.DataFrame.to_numpy"]], "to_pandas() (polars.dataframe method)": [[241, "polars.DataFrame.to_pandas"]], "to_series() (polars.dataframe method)": [[242, "polars.DataFrame.to_series"]], "to_struct() (polars.dataframe method)": [[243, "polars.DataFrame.to_struct"]], "top_k() (polars.dataframe method)": [[244, "polars.DataFrame.top_k"]], "transpose() (polars.dataframe method)": [[245, "polars.DataFrame.transpose"]], "unique() (polars.dataframe method)": [[246, "polars.DataFrame.unique"]], "unnest() (polars.dataframe method)": [[247, "polars.DataFrame.unnest"]], "unstack() (polars.dataframe method)": [[248, "polars.DataFrame.unstack"]], "update() (polars.dataframe method)": [[249, "polars.DataFrame.update"]], "upsample() (polars.dataframe method)": [[250, "polars.DataFrame.upsample"]], "var() (polars.dataframe method)": [[251, "polars.DataFrame.var"]], "vstack() (polars.dataframe method)": [[252, "polars.DataFrame.vstack"]], "width (polars.dataframe property)": [[253, "polars.DataFrame.width"]], "with_columns() (polars.dataframe method)": [[254, "polars.DataFrame.with_columns"]], "with_columns_seq() (polars.dataframe method)": [[255, "polars.DataFrame.with_columns_seq"]], "with_row_count() (polars.dataframe method)": [[256, "polars.DataFrame.with_row_count"]], "__iter__() (polars.dataframe.group_by.groupby method)": [[257, "polars.dataframe.group_by.GroupBy.__iter__"]], "agg() (polars.dataframe.group_by.groupby method)": [[258, "polars.dataframe.group_by.GroupBy.agg"]], "all() (polars.dataframe.group_by.groupby method)": [[259, "polars.dataframe.group_by.GroupBy.all"]], "apply() (polars.dataframe.group_by.groupby method)": [[260, "polars.dataframe.group_by.GroupBy.apply"]], "count() (polars.dataframe.group_by.groupby method)": [[261, "polars.dataframe.group_by.GroupBy.count"]], "first() (polars.dataframe.group_by.groupby method)": [[262, "polars.dataframe.group_by.GroupBy.first"]], "head() (polars.dataframe.group_by.groupby method)": [[263, "polars.dataframe.group_by.GroupBy.head"]], "last() (polars.dataframe.group_by.groupby method)": [[264, "polars.dataframe.group_by.GroupBy.last"]], "map_groups() (polars.dataframe.group_by.groupby method)": [[265, "polars.dataframe.group_by.GroupBy.map_groups"]], "max() (polars.dataframe.group_by.groupby method)": [[266, "polars.dataframe.group_by.GroupBy.max"]], "mean() (polars.dataframe.group_by.groupby method)": [[267, "polars.dataframe.group_by.GroupBy.mean"]], "median() (polars.dataframe.group_by.groupby method)": [[268, "polars.dataframe.group_by.GroupBy.median"]], "min() (polars.dataframe.group_by.groupby method)": [[269, "polars.dataframe.group_by.GroupBy.min"]], "n_unique() (polars.dataframe.group_by.groupby method)": [[270, "polars.dataframe.group_by.GroupBy.n_unique"]], "quantile() (polars.dataframe.group_by.groupby method)": [[271, "polars.dataframe.group_by.GroupBy.quantile"]], "sum() (polars.dataframe.group_by.groupby method)": [[272, "polars.dataframe.group_by.GroupBy.sum"]], "tail() (polars.dataframe.group_by.groupby method)": [[273, "polars.dataframe.group_by.GroupBy.tail"]], "abs() (polars.expr method)": [[285, "polars.Expr.abs"]], "add() (polars.expr method)": [[286, "polars.Expr.add"]], "agg_groups() (polars.expr method)": [[287, "polars.Expr.agg_groups"]], "alias() (polars.expr method)": [[288, "polars.Expr.alias"]], "all() (polars.expr method)": [[289, "polars.Expr.all"]], "and_() (polars.expr method)": [[290, "polars.Expr.and_"]], "any() (polars.expr method)": [[291, "polars.Expr.any"]], "append() (polars.expr method)": [[292, "polars.Expr.append"]], "apply() (polars.expr method)": [[293, "polars.Expr.apply"]], "approx_n_unique() (polars.expr method)": [[294, "polars.Expr.approx_n_unique"]], "arccos() (polars.expr method)": [[295, "polars.Expr.arccos"]], "arccosh() (polars.expr method)": [[296, "polars.Expr.arccosh"]], "arcsin() (polars.expr method)": [[297, "polars.Expr.arcsin"]], "arcsinh() (polars.expr method)": [[298, "polars.Expr.arcsinh"]], "arctan() (polars.expr method)": [[299, "polars.Expr.arctan"]], "arctanh() (polars.expr method)": [[300, "polars.Expr.arctanh"]], "arg_max() (polars.expr method)": [[301, "polars.Expr.arg_max"]], "arg_min() (polars.expr method)": [[302, "polars.Expr.arg_min"]], "arg_sort() (polars.expr method)": [[303, "polars.Expr.arg_sort"]], "arg_true() (polars.expr method)": [[304, "polars.Expr.arg_true"]], "arg_unique() (polars.expr method)": [[305, "polars.Expr.arg_unique"]], "max() (polars.expr.arr method)": [[306, "polars.Expr.arr.max"]], "min() (polars.expr.arr method)": [[307, "polars.Expr.arr.min"]], "sum() (polars.expr.arr method)": [[308, "polars.Expr.arr.sum"]], "unique() (polars.expr.arr method)": [[309, "polars.Expr.arr.unique"]], "backward_fill() (polars.expr method)": [[310, "polars.Expr.backward_fill"]], "contains() (polars.expr.bin method)": [[311, "polars.Expr.bin.contains"]], "decode() (polars.expr.bin method)": [[312, "polars.Expr.bin.decode"]], "encode() (polars.expr.bin method)": [[313, "polars.Expr.bin.encode"]], "ends_with() (polars.expr.bin method)": [[314, "polars.Expr.bin.ends_with"]], "starts_with() (polars.expr.bin method)": [[315, "polars.Expr.bin.starts_with"]], "bottom_k() (polars.expr method)": [[316, "polars.Expr.bottom_k"]], "cache() (polars.expr method)": [[317, "polars.Expr.cache"]], "cast() (polars.expr method)": [[318, "polars.Expr.cast"]], "get_categories() (polars.expr.cat method)": [[319, "polars.Expr.cat.get_categories"]], "set_ordering() (polars.expr.cat method)": [[320, "polars.Expr.cat.set_ordering"]], "cbrt() (polars.expr method)": [[321, "polars.Expr.cbrt"]], "ceil() (polars.expr method)": [[322, "polars.Expr.ceil"]], "clip() (polars.expr method)": [[323, "polars.Expr.clip"]], "clip_max() (polars.expr method)": [[324, "polars.Expr.clip_max"]], "clip_min() (polars.expr method)": [[325, "polars.Expr.clip_min"]], "cos() (polars.expr method)": [[326, "polars.Expr.cos"]], "cosh() (polars.expr method)": [[327, "polars.Expr.cosh"]], "cot() (polars.expr method)": [[328, "polars.Expr.cot"]], "count() (polars.expr method)": [[329, "polars.Expr.count"]], "cumcount() (polars.expr method)": [[330, "polars.Expr.cumcount"]], "cummax() (polars.expr method)": [[331, "polars.Expr.cummax"]], "cummin() (polars.expr method)": [[332, "polars.Expr.cummin"]], "cumprod() (polars.expr method)": [[333, "polars.Expr.cumprod"]], "cumsum() (polars.expr method)": [[334, "polars.Expr.cumsum"]], "cumulative_eval() (polars.expr method)": [[335, "polars.Expr.cumulative_eval"]], "cut() (polars.expr method)": [[336, "polars.Expr.cut"]], "degrees() (polars.expr method)": [[337, "polars.Expr.degrees"]], "diff() (polars.expr method)": [[338, "polars.Expr.diff"]], "dot() (polars.expr method)": [[339, "polars.Expr.dot"]], "drop_nans() (polars.expr method)": [[340, "polars.Expr.drop_nans"]], "drop_nulls() (polars.expr method)": [[341, "polars.Expr.drop_nulls"]], "base_utc_offset() (polars.expr.dt method)": [[342, "polars.Expr.dt.base_utc_offset"]], "cast_time_unit() (polars.expr.dt method)": [[343, "polars.Expr.dt.cast_time_unit"]], "combine() (polars.expr.dt method)": [[344, "polars.Expr.dt.combine"]], "convert_time_zone() (polars.expr.dt method)": [[345, "polars.Expr.dt.convert_time_zone"]], "date() (polars.expr.dt method)": [[346, "polars.Expr.dt.date"]], "datetime() (polars.expr.dt method)": [[347, "polars.Expr.dt.datetime"]], "day() (polars.expr.dt method)": [[348, "polars.Expr.dt.day"]], "days() (polars.expr.dt method)": [[349, "polars.Expr.dt.days"]], "dst_offset() (polars.expr.dt method)": [[350, "polars.Expr.dt.dst_offset"]], "epoch() (polars.expr.dt method)": [[351, "polars.Expr.dt.epoch"]], "hour() (polars.expr.dt method)": [[352, "polars.Expr.dt.hour"]], "hours() (polars.expr.dt method)": [[353, "polars.Expr.dt.hours"]], "is_leap_year() (polars.expr.dt method)": [[354, "polars.Expr.dt.is_leap_year"]], "iso_year() (polars.expr.dt method)": [[355, "polars.Expr.dt.iso_year"]], "microsecond() (polars.expr.dt method)": [[356, "polars.Expr.dt.microsecond"]], "microseconds() (polars.expr.dt method)": [[357, "polars.Expr.dt.microseconds"]], "millisecond() (polars.expr.dt method)": [[358, "polars.Expr.dt.millisecond"]], "milliseconds() (polars.expr.dt method)": [[359, "polars.Expr.dt.milliseconds"]], "minute() (polars.expr.dt method)": [[360, "polars.Expr.dt.minute"]], "minutes() (polars.expr.dt method)": [[361, "polars.Expr.dt.minutes"]], "month() (polars.expr.dt method)": [[362, "polars.Expr.dt.month"]], "month_end() (polars.expr.dt method)": [[363, "polars.Expr.dt.month_end"]], "month_start() (polars.expr.dt method)": [[364, "polars.Expr.dt.month_start"]], "nanosecond() (polars.expr.dt method)": [[365, "polars.Expr.dt.nanosecond"]], "nanoseconds() (polars.expr.dt method)": [[366, "polars.Expr.dt.nanoseconds"]], "offset_by() (polars.expr.dt method)": [[367, "polars.Expr.dt.offset_by"]], "ordinal_day() (polars.expr.dt method)": [[368, "polars.Expr.dt.ordinal_day"]], "quarter() (polars.expr.dt method)": [[369, "polars.Expr.dt.quarter"]], "replace_time_zone() (polars.expr.dt method)": [[370, "polars.Expr.dt.replace_time_zone"]], "round() (polars.expr.dt method)": [[371, "polars.Expr.dt.round"]], "second() (polars.expr.dt method)": [[372, "polars.Expr.dt.second"]], "seconds() (polars.expr.dt method)": [[373, "polars.Expr.dt.seconds"]], "strftime() (polars.expr.dt method)": [[374, "polars.Expr.dt.strftime"]], "time() (polars.expr.dt method)": [[375, "polars.Expr.dt.time"]], "timestamp() (polars.expr.dt method)": [[376, "polars.Expr.dt.timestamp"]], "to_string() (polars.expr.dt method)": [[377, "polars.Expr.dt.to_string"]], "truncate() (polars.expr.dt method)": [[378, "polars.Expr.dt.truncate"]], "week() (polars.expr.dt method)": [[379, "polars.Expr.dt.week"]], "weekday() (polars.expr.dt method)": [[380, "polars.Expr.dt.weekday"]], "with_time_unit() (polars.expr.dt method)": [[381, "polars.Expr.dt.with_time_unit"]], "year() (polars.expr.dt method)": [[382, "polars.Expr.dt.year"]], "entropy() (polars.expr method)": [[383, "polars.Expr.entropy"]], "eq() (polars.expr method)": [[384, "polars.Expr.eq"]], "eq_missing() (polars.expr method)": [[385, "polars.Expr.eq_missing"]], "ewm_mean() (polars.expr method)": [[386, "polars.Expr.ewm_mean"]], "ewm_std() (polars.expr method)": [[387, "polars.Expr.ewm_std"]], "ewm_var() (polars.expr method)": [[388, "polars.Expr.ewm_var"]], "exclude() (polars.expr method)": [[389, "polars.Expr.exclude"]], "exp() (polars.expr method)": [[390, "polars.Expr.exp"]], "explode() (polars.expr method)": [[391, "polars.Expr.explode"]], "extend_constant() (polars.expr method)": [[392, "polars.Expr.extend_constant"]], "fill_nan() (polars.expr method)": [[393, "polars.Expr.fill_nan"]], "fill_null() (polars.expr method)": [[394, "polars.Expr.fill_null"]], "filter() (polars.expr method)": [[395, "polars.Expr.filter"]], "first() (polars.expr method)": [[396, "polars.Expr.first"]], "flatten() (polars.expr method)": [[397, "polars.Expr.flatten"]], "floor() (polars.expr method)": [[398, "polars.Expr.floor"]], "floordiv() (polars.expr method)": [[399, "polars.Expr.floordiv"]], "forward_fill() (polars.expr method)": [[400, "polars.Expr.forward_fill"]], "from_json() (polars.expr class method)": [[401, "polars.Expr.from_json"]], "ge() (polars.expr method)": [[402, "polars.Expr.ge"]], "get() (polars.expr method)": [[403, "polars.Expr.get"]], "gt() (polars.expr method)": [[404, "polars.Expr.gt"]], "hash() (polars.expr method)": [[405, "polars.Expr.hash"]], "head() (polars.expr method)": [[406, "polars.Expr.head"]], "implode() (polars.expr method)": [[407, "polars.Expr.implode"]], "inspect() (polars.expr method)": [[408, "polars.Expr.inspect"]], "interpolate() (polars.expr method)": [[409, "polars.Expr.interpolate"]], "is_between() (polars.expr method)": [[410, "polars.Expr.is_between"]], "is_duplicated() (polars.expr method)": [[411, "polars.Expr.is_duplicated"]], "is_finite() (polars.expr method)": [[412, "polars.Expr.is_finite"]], "is_first() (polars.expr method)": [[413, "polars.Expr.is_first"]], "is_first_distinct() (polars.expr method)": [[414, "polars.Expr.is_first_distinct"]], "is_in() (polars.expr method)": [[415, "polars.Expr.is_in"]], "is_infinite() (polars.expr method)": [[416, "polars.Expr.is_infinite"]], "is_last() (polars.expr method)": [[417, "polars.Expr.is_last"]], "is_last_distinct() (polars.expr method)": [[418, "polars.Expr.is_last_distinct"]], "is_nan() (polars.expr method)": [[419, "polars.Expr.is_nan"]], "is_not() (polars.expr method)": [[420, "polars.Expr.is_not"]], "is_not_nan() (polars.expr method)": [[421, "polars.Expr.is_not_nan"]], "is_not_null() (polars.expr method)": [[422, "polars.Expr.is_not_null"]], "is_null() (polars.expr method)": [[423, "polars.Expr.is_null"]], "is_unique() (polars.expr method)": [[424, "polars.Expr.is_unique"]], "keep_name() (polars.expr method)": [[425, "polars.Expr.keep_name"]], "kurtosis() (polars.expr method)": [[426, "polars.Expr.kurtosis"]], "last() (polars.expr method)": [[427, "polars.Expr.last"]], "le() (polars.expr method)": [[428, "polars.Expr.le"]], "len() (polars.expr method)": [[429, "polars.Expr.len"]], "limit() (polars.expr method)": [[430, "polars.Expr.limit"]], "all() (polars.expr.list method)": [[431, "polars.Expr.list.all"]], "any() (polars.expr.list method)": [[432, "polars.Expr.list.any"]], "arg_max() (polars.expr.list method)": [[433, "polars.Expr.list.arg_max"]], "arg_min() (polars.expr.list method)": [[434, "polars.Expr.list.arg_min"]], "concat() (polars.expr.list method)": [[435, "polars.Expr.list.concat"]], "contains() (polars.expr.list method)": [[436, "polars.Expr.list.contains"]], "count_match() (polars.expr.list method)": [[437, "polars.Expr.list.count_match"]], "count_matches() (polars.expr.list method)": [[438, "polars.Expr.list.count_matches"]], "diff() (polars.expr.list method)": [[439, "polars.Expr.list.diff"]], "difference() (polars.expr.list method)": [[440, "polars.Expr.list.difference"]], "drop_nulls() (polars.expr.list method)": [[441, "polars.Expr.list.drop_nulls"]], "eval() (polars.expr.list method)": [[442, "polars.Expr.list.eval"]], "explode() (polars.expr.list method)": [[443, "polars.Expr.list.explode"]], "first() (polars.expr.list method)": [[444, "polars.Expr.list.first"]], "get() (polars.expr.list method)": [[445, "polars.Expr.list.get"]], "head() (polars.expr.list method)": [[446, "polars.Expr.list.head"]], "intersection() (polars.expr.list method)": [[447, "polars.Expr.list.intersection"]], "join() (polars.expr.list method)": [[448, "polars.Expr.list.join"]], "last() (polars.expr.list method)": [[449, "polars.Expr.list.last"]], "len() (polars.expr.list method)": [[450, "polars.Expr.list.len"]], "lengths() (polars.expr.list method)": [[451, "polars.Expr.list.lengths"]], "max() (polars.expr.list method)": [[452, "polars.Expr.list.max"]], "mean() (polars.expr.list method)": [[453, "polars.Expr.list.mean"]], "min() (polars.expr.list method)": [[454, "polars.Expr.list.min"]], "reverse() (polars.expr.list method)": [[455, "polars.Expr.list.reverse"]], "sample() (polars.expr.list method)": [[456, "polars.Expr.list.sample"]], "set_difference() (polars.expr.list method)": [[457, "polars.Expr.list.set_difference"]], "set_intersection() (polars.expr.list method)": [[458, "polars.Expr.list.set_intersection"]], "set_symmetric_difference() (polars.expr.list method)": [[459, "polars.Expr.list.set_symmetric_difference"]], "set_union() (polars.expr.list method)": [[460, "polars.Expr.list.set_union"]], "shift() (polars.expr.list method)": [[461, "polars.Expr.list.shift"]], "slice() (polars.expr.list method)": [[462, "polars.Expr.list.slice"]], "sort() (polars.expr.list method)": [[463, "polars.Expr.list.sort"]], "sum() (polars.expr.list method)": [[464, "polars.Expr.list.sum"]], "symmetric_difference() (polars.expr.list method)": [[465, "polars.Expr.list.symmetric_difference"]], "tail() (polars.expr.list method)": [[466, "polars.Expr.list.tail"]], "take() (polars.expr.list method)": [[467, "polars.Expr.list.take"]], "to_struct() (polars.expr.list method)": [[468, "polars.Expr.list.to_struct"]], "union() (polars.expr.list method)": [[469, "polars.Expr.list.union"]], "unique() (polars.expr.list method)": [[470, "polars.Expr.list.unique"]], "log() (polars.expr method)": [[471, "polars.Expr.log"]], "log10() (polars.expr method)": [[472, "polars.Expr.log10"]], "log1p() (polars.expr method)": [[473, "polars.Expr.log1p"]], "lower_bound() (polars.expr method)": [[474, "polars.Expr.lower_bound"]], "lt() (polars.expr method)": [[475, "polars.Expr.lt"]], "map() (polars.expr method)": [[476, "polars.Expr.map"]], "map_alias() (polars.expr method)": [[477, "polars.Expr.map_alias"]], "map_batches() (polars.expr method)": [[478, "polars.Expr.map_batches"]], "map_dict() (polars.expr method)": [[479, "polars.Expr.map_dict"]], "map_elements() (polars.expr method)": [[480, "polars.Expr.map_elements"]], "max() (polars.expr method)": [[481, "polars.Expr.max"]], "mean() (polars.expr method)": [[482, "polars.Expr.mean"]], "median() (polars.expr method)": [[483, "polars.Expr.median"]], "eq() (polars.expr.meta method)": [[484, "polars.Expr.meta.eq"]], "has_multiple_outputs() (polars.expr.meta method)": [[485, "polars.Expr.meta.has_multiple_outputs"]], "is_regex_projection() (polars.expr.meta method)": [[486, "polars.Expr.meta.is_regex_projection"]], "ne() (polars.expr.meta method)": [[487, "polars.Expr.meta.ne"]], "output_name() (polars.expr.meta method)": [[488, "polars.Expr.meta.output_name"]], "pop() (polars.expr.meta method)": [[489, "polars.Expr.meta.pop"]], "root_names() (polars.expr.meta method)": [[490, "polars.Expr.meta.root_names"]], "tree_format() (polars.expr.meta method)": [[491, "polars.Expr.meta.tree_format"]], "undo_aliases() (polars.expr.meta method)": [[492, "polars.Expr.meta.undo_aliases"]], "write_json() (polars.expr.meta method)": [[493, "polars.Expr.meta.write_json"]], "min() (polars.expr method)": [[494, "polars.Expr.min"]], "mod() (polars.expr method)": [[495, "polars.Expr.mod"]], "mode() (polars.expr method)": [[496, "polars.Expr.mode"]], "mul() (polars.expr method)": [[497, "polars.Expr.mul"]], "n_unique() (polars.expr method)": [[498, "polars.Expr.n_unique"]], "keep() (polars.expr.name method)": [[499, "polars.Expr.name.keep"]], "map() (polars.expr.name method)": [[500, "polars.Expr.name.map"]], "prefix() (polars.expr.name method)": [[501, "polars.Expr.name.prefix"]], "suffix() (polars.expr.name method)": [[502, "polars.Expr.name.suffix"]], "to_lowercase() (polars.expr.name method)": [[503, "polars.Expr.name.to_lowercase"]], "to_uppercase() (polars.expr.name method)": [[504, "polars.Expr.name.to_uppercase"]], "nan_max() (polars.expr method)": [[505, "polars.Expr.nan_max"]], "nan_min() (polars.expr method)": [[506, "polars.Expr.nan_min"]], "ne() (polars.expr method)": [[507, "polars.Expr.ne"]], "ne_missing() (polars.expr method)": [[508, "polars.Expr.ne_missing"]], "not_() (polars.expr method)": [[509, "polars.Expr.not_"]], "null_count() (polars.expr method)": [[510, "polars.Expr.null_count"]], "or_() (polars.expr method)": [[511, "polars.Expr.or_"]], "over() (polars.expr method)": [[512, "polars.Expr.over"]], "pct_change() (polars.expr method)": [[513, "polars.Expr.pct_change"]], "peak_max() (polars.expr method)": [[514, "polars.Expr.peak_max"]], "peak_min() (polars.expr method)": [[515, "polars.Expr.peak_min"]], "pipe() (polars.expr method)": [[516, "polars.Expr.pipe"]], "pow() (polars.expr method)": [[517, "polars.Expr.pow"]], "prefix() (polars.expr method)": [[518, "polars.Expr.prefix"]], "product() (polars.expr method)": [[519, "polars.Expr.product"]], "qcut() (polars.expr method)": [[520, "polars.Expr.qcut"]], "quantile() (polars.expr method)": [[521, "polars.Expr.quantile"]], "radians() (polars.expr method)": [[522, "polars.Expr.radians"]], "rank() (polars.expr method)": [[523, "polars.Expr.rank"]], "rechunk() (polars.expr method)": [[524, "polars.Expr.rechunk"]], "reinterpret() (polars.expr method)": [[525, "polars.Expr.reinterpret"]], "repeat_by() (polars.expr method)": [[526, "polars.Expr.repeat_by"]], "reshape() (polars.expr method)": [[527, "polars.Expr.reshape"]], "reverse() (polars.expr method)": [[528, "polars.Expr.reverse"]], "rle() (polars.expr method)": [[529, "polars.Expr.rle"]], "rle_id() (polars.expr method)": [[530, "polars.Expr.rle_id"]], "rolling() (polars.expr method)": [[531, "polars.Expr.rolling"]], "rolling_apply() (polars.expr method)": [[532, "polars.Expr.rolling_apply"]], "rolling_map() (polars.expr method)": [[533, "polars.Expr.rolling_map"]], "rolling_max() (polars.expr method)": [[534, "polars.Expr.rolling_max"]], "rolling_mean() (polars.expr method)": [[535, "polars.Expr.rolling_mean"]], "rolling_median() (polars.expr method)": [[536, "polars.Expr.rolling_median"]], "rolling_min() (polars.expr method)": [[537, "polars.Expr.rolling_min"]], "rolling_quantile() (polars.expr method)": [[538, "polars.Expr.rolling_quantile"]], "rolling_skew() (polars.expr method)": [[539, "polars.Expr.rolling_skew"]], "rolling_std() (polars.expr method)": [[540, "polars.Expr.rolling_std"]], "rolling_sum() (polars.expr method)": [[541, "polars.Expr.rolling_sum"]], "rolling_var() (polars.expr method)": [[542, "polars.Expr.rolling_var"]], "round() (polars.expr method)": [[543, "polars.Expr.round"]], "sample() (polars.expr method)": [[544, "polars.Expr.sample"]], "search_sorted() (polars.expr method)": [[545, "polars.Expr.search_sorted"]], "set_sorted() (polars.expr method)": [[546, "polars.Expr.set_sorted"]], "shift() (polars.expr method)": [[547, "polars.Expr.shift"]], "shift_and_fill() (polars.expr method)": [[548, "polars.Expr.shift_and_fill"]], "shrink_dtype() (polars.expr method)": [[549, "polars.Expr.shrink_dtype"]], "shuffle() (polars.expr method)": [[550, "polars.Expr.shuffle"]], "sign() (polars.expr method)": [[551, "polars.Expr.sign"]], "sin() (polars.expr method)": [[552, "polars.Expr.sin"]], "sinh() (polars.expr method)": [[553, "polars.Expr.sinh"]], "skew() (polars.expr method)": [[554, "polars.Expr.skew"]], "slice() (polars.expr method)": [[555, "polars.Expr.slice"]], "sort() (polars.expr method)": [[556, "polars.Expr.sort"]], "sort_by() (polars.expr method)": [[557, "polars.Expr.sort_by"]], "sqrt() (polars.expr method)": [[558, "polars.Expr.sqrt"]], "std() (polars.expr method)": [[559, "polars.Expr.std"]], "concat() (polars.expr.str method)": [[560, "polars.Expr.str.concat"]], "contains() (polars.expr.str method)": [[561, "polars.Expr.str.contains"]], "count_match() (polars.expr.str method)": [[562, "polars.Expr.str.count_match"]], "count_matches() (polars.expr.str method)": [[563, "polars.Expr.str.count_matches"]], "decode() (polars.expr.str method)": [[564, "polars.Expr.str.decode"]], "encode() (polars.expr.str method)": [[565, "polars.Expr.str.encode"]], "ends_with() (polars.expr.str method)": [[566, "polars.Expr.str.ends_with"]], "explode() (polars.expr.str method)": [[567, "polars.Expr.str.explode"]], "extract() (polars.expr.str method)": [[568, "polars.Expr.str.extract"]], "extract_all() (polars.expr.str method)": [[569, "polars.Expr.str.extract_all"]], "extract_groups() (polars.expr.str method)": [[570, "polars.Expr.str.extract_groups"]], "json_extract() (polars.expr.str method)": [[571, "polars.Expr.str.json_extract"]], "json_path_match() (polars.expr.str method)": [[572, "polars.Expr.str.json_path_match"]], "len_bytes() (polars.expr.str method)": [[573, "polars.Expr.str.len_bytes"]], "len_chars() (polars.expr.str method)": [[574, "polars.Expr.str.len_chars"]], "lengths() (polars.expr.str method)": [[575, "polars.Expr.str.lengths"]], "ljust() (polars.expr.str method)": [[576, "polars.Expr.str.ljust"]], "lstrip() (polars.expr.str method)": [[577, "polars.Expr.str.lstrip"]], "n_chars() (polars.expr.str method)": [[578, "polars.Expr.str.n_chars"]], "pad_end() (polars.expr.str method)": [[579, "polars.Expr.str.pad_end"]], "pad_start() (polars.expr.str method)": [[580, "polars.Expr.str.pad_start"]], "parse_int() (polars.expr.str method)": [[581, "polars.Expr.str.parse_int"]], "replace() (polars.expr.str method)": [[582, "polars.Expr.str.replace"]], "replace_all() (polars.expr.str method)": [[583, "polars.Expr.str.replace_all"]], "rjust() (polars.expr.str method)": [[584, "polars.Expr.str.rjust"]], "rstrip() (polars.expr.str method)": [[585, "polars.Expr.str.rstrip"]], "slice() (polars.expr.str method)": [[586, "polars.Expr.str.slice"]], "split() (polars.expr.str method)": [[587, "polars.Expr.str.split"]], "split_exact() (polars.expr.str method)": [[588, "polars.Expr.str.split_exact"]], "splitn() (polars.expr.str method)": [[589, "polars.Expr.str.splitn"]], "starts_with() (polars.expr.str method)": [[590, "polars.Expr.str.starts_with"]], "strip() (polars.expr.str method)": [[591, "polars.Expr.str.strip"]], "strip_chars() (polars.expr.str method)": [[592, "polars.Expr.str.strip_chars"]], "strip_chars_end() (polars.expr.str method)": [[593, "polars.Expr.str.strip_chars_end"]], "strip_chars_start() (polars.expr.str method)": [[594, "polars.Expr.str.strip_chars_start"]], "strip_prefix() (polars.expr.str method)": [[595, "polars.Expr.str.strip_prefix"]], "strip_suffix() (polars.expr.str method)": [[596, "polars.Expr.str.strip_suffix"]], "strptime() (polars.expr.str method)": [[597, "polars.Expr.str.strptime"]], "to_date() (polars.expr.str method)": [[598, "polars.Expr.str.to_date"]], "to_datetime() (polars.expr.str method)": [[599, "polars.Expr.str.to_datetime"]], "to_decimal() (polars.expr.str method)": [[600, "polars.Expr.str.to_decimal"]], "to_lowercase() (polars.expr.str method)": [[601, "polars.Expr.str.to_lowercase"]], "to_time() (polars.expr.str method)": [[602, "polars.Expr.str.to_time"]], "to_titlecase() (polars.expr.str method)": [[603, "polars.Expr.str.to_titlecase"]], "to_uppercase() (polars.expr.str method)": [[604, "polars.Expr.str.to_uppercase"]], "zfill() (polars.expr.str method)": [[605, "polars.Expr.str.zfill"]], "field() (polars.expr.struct method)": [[606, "polars.Expr.struct.field"]], "rename_fields() (polars.expr.struct method)": [[607, "polars.Expr.struct.rename_fields"]], "sub() (polars.expr method)": [[608, "polars.Expr.sub"]], "suffix() (polars.expr method)": [[609, "polars.Expr.suffix"]], "sum() (polars.expr method)": [[610, "polars.Expr.sum"]], "tail() (polars.expr method)": [[611, "polars.Expr.tail"]], "take() (polars.expr method)": [[612, "polars.Expr.take"]], "take_every() (polars.expr method)": [[613, "polars.Expr.take_every"]], "tan() (polars.expr method)": [[614, "polars.Expr.tan"]], "tanh() (polars.expr method)": [[615, "polars.Expr.tanh"]], "to_physical() (polars.expr method)": [[616, "polars.Expr.to_physical"]], "top_k() (polars.expr method)": [[617, "polars.Expr.top_k"]], "truediv() (polars.expr method)": [[618, "polars.Expr.truediv"]], "unique() (polars.expr method)": [[619, "polars.Expr.unique"]], "unique_counts() (polars.expr method)": [[620, "polars.Expr.unique_counts"]], "upper_bound() (polars.expr method)": [[621, "polars.Expr.upper_bound"]], "value_counts() (polars.expr method)": [[622, "polars.Expr.value_counts"]], "var() (polars.expr method)": [[623, "polars.Expr.var"]], "where() (polars.expr method)": [[624, "polars.Expr.where"]], "xor() (polars.expr method)": [[625, "polars.Expr.xor"]], "all() (in module polars)": [[626, "polars.all"]], "all_horizontal() (in module polars)": [[627, "polars.all_horizontal"]], "any() (in module polars)": [[628, "polars.any"]], "any_horizontal() (in module polars)": [[629, "polars.any_horizontal"]], "apply() (in module polars)": [[630, "polars.apply"]], "approx_n_unique() (in module polars)": [[631, "polars.approx_n_unique"]], "arange() (in module polars)": [[632, "polars.arange"]], "arctan2() (in module polars)": [[633, "polars.arctan2"]], "arctan2d() (in module polars)": [[634, "polars.arctan2d"]], "arg_sort_by() (in module polars)": [[635, "polars.arg_sort_by"]], "arg_where() (in module polars)": [[636, "polars.arg_where"]], "avg() (in module polars)": [[637, "polars.avg"]], "coalesce() (in module polars)": [[638, "polars.coalesce"]], "concat_list() (in module polars)": [[639, "polars.concat_list"]], "concat_str() (in module polars)": [[640, "polars.concat_str"]], "corr() (in module polars)": [[641, "polars.corr"]], "count() (in module polars)": [[642, "polars.count"]], "cov() (in module polars)": [[643, "polars.cov"]], "cumfold() (in module polars)": [[644, "polars.cumfold"]], "cumreduce() (in module polars)": [[645, "polars.cumreduce"]], "cumsum() (in module polars)": [[646, "polars.cumsum"]], "cumsum_horizontal() (in module polars)": [[647, "polars.cumsum_horizontal"]], "date() (in module polars)": [[648, "polars.date"]], "date_range() (in module polars)": [[649, "polars.date_range"]], "date_ranges() (in module polars)": [[650, "polars.date_ranges"]], "datetime() (in module polars)": [[651, "polars.datetime"]], "datetime_range() (in module polars)": [[652, "polars.datetime_range"]], "datetime_ranges() (in module polars)": [[653, "polars.datetime_ranges"]], "duration() (in module polars)": [[654, "polars.duration"]], "element() (in module polars)": [[655, "polars.element"]], "exclude() (in module polars)": [[656, "polars.exclude"]], "first() (in module polars)": [[657, "polars.first"]], "fold() (in module polars)": [[658, "polars.fold"]], "format() (in module polars)": [[659, "polars.format"]], "from_epoch() (in module polars)": [[660, "polars.from_epoch"]], "groups() (in module polars)": [[661, "polars.groups"]], "head() (in module polars)": [[662, "polars.head"]], "implode() (in module polars)": [[663, "polars.implode"]], "int_range() (in module polars)": [[664, "polars.int_range"]], "int_ranges() (in module polars)": [[665, "polars.int_ranges"]], "last() (in module polars)": [[666, "polars.last"]], "lit() (in module polars)": [[667, "polars.lit"]], "map() (in module polars)": [[668, "polars.map"]], "map_batches() (in module polars)": [[669, "polars.map_batches"]], "map_groups() (in module polars)": [[670, "polars.map_groups"]], "max() (in module polars)": [[671, "polars.max"]], "max_horizontal() (in module polars)": [[672, "polars.max_horizontal"]], "mean() (in module polars)": [[673, "polars.mean"]], "median() (in module polars)": [[674, "polars.median"]], "min() (in module polars)": [[675, "polars.min"]], "min_horizontal() (in module polars)": [[676, "polars.min_horizontal"]], "n_unique() (in module polars)": [[677, "polars.n_unique"]], "ones() (in module polars)": [[678, "polars.ones"]], "quantile() (in module polars)": [[679, "polars.quantile"]], "reduce() (in module polars)": [[680, "polars.reduce"]], "repeat() (in module polars)": [[681, "polars.repeat"]], "rolling_corr() (in module polars)": [[682, "polars.rolling_corr"]], "rolling_cov() (in module polars)": [[683, "polars.rolling_cov"]], "select() (in module polars)": [[684, "polars.select"]], "sql_expr() (in module polars)": [[685, "polars.sql_expr"]], "std() (in module polars)": [[686, "polars.std"]], "struct() (in module polars)": [[687, "polars.struct"]], "sum() (in module polars)": [[688, "polars.sum"]], "sum_horizontal() (in module polars)": [[689, "polars.sum_horizontal"]], "tail() (in module polars)": [[690, "polars.tail"]], "time() (in module polars)": [[691, "polars.time"]], "time_range() (in module polars)": [[692, "polars.time_range"]], "time_ranges() (in module polars)": [[693, "polars.time_ranges"]], "var() (in module polars)": [[694, "polars.var"]], "when() (in module polars)": [[695, "polars.when"]], "zeros() (in module polars)": [[696, "polars.zeros"]], "approx_n_unique() (polars.lazyframe method)": [[720, "polars.LazyFrame.approx_n_unique"]], "approx_unique() (polars.lazyframe method)": [[721, "polars.LazyFrame.approx_unique"]], "bottom_k() (polars.lazyframe method)": [[722, "polars.LazyFrame.bottom_k"]], "cache() (polars.lazyframe method)": [[723, "polars.LazyFrame.cache"]], "cast() (polars.lazyframe method)": [[724, "polars.LazyFrame.cast"]], "clear() (polars.lazyframe method)": [[725, "polars.LazyFrame.clear"]], "clone() (polars.lazyframe method)": [[726, "polars.LazyFrame.clone"]], "collect() (polars.lazyframe method)": [[727, "polars.LazyFrame.collect"]], "collect_async() (polars.lazyframe method)": [[728, "polars.LazyFrame.collect_async"]], "columns (polars.lazyframe property)": [[729, "polars.LazyFrame.columns"]], "deserialize() (polars.lazyframe class method)": [[730, "polars.LazyFrame.deserialize"]], "drop() (polars.lazyframe method)": [[731, "polars.LazyFrame.drop"]], "drop_nulls() (polars.lazyframe method)": [[732, "polars.LazyFrame.drop_nulls"]], "dtypes (polars.lazyframe property)": [[733, "polars.LazyFrame.dtypes"]], "explain() (polars.lazyframe method)": [[734, "polars.LazyFrame.explain"]], "explode() (polars.lazyframe method)": [[735, "polars.LazyFrame.explode"]], "fetch() (polars.lazyframe method)": [[736, "polars.LazyFrame.fetch"]], "fill_nan() (polars.lazyframe method)": [[737, "polars.LazyFrame.fill_nan"]], "fill_null() (polars.lazyframe method)": [[738, "polars.LazyFrame.fill_null"]], "filter() (polars.lazyframe method)": [[739, "polars.LazyFrame.filter"]], "first() (polars.lazyframe method)": [[740, "polars.LazyFrame.first"]], "from_json() (polars.lazyframe class method)": [[741, "polars.LazyFrame.from_json"]], "group_by() (polars.lazyframe method)": [[742, "polars.LazyFrame.group_by"]], "group_by_dynamic() (polars.lazyframe method)": [[743, "polars.LazyFrame.group_by_dynamic"]], "group_by_rolling() (polars.lazyframe method)": [[744, "polars.LazyFrame.group_by_rolling"]], "groupby() (polars.lazyframe method)": [[745, "polars.LazyFrame.groupby"]], "groupby_dynamic() (polars.lazyframe method)": [[746, "polars.LazyFrame.groupby_dynamic"]], "groupby_rolling() (polars.lazyframe method)": [[747, "polars.LazyFrame.groupby_rolling"]], "head() (polars.lazyframe method)": [[748, "polars.LazyFrame.head"]], "inspect() (polars.lazyframe method)": [[749, "polars.LazyFrame.inspect"]], "interpolate() (polars.lazyframe method)": [[750, "polars.LazyFrame.interpolate"]], "join() (polars.lazyframe method)": [[751, "polars.LazyFrame.join"]], "join_asof() (polars.lazyframe method)": [[752, "polars.LazyFrame.join_asof"]], "last() (polars.lazyframe method)": [[753, "polars.LazyFrame.last"]], "lazy() (polars.lazyframe method)": [[754, "polars.LazyFrame.lazy"]], "limit() (polars.lazyframe method)": [[755, "polars.LazyFrame.limit"]], "map() (polars.lazyframe method)": [[756, "polars.LazyFrame.map"]], "map_batches() (polars.lazyframe method)": [[757, "polars.LazyFrame.map_batches"]], "max() (polars.lazyframe method)": [[758, "polars.LazyFrame.max"]], "mean() (polars.lazyframe method)": [[759, "polars.LazyFrame.mean"]], "median() (polars.lazyframe method)": [[760, "polars.LazyFrame.median"]], "melt() (polars.lazyframe method)": [[761, "polars.LazyFrame.melt"]], "merge_sorted() (polars.lazyframe method)": [[762, "polars.LazyFrame.merge_sorted"]], "min() (polars.lazyframe method)": [[763, "polars.LazyFrame.min"]], "null_count() (polars.lazyframe method)": [[764, "polars.LazyFrame.null_count"]], "pipe() (polars.lazyframe method)": [[765, "polars.LazyFrame.pipe"]], "profile() (polars.lazyframe method)": [[766, "polars.LazyFrame.profile"]], "quantile() (polars.lazyframe method)": [[767, "polars.LazyFrame.quantile"]], "read_json() (polars.lazyframe class method)": [[768, "polars.LazyFrame.read_json"]], "rename() (polars.lazyframe method)": [[769, "polars.LazyFrame.rename"]], "reverse() (polars.lazyframe method)": [[770, "polars.LazyFrame.reverse"]], "rolling() (polars.lazyframe method)": [[771, "polars.LazyFrame.rolling"]], "schema (polars.lazyframe property)": [[772, "polars.LazyFrame.schema"]], "select() (polars.lazyframe method)": [[773, "polars.LazyFrame.select"]], "select_seq() (polars.lazyframe method)": [[774, "polars.LazyFrame.select_seq"]], "serialize() (polars.lazyframe method)": [[775, "polars.LazyFrame.serialize"]], "set_sorted() (polars.lazyframe method)": [[776, "polars.LazyFrame.set_sorted"]], "shift() (polars.lazyframe method)": [[777, "polars.LazyFrame.shift"]], "shift_and_fill() (polars.lazyframe method)": [[778, "polars.LazyFrame.shift_and_fill"]], "show_graph() (polars.lazyframe method)": [[779, "polars.LazyFrame.show_graph"]], "slice() (polars.lazyframe method)": [[780, "polars.LazyFrame.slice"]], "sort() (polars.lazyframe method)": [[781, "polars.LazyFrame.sort"]], "std() (polars.lazyframe method)": [[782, "polars.LazyFrame.std"]], "sum() (polars.lazyframe method)": [[783, "polars.LazyFrame.sum"]], "tail() (polars.lazyframe method)": [[784, "polars.LazyFrame.tail"]], "take_every() (polars.lazyframe method)": [[785, "polars.LazyFrame.take_every"]], "top_k() (polars.lazyframe method)": [[786, "polars.LazyFrame.top_k"]], "unique() (polars.lazyframe method)": [[787, "polars.LazyFrame.unique"]], "unnest() (polars.lazyframe method)": [[788, "polars.LazyFrame.unnest"]], "update() (polars.lazyframe method)": [[789, "polars.LazyFrame.update"]], "var() (polars.lazyframe method)": [[790, "polars.LazyFrame.var"]], "width (polars.lazyframe property)": [[791, "polars.LazyFrame.width"]], "with_columns() (polars.lazyframe method)": [[792, "polars.LazyFrame.with_columns"]], "with_columns_seq() (polars.lazyframe method)": [[793, "polars.LazyFrame.with_columns_seq"]], "with_context() (polars.lazyframe method)": [[794, "polars.LazyFrame.with_context"]], "with_row_count() (polars.lazyframe method)": [[795, "polars.LazyFrame.with_row_count"]], "write_json() (polars.lazyframe method)": [[796, "polars.LazyFrame.write_json"]], "agg() (polars.lazyframe.group_by.lazygroupby method)": [[797, "polars.lazyframe.group_by.LazyGroupBy.agg"]], "all() (polars.lazyframe.group_by.lazygroupby method)": [[798, "polars.lazyframe.group_by.LazyGroupBy.all"]], "apply() (polars.lazyframe.group_by.lazygroupby method)": [[799, "polars.lazyframe.group_by.LazyGroupBy.apply"]], "count() (polars.lazyframe.group_by.lazygroupby method)": [[800, "polars.lazyframe.group_by.LazyGroupBy.count"]], "first() (polars.lazyframe.group_by.lazygroupby method)": [[801, "polars.lazyframe.group_by.LazyGroupBy.first"]], "head() (polars.lazyframe.group_by.lazygroupby method)": [[802, "polars.lazyframe.group_by.LazyGroupBy.head"]], "last() (polars.lazyframe.group_by.lazygroupby method)": [[803, "polars.lazyframe.group_by.LazyGroupBy.last"]], "map_groups() (polars.lazyframe.group_by.lazygroupby method)": [[804, "polars.lazyframe.group_by.LazyGroupBy.map_groups"]], "max() (polars.lazyframe.group_by.lazygroupby method)": [[805, "polars.lazyframe.group_by.LazyGroupBy.max"]], "mean() (polars.lazyframe.group_by.lazygroupby method)": [[806, "polars.lazyframe.group_by.LazyGroupBy.mean"]], "median() (polars.lazyframe.group_by.lazygroupby method)": [[807, "polars.lazyframe.group_by.LazyGroupBy.median"]], "min() (polars.lazyframe.group_by.lazygroupby method)": [[808, "polars.lazyframe.group_by.LazyGroupBy.min"]], "n_unique() (polars.lazyframe.group_by.lazygroupby method)": [[809, "polars.lazyframe.group_by.LazyGroupBy.n_unique"]], "quantile() (polars.lazyframe.group_by.lazygroupby method)": [[810, "polars.lazyframe.group_by.LazyGroupBy.quantile"]], "sum() (polars.lazyframe.group_by.lazygroupby method)": [[811, "polars.lazyframe.group_by.LazyGroupBy.sum"]], "tail() (polars.lazyframe.group_by.lazygroupby method)": [[812, "polars.lazyframe.group_by.LazyGroupBy.tail"]], "all() (in module polars.selectors)": [[819, "polars.selectors.all"]], "by_dtype() (in module polars.selectors)": [[819, "polars.selectors.by_dtype"]], "by_name() (in module polars.selectors)": [[819, "polars.selectors.by_name"]], "categorical() (in module polars.selectors)": [[819, "polars.selectors.categorical"]], "contains() (in module polars.selectors)": [[819, "polars.selectors.contains"]], "date() (in module polars.selectors)": [[819, "polars.selectors.date"]], "datetime() (in module polars.selectors)": [[819, "polars.selectors.datetime"]], "duration() (in module polars.selectors)": [[819, "polars.selectors.duration"]], "ends_with() (in module polars.selectors)": [[819, "polars.selectors.ends_with"]], "expand_selector() (in module polars.selectors)": [[819, "polars.selectors.expand_selector"]], "first() (in module polars.selectors)": [[819, "polars.selectors.first"]], "float() (in module polars.selectors)": [[819, "polars.selectors.float"]], "integer() (in module polars.selectors)": [[819, "polars.selectors.integer"]], "is_selector() (in module polars.selectors)": [[819, "polars.selectors.is_selector"]], "last() (in module polars.selectors)": [[819, "polars.selectors.last"]], "matches() (in module polars.selectors)": [[819, "polars.selectors.matches"]], "module": [[819, "module-polars.selectors"]], "numeric() (in module polars.selectors)": [[819, "polars.selectors.numeric"]], "polars.selectors": [[819, "module-polars.selectors"]], "starts_with() (in module polars.selectors)": [[819, "polars.selectors.starts_with"]], "string() (in module polars.selectors)": [[819, "polars.selectors.string"]], "temporal() (in module polars.selectors)": [[819, "polars.selectors.temporal"]], "time() (in module polars.selectors)": [[819, "polars.selectors.time"]], "abs() (polars.series method)": [[821, "polars.Series.abs"]], "alias() (polars.series method)": [[822, "polars.Series.alias"]], "all() (polars.series method)": [[823, "polars.Series.all"]], "any() (polars.series method)": [[824, "polars.Series.any"]], "append() (polars.series method)": [[825, "polars.Series.append"]], "apply() (polars.series method)": [[826, "polars.Series.apply"]], "arccos() (polars.series method)": [[827, "polars.Series.arccos"]], "arccosh() (polars.series method)": [[828, "polars.Series.arccosh"]], "arcsin() (polars.series method)": [[829, "polars.Series.arcsin"]], "arcsinh() (polars.series method)": [[830, "polars.Series.arcsinh"]], "arctan() (polars.series method)": [[831, "polars.Series.arctan"]], "arctanh() (polars.series method)": [[832, "polars.Series.arctanh"]], "arg_max() (polars.series method)": [[833, "polars.Series.arg_max"]], "arg_min() (polars.series method)": [[834, "polars.Series.arg_min"]], "arg_sort() (polars.series method)": [[835, "polars.Series.arg_sort"]], "arg_true() (polars.series method)": [[836, "polars.Series.arg_true"]], "arg_unique() (polars.series method)": [[837, "polars.Series.arg_unique"]], "max() (polars.series.arr method)": [[838, "polars.Series.arr.max"]], "min() (polars.series.arr method)": [[839, "polars.Series.arr.min"]], "sum() (polars.series.arr method)": [[840, "polars.Series.arr.sum"]], "unique() (polars.series.arr method)": [[841, "polars.Series.arr.unique"]], "contains() (polars.series.bin method)": [[842, "polars.Series.bin.contains"]], "decode() (polars.series.bin method)": [[843, "polars.Series.bin.decode"]], "encode() (polars.series.bin method)": [[844, "polars.Series.bin.encode"]], "ends_with() (polars.series.bin method)": [[845, "polars.Series.bin.ends_with"]], "starts_with() (polars.series.bin method)": [[846, "polars.Series.bin.starts_with"]], "bottom_k() (polars.series method)": [[847, "polars.Series.bottom_k"]], "cast() (polars.series method)": [[848, "polars.Series.cast"]], "cat (polars.series attribute)": [[849, "polars.Series.cat"]], "get_categories() (polars.series.cat method)": [[850, "polars.Series.cat.get_categories"]], "is_local() (polars.series.cat method)": [[851, "polars.Series.cat.is_local"]], "set_ordering() (polars.series.cat method)": [[852, "polars.Series.cat.set_ordering"]], "to_local() (polars.series.cat method)": [[853, "polars.Series.cat.to_local"]], "uses_lexical_ordering() (polars.series.cat method)": [[854, "polars.Series.cat.uses_lexical_ordering"]], "cbrt() (polars.series method)": [[855, "polars.Series.cbrt"]], "ceil() (polars.series method)": [[856, "polars.Series.ceil"]], "chunk_lengths() (polars.series method)": [[857, "polars.Series.chunk_lengths"]], "clear() (polars.series method)": [[858, "polars.Series.clear"]], "clip() (polars.series method)": [[859, "polars.Series.clip"]], "clip_max() (polars.series method)": [[860, "polars.Series.clip_max"]], "clip_min() (polars.series method)": [[861, "polars.Series.clip_min"]], "clone() (polars.series method)": [[862, "polars.Series.clone"]], "cos() (polars.series method)": [[863, "polars.Series.cos"]], "cosh() (polars.series method)": [[864, "polars.Series.cosh"]], "cot() (polars.series method)": [[865, "polars.Series.cot"]], "cummax() (polars.series method)": [[866, "polars.Series.cummax"]], "cummin() (polars.series method)": [[867, "polars.Series.cummin"]], "cumprod() (polars.series method)": [[868, "polars.Series.cumprod"]], "cumsum() (polars.series method)": [[869, "polars.Series.cumsum"]], "cumulative_eval() (polars.series method)": [[870, "polars.Series.cumulative_eval"]], "cut() (polars.series method)": [[871, "polars.Series.cut"]], "describe() (polars.series method)": [[872, "polars.Series.describe"]], "diff() (polars.series method)": [[873, "polars.Series.diff"]], "dot() (polars.series method)": [[874, "polars.Series.dot"]], "drop_nans() (polars.series method)": [[875, "polars.Series.drop_nans"]], "drop_nulls() (polars.series method)": [[876, "polars.Series.drop_nulls"]], "dt (polars.series attribute)": [[877, "polars.Series.dt"]], "base_utc_offset() (polars.series.dt method)": [[878, "polars.Series.dt.base_utc_offset"]], "cast_time_unit() (polars.series.dt method)": [[879, "polars.Series.dt.cast_time_unit"]], "combine() (polars.series.dt method)": [[880, "polars.Series.dt.combine"]], "convert_time_zone() (polars.series.dt method)": [[881, "polars.Series.dt.convert_time_zone"]], "date() (polars.series.dt method)": [[882, "polars.Series.dt.date"]], "datetime() (polars.series.dt method)": [[883, "polars.Series.dt.datetime"]], "day() (polars.series.dt method)": [[884, "polars.Series.dt.day"]], "days() (polars.series.dt method)": [[885, "polars.Series.dt.days"]], "dst_offset() (polars.series.dt method)": [[886, "polars.Series.dt.dst_offset"]], "epoch() (polars.series.dt method)": [[887, "polars.Series.dt.epoch"]], "hour() (polars.series.dt method)": [[888, "polars.Series.dt.hour"]], "hours() (polars.series.dt method)": [[889, "polars.Series.dt.hours"]], "is_leap_year() (polars.series.dt method)": [[890, "polars.Series.dt.is_leap_year"]], "iso_year() (polars.series.dt method)": [[891, "polars.Series.dt.iso_year"]], "max() (polars.series.dt method)": [[892, "polars.Series.dt.max"]], "mean() (polars.series.dt method)": [[893, "polars.Series.dt.mean"]], "median() (polars.series.dt method)": [[894, "polars.Series.dt.median"]], "microsecond() (polars.series.dt method)": [[895, "polars.Series.dt.microsecond"]], "microseconds() (polars.series.dt method)": [[896, "polars.Series.dt.microseconds"]], "millisecond() (polars.series.dt method)": [[897, "polars.Series.dt.millisecond"]], "milliseconds() (polars.series.dt method)": [[898, "polars.Series.dt.milliseconds"]], "min() (polars.series.dt method)": [[899, "polars.Series.dt.min"]], "minute() (polars.series.dt method)": [[900, "polars.Series.dt.minute"]], "minutes() (polars.series.dt method)": [[901, "polars.Series.dt.minutes"]], "month() (polars.series.dt method)": [[902, "polars.Series.dt.month"]], "month_end() (polars.series.dt method)": [[903, "polars.Series.dt.month_end"]], "month_start() (polars.series.dt method)": [[904, "polars.Series.dt.month_start"]], "nanosecond() (polars.series.dt method)": [[905, "polars.Series.dt.nanosecond"]], "nanoseconds() (polars.series.dt method)": [[906, "polars.Series.dt.nanoseconds"]], "offset_by() (polars.series.dt method)": [[907, "polars.Series.dt.offset_by"]], "ordinal_day() (polars.series.dt method)": [[908, "polars.Series.dt.ordinal_day"]], "quarter() (polars.series.dt method)": [[909, "polars.Series.dt.quarter"]], "replace_time_zone() (polars.series.dt method)": [[910, "polars.Series.dt.replace_time_zone"]], "round() (polars.series.dt method)": [[911, "polars.Series.dt.round"]], "second() (polars.series.dt method)": [[912, "polars.Series.dt.second"]], "seconds() (polars.series.dt method)": [[913, "polars.Series.dt.seconds"]], "strftime() (polars.series.dt method)": [[914, "polars.Series.dt.strftime"]], "time() (polars.series.dt method)": [[915, "polars.Series.dt.time"]], "timestamp() (polars.series.dt method)": [[916, "polars.Series.dt.timestamp"]], "to_string() (polars.series.dt method)": [[917, "polars.Series.dt.to_string"]], "truncate() (polars.series.dt method)": [[918, "polars.Series.dt.truncate"]], "week() (polars.series.dt method)": [[919, "polars.Series.dt.week"]], "weekday() (polars.series.dt method)": [[920, "polars.Series.dt.weekday"]], "with_time_unit() (polars.series.dt method)": [[921, "polars.Series.dt.with_time_unit"]], "year() (polars.series.dt method)": [[922, "polars.Series.dt.year"]], "dtype (polars.series attribute)": [[923, "polars.Series.dtype"]], "entropy() (polars.series method)": [[924, "polars.Series.entropy"]], "estimated_size() (polars.series method)": [[925, "polars.Series.estimated_size"]], "ewm_mean() (polars.series method)": [[926, "polars.Series.ewm_mean"]], "ewm_std() (polars.series method)": [[927, "polars.Series.ewm_std"]], "ewm_var() (polars.series method)": [[928, "polars.Series.ewm_var"]], "exp() (polars.series method)": [[929, "polars.Series.exp"]], "explode() (polars.series method)": [[930, "polars.Series.explode"]], "extend() (polars.series method)": [[931, "polars.Series.extend"]], "extend_constant() (polars.series method)": [[932, "polars.Series.extend_constant"]], "fill_nan() (polars.series method)": [[933, "polars.Series.fill_nan"]], "fill_null() (polars.series method)": [[934, "polars.Series.fill_null"]], "filter() (polars.series method)": [[935, "polars.Series.filter"]], "flags (polars.series attribute)": [[936, "polars.Series.flags"]], "floor() (polars.series method)": [[937, "polars.Series.floor"]], "get_chunks() (polars.series method)": [[938, "polars.Series.get_chunks"]], "has_validity() (polars.series method)": [[939, "polars.Series.has_validity"]], "hash() (polars.series method)": [[940, "polars.Series.hash"]], "head() (polars.series method)": [[941, "polars.Series.head"]], "hist() (polars.series method)": [[942, "polars.Series.hist"]], "implode() (polars.series method)": [[943, "polars.Series.implode"]], "inner_dtype (polars.series attribute)": [[944, "polars.Series.inner_dtype"]], "interpolate() (polars.series method)": [[945, "polars.Series.interpolate"]], "is_between() (polars.series method)": [[946, "polars.Series.is_between"]], "is_boolean() (polars.series method)": [[947, "polars.Series.is_boolean"]], "is_duplicated() (polars.series method)": [[948, "polars.Series.is_duplicated"]], "is_empty() (polars.series method)": [[949, "polars.Series.is_empty"]], "is_finite() (polars.series method)": [[950, "polars.Series.is_finite"]], "is_first() (polars.series method)": [[951, "polars.Series.is_first"]], "is_first_distinct() (polars.series method)": [[952, "polars.Series.is_first_distinct"]], "is_float() (polars.series method)": [[953, "polars.Series.is_float"]], "is_in() (polars.series method)": [[954, "polars.Series.is_in"]], "is_infinite() (polars.series method)": [[955, "polars.Series.is_infinite"]], "is_integer() (polars.series method)": [[956, "polars.Series.is_integer"]], "is_last() (polars.series method)": [[957, "polars.Series.is_last"]], "is_last_distinct() (polars.series method)": [[958, "polars.Series.is_last_distinct"]], "is_nan() (polars.series method)": [[959, "polars.Series.is_nan"]], "is_not_nan() (polars.series method)": [[960, "polars.Series.is_not_nan"]], "is_not_null() (polars.series method)": [[961, "polars.Series.is_not_null"]], "is_null() (polars.series method)": [[962, "polars.Series.is_null"]], "is_numeric() (polars.series method)": [[963, "polars.Series.is_numeric"]], "is_sorted() (polars.series method)": [[964, "polars.Series.is_sorted"]], "is_temporal() (polars.series method)": [[965, "polars.Series.is_temporal"]], "is_unique() (polars.series method)": [[966, "polars.Series.is_unique"]], "is_utf8() (polars.series method)": [[967, "polars.Series.is_utf8"]], "item() (polars.series method)": [[968, "polars.Series.item"]], "kurtosis() (polars.series method)": [[969, "polars.Series.kurtosis"]], "len() (polars.series method)": [[970, "polars.Series.len"]], "limit() (polars.series method)": [[971, "polars.Series.limit"]], "list (polars.series attribute)": [[972, "polars.Series.list"]], "all() (polars.series.list method)": [[973, "polars.Series.list.all"]], "any() (polars.series.list method)": [[974, "polars.Series.list.any"]], "arg_max() (polars.series.list method)": [[975, "polars.Series.list.arg_max"]], "arg_min() (polars.series.list method)": [[976, "polars.Series.list.arg_min"]], "concat() (polars.series.list method)": [[977, "polars.Series.list.concat"]], "contains() (polars.series.list method)": [[978, "polars.Series.list.contains"]], "count_match() (polars.series.list method)": [[979, "polars.Series.list.count_match"]], "count_matches() (polars.series.list method)": [[980, "polars.Series.list.count_matches"]], "diff() (polars.series.list method)": [[981, "polars.Series.list.diff"]], "difference() (polars.series.list method)": [[982, "polars.Series.list.difference"]], "drop_nulls() (polars.series.list method)": [[983, "polars.Series.list.drop_nulls"]], "eval() (polars.series.list method)": [[984, "polars.Series.list.eval"]], "explode() (polars.series.list method)": [[985, "polars.Series.list.explode"]], "first() (polars.series.list method)": [[986, "polars.Series.list.first"]], "get() (polars.series.list method)": [[987, "polars.Series.list.get"]], "head() (polars.series.list method)": [[988, "polars.Series.list.head"]], "intersection() (polars.series.list method)": [[989, "polars.Series.list.intersection"]], "join() (polars.series.list method)": [[990, "polars.Series.list.join"]], "last() (polars.series.list method)": [[991, "polars.Series.list.last"]], "len() (polars.series.list method)": [[992, "polars.Series.list.len"]], "lengths() (polars.series.list method)": [[993, "polars.Series.list.lengths"]], "max() (polars.series.list method)": [[994, "polars.Series.list.max"]], "mean() (polars.series.list method)": [[995, "polars.Series.list.mean"]], "min() (polars.series.list method)": [[996, "polars.Series.list.min"]], "reverse() (polars.series.list method)": [[997, "polars.Series.list.reverse"]], "sample() (polars.series.list method)": [[998, "polars.Series.list.sample"]], "set_difference() (polars.series.list method)": [[999, "polars.Series.list.set_difference"]], "set_intersection() (polars.series.list method)": [[1000, "polars.Series.list.set_intersection"]], "set_symmetric_difference() (polars.series.list method)": [[1001, "polars.Series.list.set_symmetric_difference"]], "set_union() (polars.series.list method)": [[1002, "polars.Series.list.set_union"]], "shift() (polars.series.list method)": [[1003, "polars.Series.list.shift"]], "slice() (polars.series.list method)": [[1004, "polars.Series.list.slice"]], "sort() (polars.series.list method)": [[1005, "polars.Series.list.sort"]], "sum() (polars.series.list method)": [[1006, "polars.Series.list.sum"]], "symmetric_difference() (polars.series.list method)": [[1007, "polars.Series.list.symmetric_difference"]], "tail() (polars.series.list method)": [[1008, "polars.Series.list.tail"]], "take() (polars.series.list method)": [[1009, "polars.Series.list.take"]], "to_struct() (polars.series.list method)": [[1010, "polars.Series.list.to_struct"]], "union() (polars.series.list method)": [[1011, "polars.Series.list.union"]], "unique() (polars.series.list method)": [[1012, "polars.Series.list.unique"]], "log() (polars.series method)": [[1013, "polars.Series.log"]], "log10() (polars.series method)": [[1014, "polars.Series.log10"]], "log1p() (polars.series method)": [[1015, "polars.Series.log1p"]], "lower_bound() (polars.series method)": [[1016, "polars.Series.lower_bound"]], "map_dict() (polars.series method)": [[1017, "polars.Series.map_dict"]], "map_elements() (polars.series method)": [[1018, "polars.Series.map_elements"]], "max() (polars.series method)": [[1019, "polars.Series.max"]], "mean() (polars.series method)": [[1020, "polars.Series.mean"]], "median() (polars.series method)": [[1021, "polars.Series.median"]], "min() (polars.series method)": [[1022, "polars.Series.min"]], "mode() (polars.series method)": [[1023, "polars.Series.mode"]], "n_chunks() (polars.series method)": [[1024, "polars.Series.n_chunks"]], "n_unique() (polars.series method)": [[1025, "polars.Series.n_unique"]], "name (polars.series attribute)": [[1026, "polars.Series.name"]], "nan_max() (polars.series method)": [[1027, "polars.Series.nan_max"]], "nan_min() (polars.series method)": [[1028, "polars.Series.nan_min"]], "new_from_index() (polars.series method)": [[1029, "polars.Series.new_from_index"]], "not_() (polars.series method)": [[1030, "polars.Series.not_"]], "null_count() (polars.series method)": [[1031, "polars.Series.null_count"]], "pct_change() (polars.series method)": [[1032, "polars.Series.pct_change"]], "peak_max() (polars.series method)": [[1033, "polars.Series.peak_max"]], "peak_min() (polars.series method)": [[1034, "polars.Series.peak_min"]], "product() (polars.series method)": [[1035, "polars.Series.product"]], "qcut() (polars.series method)": [[1036, "polars.Series.qcut"]], "quantile() (polars.series method)": [[1037, "polars.Series.quantile"]], "rank() (polars.series method)": [[1038, "polars.Series.rank"]], "rechunk() (polars.series method)": [[1039, "polars.Series.rechunk"]], "reinterpret() (polars.series method)": [[1040, "polars.Series.reinterpret"]], "rename() (polars.series method)": [[1041, "polars.Series.rename"]], "reshape() (polars.series method)": [[1042, "polars.Series.reshape"]], "reverse() (polars.series method)": [[1043, "polars.Series.reverse"]], "rle() (polars.series method)": [[1044, "polars.Series.rle"]], "rle_id() (polars.series method)": [[1045, "polars.Series.rle_id"]], "rolling_apply() (polars.series method)": [[1046, "polars.Series.rolling_apply"]], "rolling_map() (polars.series method)": [[1047, "polars.Series.rolling_map"]], "rolling_max() (polars.series method)": [[1048, "polars.Series.rolling_max"]], "rolling_mean() (polars.series method)": [[1049, "polars.Series.rolling_mean"]], "rolling_median() (polars.series method)": [[1050, "polars.Series.rolling_median"]], "rolling_min() (polars.series method)": [[1051, "polars.Series.rolling_min"]], "rolling_quantile() (polars.series method)": [[1052, "polars.Series.rolling_quantile"]], "rolling_skew() (polars.series method)": [[1053, "polars.Series.rolling_skew"]], "rolling_std() (polars.series method)": [[1054, "polars.Series.rolling_std"]], "rolling_sum() (polars.series method)": [[1055, "polars.Series.rolling_sum"]], "rolling_var() (polars.series method)": [[1056, "polars.Series.rolling_var"]], "round() (polars.series method)": [[1057, "polars.Series.round"]], "sample() (polars.series method)": [[1058, "polars.Series.sample"]], "search_sorted() (polars.series method)": [[1059, "polars.Series.search_sorted"]], "series_equal() (polars.series method)": [[1060, "polars.Series.series_equal"]], "set() (polars.series method)": [[1061, "polars.Series.set"]], "set_at_idx() (polars.series method)": [[1062, "polars.Series.set_at_idx"]], "set_sorted() (polars.series method)": [[1063, "polars.Series.set_sorted"]], "shape (polars.series attribute)": [[1064, "polars.Series.shape"]], "shift() (polars.series method)": [[1065, "polars.Series.shift"]], "shift_and_fill() (polars.series method)": [[1066, "polars.Series.shift_and_fill"]], "shrink_dtype() (polars.series method)": [[1067, "polars.Series.shrink_dtype"]], "shrink_to_fit() (polars.series method)": [[1068, "polars.Series.shrink_to_fit"]], "shuffle() (polars.series method)": [[1069, "polars.Series.shuffle"]], "sign() (polars.series method)": [[1070, "polars.Series.sign"]], "sin() (polars.series method)": [[1071, "polars.Series.sin"]], "sinh() (polars.series method)": [[1072, "polars.Series.sinh"]], "skew() (polars.series method)": [[1073, "polars.Series.skew"]], "slice() (polars.series method)": [[1074, "polars.Series.slice"]], "sort() (polars.series method)": [[1075, "polars.Series.sort"]], "sqrt() (polars.series method)": [[1076, "polars.Series.sqrt"]], "std() (polars.series method)": [[1077, "polars.Series.std"]], "str (polars.series attribute)": [[1078, "polars.Series.str"]], "concat() (polars.series.str method)": [[1079, "polars.Series.str.concat"]], "contains() (polars.series.str method)": [[1080, "polars.Series.str.contains"]], "count_match() (polars.series.str method)": [[1081, "polars.Series.str.count_match"]], "count_matches() (polars.series.str method)": [[1082, "polars.Series.str.count_matches"]], "decode() (polars.series.str method)": [[1083, "polars.Series.str.decode"]], "encode() (polars.series.str method)": [[1084, "polars.Series.str.encode"]], "ends_with() (polars.series.str method)": [[1085, "polars.Series.str.ends_with"]], "explode() (polars.series.str method)": [[1086, "polars.Series.str.explode"]], "extract() (polars.series.str method)": [[1087, "polars.Series.str.extract"]], "extract_all() (polars.series.str method)": [[1088, "polars.Series.str.extract_all"]], "extract_groups() (polars.series.str method)": [[1089, "polars.Series.str.extract_groups"]], "json_extract() (polars.series.str method)": [[1090, "polars.Series.str.json_extract"]], "json_path_match() (polars.series.str method)": [[1091, "polars.Series.str.json_path_match"]], "len_bytes() (polars.series.str method)": [[1092, "polars.Series.str.len_bytes"]], "len_chars() (polars.series.str method)": [[1093, "polars.Series.str.len_chars"]], "lengths() (polars.series.str method)": [[1094, "polars.Series.str.lengths"]], "ljust() (polars.series.str method)": [[1095, "polars.Series.str.ljust"]], "lstrip() (polars.series.str method)": [[1096, "polars.Series.str.lstrip"]], "n_chars() (polars.series.str method)": [[1097, "polars.Series.str.n_chars"]], "pad_end() (polars.series.str method)": [[1098, "polars.Series.str.pad_end"]], "pad_start() (polars.series.str method)": [[1099, "polars.Series.str.pad_start"]], "parse_int() (polars.series.str method)": [[1100, "polars.Series.str.parse_int"]], "replace() (polars.series.str method)": [[1101, "polars.Series.str.replace"]], "replace_all() (polars.series.str method)": [[1102, "polars.Series.str.replace_all"]], "rjust() (polars.series.str method)": [[1103, "polars.Series.str.rjust"]], "rstrip() (polars.series.str method)": [[1104, "polars.Series.str.rstrip"]], "slice() (polars.series.str method)": [[1105, "polars.Series.str.slice"]], "split() (polars.series.str method)": [[1106, "polars.Series.str.split"]], "split_exact() (polars.series.str method)": [[1107, "polars.Series.str.split_exact"]], "splitn() (polars.series.str method)": [[1108, "polars.Series.str.splitn"]], "starts_with() (polars.series.str method)": [[1109, "polars.Series.str.starts_with"]], "strip() (polars.series.str method)": [[1110, "polars.Series.str.strip"]], "strip_chars() (polars.series.str method)": [[1111, "polars.Series.str.strip_chars"]], "strip_chars_end() (polars.series.str method)": [[1112, "polars.Series.str.strip_chars_end"]], "strip_chars_start() (polars.series.str method)": [[1113, "polars.Series.str.strip_chars_start"]], "strip_prefix() (polars.series.str method)": [[1114, "polars.Series.str.strip_prefix"]], "strip_suffix() (polars.series.str method)": [[1115, "polars.Series.str.strip_suffix"]], "strptime() (polars.series.str method)": [[1116, "polars.Series.str.strptime"]], "to_date() (polars.series.str method)": [[1117, "polars.Series.str.to_date"]], "to_datetime() (polars.series.str method)": [[1118, "polars.Series.str.to_datetime"]], "to_decimal() (polars.series.str method)": [[1119, "polars.Series.str.to_decimal"]], "to_lowercase() (polars.series.str method)": [[1120, "polars.Series.str.to_lowercase"]], "to_time() (polars.series.str method)": [[1121, "polars.Series.str.to_time"]], "to_titlecase() (polars.series.str method)": [[1122, "polars.Series.str.to_titlecase"]], "to_uppercase() (polars.series.str method)": [[1123, "polars.Series.str.to_uppercase"]], "zfill() (polars.series.str method)": [[1124, "polars.Series.str.zfill"]], "field() (polars.series.struct method)": [[1125, "polars.Series.struct.field"]], "fields (polars.series.struct attribute)": [[1126, "polars.Series.struct.fields"]], "rename_fields() (polars.series.struct method)": [[1127, "polars.Series.struct.rename_fields"]], "schema (polars.series.struct attribute)": [[1128, "polars.Series.struct.schema"]], "unnest() (polars.series.struct method)": [[1129, "polars.Series.struct.unnest"]], "sum() (polars.series method)": [[1130, "polars.Series.sum"]], "tail() (polars.series method)": [[1131, "polars.Series.tail"]], "take() (polars.series method)": [[1132, "polars.Series.take"]], "take_every() (polars.series method)": [[1133, "polars.Series.take_every"]], "tan() (polars.series method)": [[1134, "polars.Series.tan"]], "tanh() (polars.series method)": [[1135, "polars.Series.tanh"]], "to_arrow() (polars.series method)": [[1136, "polars.Series.to_arrow"]], "to_dummies() (polars.series method)": [[1137, "polars.Series.to_dummies"]], "to_frame() (polars.series method)": [[1138, "polars.Series.to_frame"]], "to_init_repr() (polars.series method)": [[1139, "polars.Series.to_init_repr"]], "to_list() (polars.series method)": [[1140, "polars.Series.to_list"]], "to_numpy() (polars.series method)": [[1141, "polars.Series.to_numpy"]], "to_pandas() (polars.series method)": [[1142, "polars.Series.to_pandas"]], "to_physical() (polars.series method)": [[1143, "polars.Series.to_physical"]], "top_k() (polars.series method)": [[1144, "polars.Series.top_k"]], "unique() (polars.series method)": [[1145, "polars.Series.unique"]], "unique_counts() (polars.series method)": [[1146, "polars.Series.unique_counts"]], "upper_bound() (polars.series method)": [[1147, "polars.Series.upper_bound"]], "value_counts() (polars.series method)": [[1148, "polars.Series.value_counts"]], "var() (polars.series method)": [[1149, "polars.Series.var"]], "view() (polars.series method)": [[1150, "polars.Series.view"]], "zip_with() (polars.series method)": [[1151, "polars.Series.zip_with"]], "sqlcontext (class in polars)": [[1167, "polars.SQLContext"]], "__enter__() (polars.sqlcontext method)": [[1167, "polars.SQLContext.__enter__"]], "__exit__() (polars.sqlcontext method)": [[1167, "polars.SQLContext.__exit__"]], "__init__() (polars.sqlcontext method)": [[1167, "polars.SQLContext.__init__"]]}})